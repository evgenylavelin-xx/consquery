//Консоль запросов 1С от Евгения Лавелина
//e-mail:support@consquery.ru
//http: www.consquery.ru

/////////////////////////////////////////
// ЭкспортныеПеременныеМодуля

Перем RegExp Экспорт;

Перем мСтруктураСРазмерами Экспорт;
Перем мРезЗапроса Экспорт;                    // результат 
Перем гСтруктураТЗДляВременныхТаблиц Экспорт; // структура ТЗ для временных таблиц

Перем гСеансовыеДанные Экспорт, гПодменюВременныеТаблицыКнопки Экспорт;

Перем гСоответствиеВременныеТаблицы Экспорт; //соответствие [Имя таблицы, Соджержимое временной таблицы]
Перем гСоответствиеЗапросы Экспорт;          //соответствие [Идентификатор запроса, Запрос]

Перем гСоединениеConsqueryCloud Экспорт;

Перем гМассивИзмененныхСтрок Экспорт;

Функция ВерсияОбработки()
	Возврат "3.1.4-b22";
КонецФункции // ВерсияОбработки()

/////////////////////////////////////////
// ЭкспортныеПроцедурыИФункции

Процедура гВывестиОшибкуВыполнениякода(лТекстОшибки, КодДляВыполнения) Экспорт
	
	Сообщить("Текст ошибки: " + лТекстОшибки, СтатусСообщения.Важное);		
	
	Если Найти(лТекстОшибки, "Переменная не определена (ТаблицаРезультата)") > 0 Тогда 
		Сообщить("Комментарий к ошибке: в коде используется устаревшая переменная 'ТаблицаРезультата'. 
		|Замените ее на переменную '" + гПолучитьСвойстваРеквизитаТаблицаРезультата().ИмяРеквизита + "'", СтатусСообщения.Информация);
	КонецЕсли;
	
	Если Найти(КодДляВыполнения, "мФормаПараметров.Параметры.") > 0 Тогда 
		Сообщить("Информация: в коде используется устаревший код 'мФормаПараметров.Параметры.Найти(""..."", ""ИмяПараметра"").ЗначениеПараметра;'. 
		|Замените его на код 'мФормаПараметров.ПараметрыСписок.Найти(""..."", ""Имя"").Значение;'", СтатусСообщения.Информация);
	КонецЕсли;
	
	Если Найти(лТекстОшибки, ": Ошибка при вызове метода контекста (Найти): Неверное имя колонки") > 0 И Найти(КодДляВыполнения, """ИмяПараметра"").Значение") > 0 Тогда
		Сообщить("Комментарий к ошибке: возможно в коде используется устаревший код 'мФормаПараметров.ПараметрыСписок.Найти(""..."", ""ИмяПараметра"").Значение'. 
		|Замените его на код 'мФормаПараметров.ПараметрыСписок.Найти(""..."", ""Имя"").Значение'", СтатусСообщения.Информация);
	КонецЕсли;
	
	Если Найти(лТекстОшибки, ": Поле объекта не обнаружено (ЗначениеПараметра)") > 0 И Найти(КодДляВыполнения, ").ЗначениеПараметра") > 0 Тогда 
		Сообщить("Комментарий к ошибке: возможно в коде используется устаревший код получения значения параметра запроса ').ЗначениеПараметра'. 
		|Замените его на код ').Значение'", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция гПолучитьКоординатыОшибки(ТекстОшибки) Экспорт

	Если Не гИнициализацияVBScript() тогда
		Возврат Неопределено		
	КонецЕсли;
	
	RegExp.Pattern = "{\([0-9]+, [0-9]+\)}";
	лМассив        = RegExp.Execute(ТекстОшибки);
	
	Если лМассив.Count() = 0 Тогда 
		Возврат Неопределено
	КонецЕсли;
	
	лРезультатРазбора = лМассив.Item(0).Value;
	
	RegExp.Pattern = "[0-9]+";
	лМассив        = RegExp.Execute(лРезультатРазбора);
	
	Если лМассив.Count() <> 2 Тогда 
		Возврат Неопределено
	КонецЕсли;
	
	Возврат Новый Структура("Строка, Колонка", лМассив.Item(0).Value, лМассив.Item(1).Value);

КонецФункции // гПолучитьКоординатыОшибки()

//+++ Процедуры и функции работы с облаком

Функция гПоискВОблаке(соединение, строкаПоиска, искатьВЗапросах, искатьВАлгоритмах, искатьВНазвании, искатьВТексте, началоПоиска, НастройкиПрокси) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/find.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&str=" + строкаПоиска + "&inText=" + ?(искатьВТексте, 1, 0) + "&inName=" + ?(искатьВНазвании, 1,0) + "&inCode=" + ?(искатьВАлгоритмах, 1,0) + "&inQuery=" + ?(искатьВЗапросах, 1,0) + "&startRecord=" + началоПоиска + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки", "Ошибка подключения к сервису", 
			"Ошибка подключения к сервису: 
				|Произошла сетевая ошибка. (" + ОписаниеОшибки() + ")
				|Попробуйте еще раз через некоторое время.");
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, ДанныеИзОблака, МожноПродолжитьПоиск, ТекстОшибки", лДанные.status, лДанные.data, лДанные.isEnd = 0, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гПоискВОблаке()

&НаКлиенте
Функция гВосстановитьИдентификаторСессииConsqueryCloud() Экспорт 
	лИмяКонстанты = "Consquery_cloud_ИдентификаторСессии";
	Возврат ВосстановитьЗначение(лИмяКонстанты);
КонецФункции // гВосстановитьИдентификаторСессииConsqueryCloud()

&НаКлиенте
Функция гСохранитьИдентификаторСессииConsqueryCloud(соединение) Экспорт 
	лИмяКонстанты = "Consquery_cloud_ИдентификаторСессии";
	СохранитьЗначение(лИмяКонстанты, Соединение);
	Возврат лИмяКонстанты;
КонецФункции // гСохранитьИдентификаторСессииConsqueryCloud()

&НаКлиенте
Функция гВосстановитьНастройкиПрокси() Экспорт 
	лИмяКонстанты = "Consquery_cloud_НастройкиПрокси";
	лСохраненныеНастройкиПрокси = ВосстановитьЗначение(лИмяКонстанты);	
	Если лСохраненныеНастройкиПрокси = Неопределено Тогда 
		Возврат гСтруктураНастроекПрокси();
	Иначе
		Возврат лСохраненныеНастройкиПрокси;
	КонецЕсли;
КонецФункции // гВосстановитьНастройкиПрокси

Функция гПолучитьЗапросыИзОблака(соединение, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/getQuerys.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&idPackage=" + идПакетаВОблаке + "&idQuery=" + идЗапроса + "&idCode=" + идСтрокиКода + "&addChilds=" + ?(включатьПодчиненные, "1", "0") + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки, НеобходимоПереподключиться", "Ошибка подключения к сервису", 
			"Ошибка подключения к сервису: 
				|Произошла сетевая ошибка. (" + ОписаниеОшибки() + ")
				|Попробуйте еще раз через некоторое время.", Ложь);
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, Данные, ТекстОшибки, НеобходимоПереподключиться", лДанные.status, лДанные.data, лДанные.errors, лДанные.errСonnect = 1);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гПолучитьЗапросыИзОблака()

Функция гПолучитьДанныеДляПревьюИзОблака(соединение, идПакетаВОблаке, идЗапроса, идСтрокиКода, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/getPreview.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&idPackage=" + идПакетаВОблаке + "&idQuery=" + идЗапроса + "&idCode=" + идСтрокиКода + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки", "Ошибка подключения к сервису", 
			"Ошибка подключения к сервису: 
				|Произошла сетевая ошибка. (" + ОписаниеОшибки() + ")
				|Попробуйте еще раз через некоторое время.");
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, ДанныеИзОблака, ТекстОшибки", лДанные.status, лДанные.data, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гПолучитьДанныеДляПревьюИзОблака()

//Функция гПолучитьСсылкуНаЗапросВОблаке(соединение, идВОблаке, идЗапроса, выгружатьПодчиненные, НастройкиПрокси = Неопределено) Экспорт
//	
//	данные = СтрЗаменить(данные, "%", "\u0025");
//	данные = СтрЗаменить(данные, "+", "\u002B");
//	
//	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
//	
//	ЗаголовкиHTTP = Новый Соответствие;
//	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
//	
//	HTTPЗапрос = Новый HTTPЗапрос("/getLink.php", ЗаголовкиHTTP);
//	лПараметрыЗапроса = "&idConnection=" + соединение + "&idPackage=" + идВОблаке + "&idQuery=" + идЗапроса + "&addChilds=" + ?(выгружатьПодчиненные, 1, 0) + "&V8x=""OK""";
//	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
//	
//	Попытка
//		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
//	Исключение
//		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
//		ВызватьИсключение;
//	КонецПопытки;                                                                                   
//	
//	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
//	
//	ОтветJSON = Новый ЧтениеJSON;
//	ОтветJSON.УстановитьСтроку(лТелоОтвета);
//	
//	лПутьКСкрипту = "http://consquery.ru/getQuery.php?link=";
//	
//	Попытка
//		лДанные = ПрочитатьJSON(ОтветJSON);
//		лДанныеИзОблака = Новый Структура("Статус, Ссылка, ТекстОшибки", лДанные.status, лПутьКСкрипту + лДанные.link, лДанные.errors);
//	Исключение
//		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
//	КонецПопытки; 
//	
//	Возврат лДанныеИзОблака
//	
//КонецФункции // гПолучитьСсылкуНаЗапросВОблаке()

Функция гПолучитьЗапросИзОблака(соединение, идВОблаке, Ссылка, НастройкиПрокси = Неопределено) Экспорт
	
	лСтруктурассылки = СтруктураURI(Ссылка);
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/getQuery.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&idPackage=" + идВОблаке + лСтруктурассылки.ПараметрыСкрипта + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, Данные, ТекстОшибки", лДанные.status, лДанные.data, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гПолучитьЗапросИзОблака()

Функция гУдалитьФайлыСЗапросамиВОблаке(соединение, списокИдВОблаке, НастройкиПрокси = Неопределено) Экспорт
	
	данные = СтрЗаменить(данные, "%", "\u0025");
	данные = СтрЗаменить(данные, "+", "\u002B");
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/delPackages.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&idList=" + списокИдВОблаке + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, Информация, ТекстОшибки", лДанные.status, лДанные.info, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гУдалитьФайлыСЗапросамиВОблаке()

Функция гУдалитьЭлементыПоСпискуВОблаке(соединение, идПакета, списокИдЗапросовВОблаке, списокИдКодаВОблаке, НастройкиПрокси = Неопределено) Экспорт
	
	данные = СтрЗаменить(данные, "%", "\u0025");
	данные = СтрЗаменить(данные, "+", "\u002B");
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/delList.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&idPackage=" + идПакета + "&idListQuerys=" + списокИдЗапросовВОблаке + "&idListCodes=" + списокИдКодаВОблаке + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, Информация, ТекстОшибки", лДанные.status, лДанные.info, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гУдалитьЭлементыПоСпискуВОблаке()

Функция гСохранитьФайлСЗапросомВОблаке(соединение, идВОблаке, имя, обновлятьВсеЗаписи, Знач данные, НастройкиПрокси = Неопределено) Экспорт
	
	данные = СтрЗаменить(данные, "%", "\u0025");
	данные = СтрЗаменить(данные, "+", "\u002B");
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/savePackage.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = 
		"&idConnection=" + соединение + 
		"&idPackage=" + ?(идВОблаке = гИдентификаторНовогоОбъектаВОблаке(), "", идВОблаке)+ 
		"&name=" + имя + 
		"&data=" + данные + 
		"&updateALL=" + ?(обновлятьВсеЗаписи, "1", "0") + 
		"&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, ИдФайлаВОблаке, ТекстОшибки", лДанные.status, лДанные.idPackage, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гСохранитьФайлСЗапросомВОблаке()

Функция гСохранитьЗапросыВОблаке(соединение, идПакета, идРодительскогоЗапроса, ИдЗапроса, имя, включатьПодчиненныеЗапросы, Знач данные, НастройкиПрокси = Неопределено) Экспорт
	
	данные = СтрЗаменить(данные, "%", "\u0025");
	данные = СтрЗаменить(данные, "+", "\u002B");
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/saveQuery.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + 
		"&idPackage=" + идПакета + 
		"&idQuery=" + ?(ИдЗапроса = гИдентификаторНовогоОбъектаВОблаке(), Новый УникальныйИдентификатор, ИдЗапроса) + 
		"&idParentQuery=" + ?(ЗначениеЗаполнено(идРодительскогоЗапроса), идРодительскогоЗапроса, null) + 
		"&saveWithHierarchy=" + ?(ВключатьПодчиненныеЗапросы, "1", "0") + 
		"&data=" + данные + 
		"&V8x=""OK""";

	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, ТекстОшибки", лДанные.status, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гСохранитьЗапросыВОблаке()

Функция гСохранитьКодВОблаке(соединение, идПакета, ИдЗапроса, ИдКода, Имя, текст, НастройкиПрокси = Неопределено) Экспорт
	
	данные = СтрЗаменить(данные, "%", "\u0025");
	данные = СтрЗаменить(данные, "+", "\u002B");
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/saveCode.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + 
		"&idPackage=" + идПакета + 
		"&idQuery=" + ИдЗапроса + 
		"&idCode=" + ?(ИдКода = гИдентификаторНовогоОбъектаВОблаке(), Новый УникальныйИдентификатор, ИдКода) + 
		"&name=" + имя + 
		"&text=" + текст + 
		"&V8x=""OK""";
	
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;                                                                                   
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеИзОблака = Новый Структура("Статус, ТекстОшибки", лДанные.status, лДанные.errors);
	Исключение
		лДанныеИзОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеИзОблака
	
КонецФункции // гСохранитьКодВОблаке()

Функция гПолучитьСписокОбъектовВОблаке(соединение, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/getListObject.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		Если лДанные.Свойство("listPackages") Тогда 
			лДанныеОблака = Новый Структура("Статус, СписокПакетов, ТекстОшибки, НеобходимоПереподключиться, ЭтоСписокПакетов", 
				лДанные.status, лДанные.listPackages, лДанные.errors, лДанные.errСonnect = 1, Истина);
		Иначе
			лДанныеОблака = Новый Структура("Статус, Список, ПутьКРодителю, идПакета, ИмяПакета, ТекстОшибки, НеобходимоПереподключиться, ЭтоСписокПакетов", 
				лДанные.status, лДанные.list, лДанные.path, лДанные.idPackage, лДанные.packageName, лДанные.errors, лДанные.errСonnect = 1, Ложь);
		КонецЕсли;
	Исключение
		лДанныеОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеОблака
	
КонецФункции // гПолучитьСписокОбъектовВОблаке()

Функция гПолучитьСписокФайловВОблаке(соединение, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/getListPackages.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеОблака = Новый Структура("Статус, СписокПакетов, ТекстОшибки, НеобходимоПереподключиться", лДанные.status, лДанные.listPackages, лДанные.errors, лДанные.errСonnect = 1);
	Исключение
		лДанныеОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеОблака
	
КонецФункции // гПолучитьСписокФайловВОблаке()

Функция гПолучитьСписокЗапросовВОблаке(соединение, идПакета, идРодителя, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/getListQuerys.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&idPackage=" + идПакета + "&idParent=" + идРодителя + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		лДанныеОблака = Новый Структура("Статус, Список, ПутьКРодителю, идПакета, ИмяПакета, ТекстОшибки, НеобходимоПереподключиться", лДанные.status, лДанные.list, лДанные.path, лДанные.idPackage, лДанные.packageName, лДанные.errors, лДанные.errСonnect = 1);
	Исключение
		лДанныеОблака =  Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
	Возврат лДанныеОблака
	
КонецФункции // гПолучитьСписокЗапросовВОблаке()

Функция гПолучитьИмяПодключенногоПользователяВОблаке(соединение, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/testConnection.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки", "Сетевая ошибка", "Произошла сетевая ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		Возврат Новый Структура("Статус, ИмяПользователя, ТекстОшибки", лДанные.status, лДанные.user, лДанные.errors);
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
КонецФункции // гПолучитьИмяПодключенногоПользователяВОблаке()

Функция гЗарегистрироватьВОблаке(соединение, email, пароль, УстановкаНовогоПароля = Ложь, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/register.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&email=" + email + "&password=" + пароль + "&resetpassword=" + ?(УстановкаНовогоПароля, 1, 0) + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		Возврат Новый Структура("Статус, Информация, ТекстОшибки", лДанные.status, лДанные.info, лДанные.errors);
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
КонецФункции // гЗарегистрироватьВОблаке()

Функция гПодключитьКОблаку(соединение, email, пароль, тестирование = Ложь, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/login.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&email=" + email + "&password=" + пароль + "&test=" + ?(тестирование, 1, 0) + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		Возврат Новый Структура("Статус, Информация, ТекстОшибки, Соединение", лДанные.status, лДанные.info, лДанные.errors, лДанные.idConnection);
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
КонецФункции // гПодключитьКОблаку()

Функция гОтключитьсяОтОблака(соединение, НастройкиПрокси = Неопределено) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(ПутьКОблаку(), НастройкиПрокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос("/logout.php", ЗаголовкиHTTP);
	лПараметрыЗапроса = "&idConnection=" + соединение + "&V8x=""OK""";
	HTTPЗапрос.УстановитьТелоИзСтроки(лПараметрыЗапроса);
	
	Попытка
		HTTPОтвет =  HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);        	
	Исключение
		Сообщить("Произошла сетевая ошибка! (" + ОписаниеОшибки() + ")");
		ВызватьИсключение;
	КонецПопытки;
	
	лТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ОтветJSON = Новый ЧтениеJSON;
	ОтветJSON.УстановитьСтроку(лТелоОтвета);
	Попытка
		лДанные = ПрочитатьJSON(ОтветJSON);
		Возврат Новый Структура("Статус, Информация, ТекстОшибки", лДанные.status, лДанные.info, лДанные.errors);
	Исключение
		Возврат Новый Структура("Статус, ТекстОшибки", "Ошибка чтения JSON", "Ошибка чтения ответа от сервиса: " + ОписаниеОшибки() + Символы.ПС + "Тело ответа: <" + Лев(лТелоОтвета, 999) +">");
	КонецПопытки; 
	
КонецФункции // гОтключитьсяОтОблака()

//#дубль
Функция гСравнитьВерсии(Знач СтрокаВерсии1, СтрокаВерсии2) Экспорт
	
	Если Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда 
		РежимСовместимости = Строка(Метаданные.РежимСовместимости);
		Возврат -1;
	Иначе
		РежимСовместимости = "";
	КонецЕсли;
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = гРазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение гПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = гРазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение гПодставитьПараметрыВСтроку(
	    	НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	РезультатСравнения = 0;
	Для Разряд = 0 По 3 Цикл
		РезультатСравнения = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если РезультатСравнения <> 0 Тогда
			Возврат РезультатСравнения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатСравнения;
	
КонецФункции

// Формирует список возможных типов конфигурации.
//
// Параметры:
//	СписокДобавленныхТипов - список типов, добавленных "вручную".
//
Функция гСформироватьСписокТипов(МассивТипов, СписокДобавленныхТипов = Неопределено) Экспорт
	
	НеПримитивныеТипы = Новый ТаблицаЗначений;
	НеПримитивныеТипы.Колонки.Добавить("БазовыйТип");
	НеПримитивныеТипы.Колонки.Добавить("Значение");
	Для каждого ТекущийТип Из МассивТипов Цикл
		НоваяСтрока = НеПримитивныеТипы.Добавить();
		НоваяСтрока.Значение = ТекущийТип;
		НоваяСтрока.БазовыйТип = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТекущийТип);
	КонецЦикла; 
	НеПримитивныеТипы.Сортировать("БазовыйТип,Значение");
	
	лКартинкаПримитивныхТипов = БиблиотекаКартинок.Ресурс;
	
	СписокТипов = Новый СписокЗначений;
	//СписокТипов.Добавить("string"       , НСтр("ru = 'Строка'")          ,, лКартинкаПримитивныхТипов);
	//СписокТипов.Добавить("decimal"      , НСтр("ru = 'Число'")           ,, лКартинкаПримитивныхТипов);
	//СписокТипов.Добавить("dateTime"     , НСтр("ru = 'Дата'")            ,, лКартинкаПримитивныхТипов);
	//СписокТипов.Добавить("boolean"      , НСтр("ru = 'Булево'")          ,, лКартинкаПримитивныхТипов);
	//СписокТипов.Добавить("Bound"        , НСтр("ru = 'Граница'")         ,, лКартинкаПримитивныхТипов);
	//СписокТипов.Добавить("PointOfTime"  , НСтр("ru = 'Момент времени'")  ,, лКартинкаПримитивныхТипов);
	//СписокТипов.Добавить("ValueListType", НСтр("ru = 'Список значений'") ,, лКартинкаПримитивныхТипов);
	//СписокТипов.Добавить("ValueTable"   , НСтр("ru = 'Таблица значений'"),, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("Строка"         , НСтр("ru = 'Строка'")          ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("Число"          , НСтр("ru = 'Число'")           ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("Дата"           , НСтр("ru = 'Дата'")            ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("Булево"         , НСтр("ru = 'Булево'")          ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("Граница"        , НСтр("ru = 'Граница'")         ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("МоментВремени"  , НСтр("ru = 'Момент времени'")  ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("СписокЗначений" , НСтр("ru = 'Список значений'") ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("Массив"         , НСтр("ru = 'Массив'")          ,, лКартинкаПримитивныхТипов);
	СписокТипов.Добавить("ТаблицаЗначений", НСтр("ru = 'Таблица значений'"),, лКартинкаПримитивныхТипов);
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	СписокДобавленныхТипов = СписокТипов.Скопировать();
	
	Для каждого Стр Из НеПримитивныеТипы Цикл
		ЗначениеТипа 		= XMLТип(Стр.Значение).ИмяТипа;
		ПредставлениеТипа 	= Строка(Стр.Значение);
		СписокТипов.Добавить(ЗначениеТипа, ПредставлениеТипа,, ПолучитьКартинкуПоМетаданному(Стр.БазовыйТип));
	КонецЦикла;
	
	Возврат СписокТипов;
КонецФункции // гСформироватьСписокТипов()

// глобальная и экспортная, так как может использоваться в произвольном коде
Функция гПолучитьЗначениеСпискаБезУчетаРегистра(ИмяПараметра, СписокПараметров) Экспорт
	Для Каждого ТекСтрока Из СписокПараметров Цикл
		Если НРЕГ(ТекСтрока.Имя) = НРЕГ(ИмяПараметра) тогда
			Возврат ТекСтрока
		Конецесли;
	КонецЦикла; 
	Возврат Неопределено
КонецФункции // ПолучитьЗначениеСпискаБезУчетаРегистра()

Функция гНажатиеНаКнопкуВыборМенюИнформация(ИмяКнопки, ТолькоВернутьКоманду = Ложь) Экспорт
	
	Если ИмяКнопки = "ИнформацияСайтАвтора" Тогда
		ТекстКоманды = "RunDll32.exe url.dll, FileProtocolHandler http://www.lavelin.ru";
	ИначеЕсли ИмяКнопки = "ИнформацияСписокИзменений" Тогда
		ТекстКоманды = "RunDll32.exe url.dll, FileProtocolHandler http://lavelin.ru/changelog.html";
	ИначеЕсли ИмяКнопки = "ИнформацияОтправитьОтзыв" Тогда
		ТекстКоманды = "mailto:1c@lavelin.ru?subject=" + ПреобразоватьВUniCode(гНазваниеОбработки());
	ИначеЕсли ИмяКнопки = "ИнформацияRSS" Тогда
		ТекстКоманды = "RunDll32.exe url.dll, FileProtocolHandler http://lavelin.ru/rss_1c.html";
	ИначеЕсли ИмяКнопки = "ИнформацияДругиеРазработкиАвтора" Тогда
		ТекстКоманды = "RunDll32.exe url.dll, FileProtocolHandler http://lavelin.ru/other_my_programs.html";
	ИначеЕсли ИмяКнопки = "ИнформацияDonate" Тогда
		ТекстКоманды = "RunDll32.exe url.dll, FileProtocolHandler http://lavelin.ru/paid.html";		
	ИначеЕсли ИмяКнопки = "ИнформацияFugueIcons" Тогда
		ТекстКоманды = "RunDll32.exe url.dll, FileProtocolHandler http://p.yusukekamiyamane.com/";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТолькоВернутьКоманду Тогда 
		Возврат ТекстКоманды
	Иначе
		ЗапуститьПриложение(ТекстКоманды)
	КонецЕсли;
	
КонецФункции // гНажатиеНаКнопкуВыборМенюИнформация()

&НаКлиенте
Функция гПолучитьСодержимоеБуфера(Форма = Неопределено) Экспорт 
	
	Если Форма = Неопределено Тогда 
		лhtmlfile = Новый COMОбъект("htmlfile"); лСтрокаБуфера = лhtmlfile.parentWindow.clipboardData.getData("text");
	Иначе
		лНазваниеЭлемента = "ПолеHTMLДокумента321432458767_"; Форма.ЭлементыФормы.Добавить(Тип("ПолеHTMLДокумента"), лНазваниеЭлемента, Ложь); лОкно = Форма.ЭлементыФормы[лНазваниеЭлемента].Документ.parentWindow; 
		лСтрокаБуфера    = лОкно.ClipboardData.GetData("Text"); Форма.ЭлементыФормы.Удалить(Форма.ЭлементыФормы.Индекс(Форма.ЭлементыФормы.Найти(лНазваниеЭлемента))); 
	КонецЕсли;
	
	Возврат лСтрокаБуфера
	
КонецФункции //гПолучитьСодержимоеБуфера

Функция гПреобразоватьВПравильноеНазвание(Знач ИсходноеНазвание, ДополнительныеСимволы = "") Экспорт
	ЗаменительНекорректныхСимволов = "_";
	ДоступныеСимволы = ЗаменительНекорректныхСимволов + "qwertyuiopasdfghjklzxcvbnmйцукенгшщзхъфывапролджэячсмитьбю" + ДополнительныеСимволы;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(1);
	
	ДоступныеНеНачальныеСимволы = "1234567890";
	сч = 0;
	Пока сч <= СтрДлина(ИсходноеНазвание) Цикл
		сч = сч + 1;
		лТекСимвол = Сред(НРег(ИсходноеНазвание), сч, 1);
		Если сч = 1 Тогда 
			Если Найти(ДоступныеСимволы, лТекСимвол) = 0 Тогда
				//ИсходноеНазвание = Сред(ДоступныеСимволы, ГСЧ.СлучайноеЧисло(1, СтрДлина(ДоступныеСимволы)), 1) + Сред(ИсходноеНазвание, 2); 
				ИсходноеНазвание = ЗаменительНекорректныхСимволов + Сред(ИсходноеНазвание, 2); 
				сч = сч - 1;
			Конецесли;
		Иначе
			Если Найти(ДоступныеСимволы + ДоступныеНеНачальныеСимволы, лТекСимвол) = 0 Тогда
				ИсходноеНазвание = СтрЗаменить(ИсходноеНазвание, лТекСимвол, ЗаменительНекорректныхСимволов);
				сч = сч - 1;
			Конецесли;
		Конецесли;
	КонецЦикла;
	
	Возврат ИсходноеНазвание
	
КонецФункции

Функция гЗначениеНеЗаполнено(Значение) Экспорт
	
	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;
	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь; // Булево будем считать не пустым
		
		//Отдельное определение, так как конструкторов данного типа не существует	
	ИначеЕсли ТипЗначения = Тип("РежимПроведенияДокумента") Тогда
		Если Значение = РежимПроведенияДокумента.Неоперативный или Значение = РежимПроведенияДокумента.Оперативный тогда
			Результат = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Клавиша") Тогда
		Если СокрЛП(Значение) = "" тогда
			Результат = Ложь;
		КонецЕсли;
		
		// Для остальных будем считать значение пустым, если оно равно
		// дефолтному значению своего типа
	Иначе
		Если Значение = Новый(ТипЗначения) Тогда
			Результат = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // гЗначениеНеЗаполнено()

// Возвращает строковое представление типа. 
// Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "ДокументСсылка.ИмяОбъекта"
// Для остальных типов приводит тип к строке, например "Число".
//
Функция гСтроковоеПредставлениеТипа(Тип) Экспорт
	
	Представление = "";
	
	Если Тип <> ТипЗнч(Неопределено) И ЭтоСсылка(Тип) Тогда
		
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта = СтрокаВМассив(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
			
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
			
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
			
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
			
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
			
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
			
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
			
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
			
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
			
		КонецЕсли;
		
		Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
		
	Иначе
		
		Результат = Строка(Тип);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  гРазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  гРазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  гРазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  гРазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  гРазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  гРазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция гРазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция гПолучитьЗапросИзТекста(Код1С, ПростаяОбработкаТекста) Экспорт

	лПараметрыЗапроса = Новый Соответствие;
	лТекстЗапроса     = Код1С;
	Если Не ПростаяОбработкаТекста И гИнициализацияVBScript() Тогда
		//\t	 - символ табуляции
		//\n	 - новая строка
		//\r	 - перевод каретки
		RegExp.Pattern = "(^|\s+|\t+|""|\|)[Вв]+[Ыы]+[Бб]+[Рр]+[Аа]+[Тт]+[ь]+[\s\S\t\n\r]*"";";
		Массив = RegExp.Execute(лТекстЗапроса);
				
		Если Массив.Count > 0 Тогда
			лТекстЗапроса = СокрЛП(Массив.Item(Массив.Count - 1).Value);
			лТекстЗапроса = СтрЗаменить(лТекстЗапроса,Символ(13) + Символ(10),Символы.ПС);

			//Заполнение параметров
			RegExp.Pattern = "[Уу]+[Сс]+[Тт]+[Аа]+[Нн]+[Оо]+[Вв]+[Ии]+[Тт]+[Ьь]+[Пп]+[Аа]+[Рр]+[Аа]+[Мм]+[Ее]+[Тт]+[Рр]+\(([^\n]*)\);";
			Массив = RegExp.Execute(Код1С);
			Если Массив.Count > 0 Тогда
				Для i = 0 по Массив.Count - 1 Цикл
					лВремСтрока = СокрЛП(Массив.Item(i).Value);
					RegExp.Pattern = "\((.*)\)";
					МассивПараметров = RegExp.Execute(лВремСтрока);
					Если МассивПараметров.Count > 0 Тогда
						лВремСтрока = СокрЛП(МассивПараметров.Item(МассивПараметров.Count - 1).Value);						
						лВремСтрока = Сред(лВремСтрока,2,СтрДлина(лВремСтрока) - 2); //Убираем первую и последнюю скобки
						RegExp.Pattern = "([^,\s\t]+[^,]*)";
						МассивПараметров = RegExp.Execute(лВремСтрока);
						Если МассивПараметров.Count = 2 Тогда 
							лПараметрыЗапроса.Вставить(Вычислить(СокрЛП(МассивПараметров.Item(МассивПараметров.Count - 1).Value)), Вычислить(СокрЛП(МассивПараметров.Item(1).Value)));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// предварительная обработка кода 1с с запросом
	лТекстЗапроса = СтрЗаменить(лТекстЗапроса, "|", "");
	лТекстЗапроса = СтрЗаменить(лТекстЗапроса, """;", "");
	лТекстЗапроса = СтрЗаменить(лТекстЗапроса, Символ(34) + Символ(34), "_БывшаяДвойнаяКавычка_"); 
	лТекстЗапроса = СтрЗаменить(лТекстЗапроса, Символ(34), ""); 
	лТекстЗапроса = СтрЗаменить(лТекстЗапроса, "_БывшаяДвойнаяКавычка_", Символ(34)); 
	
	Возврат Новый Структура("Текст, Параметры", лТекстЗапроса, лПараметрыЗапроса);

КонецФункции // гПолучитьЗапросИзТекста()


/////////////////////////////////////////
// ДобавлениеРеквизитовНаФорму

&НаСервере
Функция гПолучитьМассивРеквизитовДляДобавленияТаблицыНаФорму(УникальныйИдентификаторФормы, АдресРезультата, АдресСпискаСпецПолей) Экспорт
	
	СвойстваРеквизитаТаблицаРезультата = гПолучитьСвойстваРеквизитаТаблицаРезультата();
	ИмяРеквизитаФормыТаблицаРезультата = СвойстваРеквизитаТаблицаРезультата.ИмяРеквизита;
	
	// создадим реквизит формы для таблицы
	ТипРеквизитаРезультатаЗапроса = Новый Массив;
	ТипРеквизитаРезультатаЗапроса.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипРеквизитаРезультатаЗапроса = Новый ОписаниеТипов(ТипРеквизитаРезультатаЗапроса);
	
	// Удаляем реквизит формы, связанный с таблицей значений
	МассивРеквизитовУдаления = Новый Массив;
	МассивРеквизитовУдаления.Добавить(ИмяРеквизитаФормыТаблицаРезультата);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаФормыТаблицаРезультата, ОписаниеТипРеквизитаРезультатаЗапроса, "", СвойстваРеквизитаТаблицаРезультата.ЗаголовокРеквизита));
	
	// формируем колонки реквизита с таблицей по источнику данных
	
	// +++ для полей сложных типов(ТаблицаЗначений, Хранилище ...) формируем коллекцию спец полей
	СписокТиповСпецПолей = Новый Массив;
	СписокТиповСпецПолей.Добавить(Тип("ТаблицаЗначений"));
	СписокТиповСпецПолей.Добавить(Тип("ХранилищеЗначения"));
	СписокТиповСпецПолей.Добавить(Тип("Тип"));
	СписокТиповСпецПолей.Добавить(Тип("ДвоичныеДанные"));
	
	Если ЗначениеЗаполнено(АдресСпискаСпецПолей) Тогда 
		лСпецПоля = ПолучитьИзВременногоХранилища(АдресСпискаСпецПолей);
		УдалитьИзВременногоХранилища(АдресСпискаСпецПолей);
		АдресСпискаСпецПолей = Неопределено;
	Иначе
		лСпецПоля = Новый Структура();
	КонецЕсли;
	
	// --- для полей сложных типов(ТаблицаЗначений, Хранилище ...) формируем коллекцию спец полей
	ИсточникДанныхТЗ  = ПолучитьИзВременногоХранилища(АдресРезультата);
	КоличествоКолонок = ИсточникДанныхТЗ.Колонки.Количество();
	
	Сч = 0;
	Пока Сч < КоличествоКолонок Цикл
		
		Колонка            = ИсточникДанныхТЗ.Колонки[Сч];
		ИмяРеквизита       = Колонка.Имя;		
		ТипыТекущейКолонки = Колонка.ТипЗначения.Типы();
		
		ТипСпецПоля = "";
		Для каждого текТипСпецПоля Из СписокТиповСпецПолей Цикл
			Если ТипыТекущейКолонки.Найти(текТипСпецПоля) <> Неопределено Тогда 
				ТипСпецПоля = ТипСпецПоля + ?(ТипСпецПоля = "", "", ";") + Строка(текТипСпецПоля);
			КонецЕсли;
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТипСпецПоля) Тогда
			
			лСпецПоля.Вставить(ИмяРеквизита, ТипСпецПоля);
			
			ИмяРеквизита = гПрефиксСпецПоля() + ИмяРеквизита;
			
			ИсточникДанныхТЗ.Колонки.Вставить(Сч, ИмяРеквизита, Новый ОписаниеТипов("Строка"), Колонка.Заголовок);
			ИсточникДанныхТЗ.ЗаполнитьЗначения(ТипСпецПоля, ИмяРеквизита);
			Сч = Сч + 1;
			КоличествоКолонок = КоличествоКолонок + 1;
			
			ИтоговыйТипЗначения = Новый ОписаниеТипов("Строка");
			
			
		Иначе
			Если ТипыТекущейКолонки.Найти(Тип("Null")) <> Неопределено Тогда 
				ИтоговыйТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,,"Null");
			Иначе
				ИтоговыйТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения);
			КонецЕсли;
		КонецЕсли;		
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ИтоговыйТипЗначения, ИмяРеквизитаФормыТаблицаРезультата));
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Результат = Новый Структура("МассивРеквизитов, МассивРеквизитовУдаления");
	Результат.МассивРеквизитов         = МассивРеквизитов;
	Результат.МассивРеквизитовУдаления = МассивРеквизитовУдаления;
	
	АдресСпискаСпецПолей = ПоместитьВоВременноеХранилище(лСпецПоля, УникальныйИдентификаторФормы);
	ПоместитьВоВременноеХранилище(ИсточникДанныхТЗ, АдресРезультата);
	
	Возврат Результат
	
КонецФункции // гПолучитьМассивРеквизитовДляДобавленияТаблицыНаФорму

Процедура гВывестиТаблицуНаФорму(Элементы, АдресРезультата, АдресСпискаСпецПолей, УсловноеОформление) Экспорт

	СвойстваРеквизитаТаблицаРезультата = гПолучитьСвойстваРеквизитаТаблицаРезультата();
	ИмяРеквизитаФормыТаблицаРезультата = СвойстваРеквизитаТаблицаРезультата.ИмяРеквизита;
	ПрефиксДляПолейТаблицРезультата    = СвойстваРеквизитаТаблицаРезультата.ПрефиксДляПолей;
	
	ИсточникДанныхТЗ = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	//+++ добавляем элемент таблица на форму
	ЭлементформыТЗ = Элементы.Найти(ИмяРеквизитаФормыТаблицаРезультата);
	Если ЭлементформыТЗ = Неопределено Тогда 
		ЭлементформыТЗ = Элементы.Добавить(ИмяРеквизитаФормыТаблицаРезультата, Тип("ТаблицаФормы"), Элементы.Найти(СвойстваРеквизитаТаблицаРезультата.ИмяЭлементаРодителя));
		ЭлементформыТЗ.ПутьКДанным = ИмяРеквизитаФормыТаблицаРезультата;
		ЭлементформыТЗ.Отображение = ОтображениеТаблицы.Список;
		
		//устанавливаем обработчики таблицы
		СписокОбработчиковТЗ = Новый СписокЗначений;
		СписокОбработчиковТЗ.Добавить("Выбор"                , "ТаблицаРезультатаВыборЗначения");
		СписокОбработчиковТЗ.Добавить("ПередНачаломИзменения", "ТаблицаРезультатаПередНачаломИзменения");
		СписокОбработчиковТЗ.Добавить("ПриИзменении"         , "ТаблицаРезультатаПриИзменении");
		
		Для каждого ОбработчикТЗ Из СписокОбработчиковТЗ Цикл
			ЭлементформыТЗ.УстановитьДействие(ОбработчикТЗ.Значение, ОбработчикТЗ.Представление);
		КонецЦикла; 
		
	Иначе
		Пока ЭлементформыТЗ.ПодчиненныеЭлементы.Количество() > 0 Цикл 
			Элементы.Удалить(ЭлементформыТЗ.ПодчиненныеЭлементы[0]);
		КонецЦикла;
	КонецЕсли;
	//--- добавляем элемент таблица на форму
	
	//+++ формируем внешний вид элемента формы с таблицей значений
	лСпецПоля = ПолучитьИзВременногоХранилища(АдресСпискаСпецПолей);
	Для каждого Колонка Из ИсточникДанныхТЗ.Колонки Цикл
		Если лСпецПоля.Свойство(Колонка.Имя) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяКолонка = Элементы.Добавить(ИмяРеквизитаФормыТаблицаРезультата + ПрефиксДляПолейТаблицРезультата + Колонка.Имя, Тип("ПолеФормы"), ЭлементформыТЗ);
		НоваяКолонка.Вид               = ВидПоляФормы.ПолеВвода;
		НоваяКолонка.ПутьКДанным       = ИмяРеквизитаФормыТаблицаРезультата + "." + Колонка.Имя;
		НоваяКолонка.Заголовок         = Колонка.Заголовок;
		НоваяКолонка.Ширина            = СвойстваРеквизитаТаблицаРезультата.ШиринаКолонкиПоУмолчанию;
		Если Найти(Колонка.Имя, гПрефиксСпецПоля()) = 1 Тогда
			НоваяКолонка.ГиперссылкаЯчейки = Истина;
			НоваяКолонка.ТолькоПросмотр    = Истина;
		КонецЕсли;
	КонецЦикла;
	//--- формируем внешний вид элемента формы с таблицей значений
	
	// +++ добавляем оформление для спец полей
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;	
	
	ОформлениеУО      = ЭлементУсловногоОформления.Оформление;
	ОтборУО           = ЭлементУсловногоОформления.Отбор;
	ОформляемыеПоляУО = ЭлементУсловногоОформления.Поля;
	
	ОформлениеУО.УстановитьЗначениеПараметра("ЦветТекста", ЦветСсылкиСпецПоля());
	
	Для каждого СпецПоле Из лСпецПоля Цикл
		
		ОформляемоеПоле = ОформляемыеПоляУО.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаФормыТаблицаРезультата + гПрефиксСпецПоля() + СпецПоле.Ключ);	
		
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = ОформляемоеПоле.Поле;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование  = Истина;
		
	КонецЦикла; 
	// --- добавляем оформление для спец полей

КонецПроцедуры // гВывестиТаблицуНаФорму()


/////////////////////////////////////////
// Константы

Функция гИдентификаторНовогоОбъектаВОблаке() Экспорт
	Возврат "_new_";
КонецФункции // гСтруктураНастроекПрокси()

Функция гСтруктураНастроекПрокси() Экспорт
	Возврат Новый Структура("Использовать, ИспользоватьАутентификациюОС, Протокол, Сервер, Порт, Пользователь, Пароль", Ложь, Истина);
КонецФункции // гСтруктураНастроекПрокси()
 
Функция ПутьКОблаку()
	Возврат "consquery.ru";
КонецФункции // ПутьКОблаку()

Функция ПолучитьHTTPСоединение(Сервер, НастройкиПрокси)

	Попытка
		Если ЗначениеЗаполнено(НастройкиПрокси) И НастройкиПрокси.Использовать Тогда 
			лПроксиСервер = Новый ИнтернетПрокси;
			лПроксиСервер.Установить(НастройкиПрокси.Протокол, 
				НастройкиПрокси.Сервер, 
				НастройкиПрокси.Порт, 
				?(НастройкиПрокси.ИспользоватьАутентификациюОС, Неопределено, НастройкиПрокси.Пользователь), 
				?(НастройкиПрокси.ИспользоватьАутентификациюОС, Неопределено, НастройкиПрокси.Пароль), 
				НастройкиПрокси.ИспользоватьАутентификациюОС);
			лСоединение = Новый HTTPСоединение(Сервер,,,, лПроксиСервер);
		Иначе
			лСоединение = Новый HTTPСоединение(Сервер);
		КонецЕсли;
		лСоединение = Новый HTTPСоединение(Сервер);
	Исключение
		ВызватьИсключение(ОписаниеОшибки() + Символы.ПС + "Попробуйте использовать/изменить настройки прокси.");
		//"Ошибка работы с Интернет:   Не могу установить соединение"
		Сообщить(, СтатусСообщения.Важное);
	КонецПопытки; 
	
	Возврат лСоединение;

КонецФункции // ПолучитьHTTPСоединение()
 
//#рефакторинг - актуализировать список операций
Функция гОперацииСЗапросами() Экспорт
	// при добавлении операции необходимо актуализировать функцию ПолучитьРежимДиалогаПоОперацииРаботыСФайлами()
	лСтруктура = Новый Структура;
	лСтруктура.Вставить("Открыть"                  , "Открыть файл с запросами");
	лСтруктура.Вставить("ЗагрузитьИзСтарогоФормата", "ЗагрузитьИзСтарогоФормата");
	лСтруктура.Вставить("Новый"                    , "Новый файл с запросами");
	лСтруктура.Вставить("Сохранить"                , "Сохранить запросы в файл");
	лСтруктура.Вставить("СохранитьКАК"             , "Сохранить как...");
	лСтруктура.Вставить("СохранитьНаFTP"           , "Сохранить на FTP");
	лСтруктура.Вставить("ЗагрузитьСFTP"            , "Загрузить с FTP");
	лСтруктура.Вставить("ПолучитьСсылку"           , "Получить Ссылку");
	лСтруктура.Вставить("ВыгрузитьВОблако"         , "Выгрузить");
	лСтруктура.Вставить("ЗагрузитьИзОблака"        , "Загрузить");
	
	Возврат лСтруктура;

КонецФункции // гОперацииСЗапросами()

Функция гТипыИсточниковДанных() Экспорт
	Возврат Новый Структура("Пакет, Запрос, Код", "Пакет", "Запрос", "Код");
КонецФункции

Функция гРежимыФормированияКодаИзТекстаЗапроса() Экспорт
	Возврат Новый Структура("Выборка, ТЗ, ОбработкаРезультата", "Выборка", "ТЗ", "ОбработкаРезультата");
КонецФункции // гРежимыФормированияКодаИзТекстаЗапроса()
 
Функция гРежимыПолученияЗапросаИзКода() Экспорт
	Возврат Новый Структура("СОбработкой, БезОбработки", "СОбработкой", "БезОбработки");
КонецФункции // гРежимыПолученияЗапросаИзКода()
 
Функция гТипыЗначенийПараметров() Экспорт
	Возврат Новый Структура("Значение, Список, ТаблицаЗначений",1,2,3)
КонецФункции // ТипыЗначенийПараметров()

Функция гТипыПредустановленногоКода() Экспорт
	Возврат Новый Структура("ВставитьЦикл,РедактироватьРегистрСведений,РедактироватьДокументы", "ВставитьЦикл", "РедактироватьРегистрСведений", "РедактироватьДокументы");
КонецФункции

Функция гНазваниеОбработки(ВернутьПолноеНазвание = Истина) Экспорт
	
	лКраткоеНазвание = "Консоль запросов";
	
	Если ВернутьПолноеНазвание Тогда 
		Возврат лКраткоеНазвание + " " + ВерсияОбработки();
	Иначе
		Возврат лКраткоеНазвание;
	Конецесли;
	
КонецФункции // гНазваниеОбработки()

Функция гПараметрыСпецСтрокиДереваЗапросов() Экспорт
	Возврат Новый Структура("Параметр, Значение", "СлужебнаяСтрокаДереваЗапросов", "СлужебнаяСтрокаДереваЗапросов!№;%:?*()_+/\=-0987654321ё");
КонецФункции

Функция гРасширениеФайлаДаныхДляОтладки() Экспорт
	Возврат "debug_data";
КонецФункции

Функция гРежимыОткрытияФормы() Экспорт

	Возврат Новый Структура("Расшифровка", "Расшифровка");

КонецФункции // гРежимыОткрытияФормы()

Функция гРежимыЗакрытияФормыВводаПроизвольногоКода() Экспорт

	Возврат Новый Структура("Выполнить, Сохранить, Отменить", "Выполнить", "Сохранить", "Отменить");

КонецФункции // гРежимыЗакрытияФормыВводаПроизвольногоКода()

Функция гПрефиксСпецПоля() Экспорт
	Возврат "_СпецПоле_"
КонецФункции

Функция гПолучитьСвойстваРеквизитаТаблицаРезультата() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("ИмяЭлементаРодителя"     , "ГруппаРезультатЗапроса");
	Свойства.Вставить("ИмяРеквизита"            , "РезультатЗапроса"); // название должно совпадать с реквизитом обычной формы!!!
	Свойства.Вставить("ПрефиксДляПолей"         , "_");
	Свойства.Вставить("ЗаголовокРеквизита"      , "Результат");
	Свойства.Вставить("ШиринаКолонкиПоУмолчанию", 10);
	
	Возврат Свойства

КонецФункции // гПолучитьСвойстваРеквизитаТаблицаРезультата()

//Функция гМинимальныйРелизПлатформы() Экспорт
//	// критический 8.3.6.1977 - ЧтениеJSON
//	Возврат "8.3.6.1977"
//КонецФункции

Функция ЦветСсылкиСпецПоля()

	Возврат Новый Цвет(0,0,255);

КонецФункции

/////////////////////////////////////////
// ОтладкаНаСервере

// отладка для управляемых форм
Функция ВыгрузитьДанныеДляОтладки(Запрос) Экспорт
	
	ДанныеДляОтладки = Новый Структура;
	ДанныеДляОтладки.Вставить("ТекстЗапроса"    , Запрос.Текст);
	ДанныеДляОтладки.Вставить("ПараметрыЗапроса", Запрос.Параметры);
	ДанныеДляОтладки.Вставить("ПараметрыИБ"     , СтрокаСоединенияИнформационнойБазы());
	
	ИмяФайла = ПолучитьИмяВременногоФайла(гРасширениеФайлаДаныхДляОтладки());
	
	Попытка
		
		ЗначениеВФайл(ИмяФайла, ДанныеДляОтладки);
		
		ДанныеПоПодключению = гРазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(), """");
		Если ДанныеПоПодключению[0] = "Srvr=" Тогда 
			ИмяСервера = ДанныеПоПодключению[1]; 
			ИмяСервера = Сред(ИмяСервера, 0, Найти(ИмяСервера, ":") - 1);
		Иначе
			ИмяСервера = Неопределено 
		КонецЕсли;
		
		Возврат "Данные для отладки выгружены в файл: """ + ИмяФайла + ?(ИмяСервера = Неопределено, "", """ ( на сервере """ + ИмяСервера + """ )");
		
	Исключение
		Возврат "Ошибка выгрузки данных: " + ОписаниеОшибки();
	КонецПопытки; 

КонецФункции // ВыгрузитьДанныеДляОтладки() 

// отладка для обычных форм
Функция гОткрытьФормуДляОтладки(Запрос) Экспорт
	
	ФормаДляОтладки = ПолучитьФорму("Форма");
	ФормаДляОтладки.ЗапросДляОтладки = Запрос;
	ФормаДляОтладки.Открыть();
	
	Возврат "Запрос в режиме отладки выполнен."
	
КонецФункции // гОткрытьФормуДляОтладки(Запрос)

/////////////////////////////////////////
// КонтекстнаяПодсказка

Функция гПолучитьСтруктуруТекстаДоИПослеКурсора(ПолеФормыСТекстом, СтруктураКоординат)Экспорт
	
	Результат = Новый Структура;
	
	//в структуре координат находятся текущие параметры выделения области текста
	//необходимо вернуть текст до позиции курсора и текст после позиции курсора
	//для этого выделяем область до позиции курсора , копируем ее , выделяем область после позиции курсора и копируем ее
	ПолеФормыСТекстом.УстановитьГраницыВыделения(1, 1, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Результат.Вставить("ТекстДо",ПолеФормыСТекстом.ВыделенныйТекст);
	
	ПолеФормыСТекстом.УстановитьГраницыВыделения(СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон, ПолеФормыСТекстом.КоличествоСтрок(),
		Макс(СтруктураКоординат.КолонкаКон, СтрДлина(ПолеФормыСТекстом.ПолучитьСтроку(ПолеФормыСТекстом.КоличествоСтрок()) + 1)));
	
	Результат.Вставить("ТекстПосле", ПолеФормыСТекстом.ВыделенныйТекст);
	
	ПолеФормыСТекстом.УстановитьГраницыВыделения(СтруктураКоординат.СтрокаНач, СтруктураКоординат.КолонкаКон, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Возврат Результат
	
КонецФункции // гПолучитьСтруктуруТекстаДоИПослеКурсора()

//ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция гИнициализацияVBScript() Экспорт
	
	Если RegExp <> Неопределено Тогда 
		RegExp.Multiline  = True;
		RegExp.Global     = True;
		RegExp.IgnoreCase = True;
		RegExp.Pattern    = "";
		Возврат Истина
	КонецЕсли;
	
	Попытка
		RegExp = Новый COMОбъект("VBScript.RegExp");
	Исключение
		RegExp = Неопределено;
		Сообщить("Ошибка инициализации VBScript.RegExp.", СтатусСообщения.Важное);
		Возврат False;
	КонецПопытки;
	
	RegExp.Multiline  = True;
	RegExp.Global     = True;
	RegExp.IgnoreCase = True;
	
	Возврат True;
	
КонецФункции // ИнициализацияVBScript

// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция гПолучитьГраницыВыделенияПоляФормы(ПолеФормы) Экспорт
	
	СтрокаНач	= 1;
	КолонкаНач	= 1;              
	СтрокаКон   = 1;
	КолонкаКон	= 1;
	ПолеФормы.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Возврат Новый Структура("СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон", СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон)
	
КонецФункции // гПолучитьГраницыВыделенияПоляФормы()

Функция гПродолжитьФормироватьКП(Режим, ВыбранноеЗначение) Экспорт
	
	Если Режим = гРежимыКонтекстнойПодсказки().Метаданные И НРег(ВыбранноеЗначение) = "константы" Тогда 
		Возврат Ложь
	КонецЕсли;
	
	лСписокРежимов = Новый Массив;
	лСписокРежимов.Добавить(гРежимыКонтекстнойПодсказки().Начало);
	лСписокРежимов.Добавить(гРежимыКонтекстнойПодсказки().Метаданные);

	Возврат лСписокРежимов.Найти(Режим) <> Неопределено

КонецФункции // гПродолжитьФормироватьКП()

Функция гПолучитьДанныеДляПодбораКП(ТекстЗапроса, ПозицияКурсора) Экспорт
	
	Если Не гИнициализацияVBScript() тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	// определяем режим контекстной подсказки
	лТекстЗапросаДоКурсора    = Лев(ТекстЗапроса, ПозицияКурсора);
	лТекстЗапросаПослеКурсора = Сред(ТекстЗапроса, ПозицияКурсора + 1);
	лСловоДоКурсора           = ПолучитьПоследнееСлово(лТекстЗапросаДоКурсора);
	лСловоПослеКурсора        = ПолучитьПервоеСлово(лТекстЗапросаПослеКурсора);
	лФильтр                   = лСловоДоКурсора;// + ?(СокрЛП(лСловоДоКурсора) = "", "", лСловоПослеКурсора); !!!???
	лСтрокаСоЗначениямиКП     = "";
	лМножественныйВыбор       = Ложь;
	лИмяКоллекции             = Неопределено;
	лИмяТаблицы               = Неопределено;
	
	лРежимКП = ПолучитьРежимКонтекстнойПодсказки(лТекстЗапросаДоКурсора, лТекстЗапросаПослеКурсора);
	
	Если лРежимКП = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначенияДляВыбора = Новый СписокЗначений;
	
	Если лРежимКП.Режим = гРежимыКонтекстнойПодсказки().Параметры тогда
	ИначеЕсли лРежимКП.Режим = гРежимыКонтекстнойПодсказки().Метаданные тогда
		
		лСписокМетаданных = ПолучитьСписокМетаданных();
		Для каждого лМетаданное Из лСписокМетаданных Цикл
			лСтрокаСоЗначениямиКП = лСтрокаСоЗначениямиКП + ?(лСтрокаСоЗначениямиКП = "", "", Символы.ПС) + лМетаданное.Значение
		КонецЦикла; 
		
		лМассив    = ПолучитьСтрокиПоФильтру(лСтрокаСоЗначениямиКП, лФильтр);
		лОкончание = ".";
		
		лИсключения = Новый Массив();
		лИсключения.Добавить("Константы");
		
		Для i = 0 по лМассив.Count-1 Цикл
			лМетаданное = лСписокМетаданных.НайтиПоЗначению(СокрЛП(лМассив.Item(i).Value));
			ЗначенияДляВыбора.Добавить(лМетаданное.Значение + ?(лИсключения.Найти(лМетаданное.Значение) = Неопределено, лОкончание, ""), лМетаданное.Значение, Ложь, лМетаданное.Картинка);
		КонецЦикла;
		
	ИначеЕсли лРежимКП.Режим = гРежимыКонтекстнойПодсказки().Таблицы тогда
		
		RegExp.Pattern    = "[\?a-zA-Zа-яА-я_]+\.[\?a-zA-Zа-яА-я_]*$";
		лМассив           = RegExp.Execute(лТекстЗапросаДоКурсора);
		лРезультатРазбора = лМассив.Item(0).Value;
		лМетаданное       = ПолучитьСписокМетаданных().НайтиПоЗначению(Лев(лРезультатРазбора, Найти(лРезультатРазбора, ".") - 1));
		
		Если лМетаданное = Неопределено Тогда 
			Возврат Неопределено
		КонецЕсли;
		
		лИмяМетаданного = лМетаданное.Представление;
		лКартинка       = ПолучитьКартинкуПоМетаданному(лИмяМетаданного);
		лМетаданные     = Вычислить("Метаданные[""" + лИмяМетаданного + """]");
		
		лСписокМетаданных = Новый СписокЗначений;
		Для Каждого лМетаданное из лМетаданные Цикл
			лСписокМетаданных.Добавить(лМетаданное.Имя, лМетаданное.Имя,,лКартинка);
			лСтрокаСоЗначениямиКП = лСтрокаСоЗначениямиКП + ?(лСтрокаСоЗначениямиКП = "", "", Символы.ПС) + лМетаданное.Имя;
		КонецЦикла;
		
		Если лСписокМетаданных.Количество() > 0 Тогда 
			лМассив    = ПолучитьСтрокиПоФильтру(лСтрокаСоЗначениямиКП, лФильтр);
			лОкончание = "";
			
			Для i = 0 по лМассив.Count-1 Цикл
				лМетаданное = лСписокМетаданных.НайтиПоЗначению(СокрЛП(лМассив.Item(i).Value));
				ЗначенияДляВыбора.Добавить(лМетаданное.Значение + лОкончание, лМетаданное.Представление, Ложь, лМетаданное.Картинка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли лРежимКП.Режим = гРежимыКонтекстнойПодсказки().ПодТаблицы тогда
		
		RegExp.Pattern    = "[\?a-zA-Zа-яА-я_]+\.[\?a-zA-Zа-яА-я_]+\.[\?a-zA-Zа-яА-я_]*$";
		лМассив           = RegExp.Execute(лТекстЗапросаДоКурсора);
		лРезультатРазбора = лМассив.Item(0).Value;
		лМетаданное       = ПолучитьСписокМетаданных().НайтиПоЗначению(Лев(лРезультатРазбора, Найти(лРезультатРазбора, ".") - 1));
		Если лМетаданное = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		лИмяМетаданного = лМетаданное.Представление;
		лИмяТаблицы     = Лев(Сред(лРезультатРазбора, СтрДлина(лИмяМетаданного) + 1), Найти(Сред(лРезультатРазбора, СтрДлина(лИмяМетаданного) + 1), ".") - 1);
		
		лСписокКоллекцийОбъектаМетаданных = ПолучитьСписокКоллекцийОбъектаМетаданных(лИмяМетаданного, лИмяТаблицы);
		
		Для Каждого лМетаданное из лСписокКоллекцийОбъектаМетаданных Цикл
			лСтрокаСоЗначениямиКП = лСтрокаСоЗначениямиКП + ?(лСтрокаСоЗначениямиКП = "", "", Символы.ПС) + лМетаданное.Значение;
		КонецЦикла;
		
		Если лСтрокаСоЗначениямиКП = "" Тогда 
			Возврат Неопределено
		КонецЕсли;
		
		лМассив    = ПолучитьСтрокиПоФильтру(лСтрокаСоЗначениямиКП, лФильтр);
		лОкончание = ?(СокрЛП(лСловоПослеКурсора) <> "", " ", "");
		
		Для i = 0 по лМассив.Count-1 Цикл
			лКоллекция = лСписокКоллекцийОбъектаМетаданных.НайтиПоЗначению(СокрЛП(лМассив.Item(i).Value));
			ЗначенияДляВыбора.Добавить(лКоллекция.Значение + лОкончание, лКоллекция.Представление, Ложь, лКоллекция.Картинка);
		КонецЦикла;
		
	ИначеЕсли лРежимКП.Режим = гРежимыКонтекстнойПодсказки().Поля тогда
		
		RegExp.Pattern = "[a-zA-Zа-яА-я_]+[0-9a-zA-Zа-яА-я_]*(\.[a-zA-Zа-яА-я_]+[0-9a-zA-Zа-яА-я_]*){1,3}";
		Если RegExp.Test(лТекстЗапросаПослеКурсора) Тогда 
			Массив = RegExp.Execute(лТекстЗапросаПослеКурсора);
			лИсходныйПутьКМетаданному = Массив.Item(0).Value;
			лМетаданное = ПолучитьСписокМетаданных().НайтиПоЗначению(Лев(лИсходныйПутьКМетаданному, Найти(лИсходныйПутьКМетаданному, ".") - 1));
			Если лМетаданное = Неопределено Тогда 
				Возврат Неопределено
			КонецЕсли;
			лИмяМетаданного = лМетаданное.Представление;
			лОстатокОтИмени = Сред(лИсходныйПутьКМетаданному, СтрДлина(Лев(лИсходныйПутьКМетаданному, Найти(лИсходныйПутьКМетаданному, ".") - 1)) + 2);
			лПозицияТочки = Найти(лОстатокОтИмени, ".");
			Если лПозицияТочки = 0 Тогда 
				лИмяТаблицы = лОстатокОтИмени;
			Иначе
				лИмяТаблицы = Лев(лОстатокОтИмени, лПозицияТочки - 1);
				лИмяКоллекции = Прав(лОстатокОтИмени, СтрДлина(лОстатокОтИмени) - лПозицияТочки);
			КонецЕсли;
		Иначе
			RegExp.Pattern = "[\?a-zA-Zа-яА-я_]*$";
			Массив         = RegExp.Execute(лТекстЗапросаПослеКурсора);
			лМетаданное    = ПолучитьСписокМетаданных().НайтиПоЗначению(Массив.Item(0).Value);
			Если лМетаданное = Неопределено Тогда 
				Возврат Неопределено
			КонецЕсли;
			лИмяМетаданного = лМетаданное.Представление;
		КонецЕсли;
		
		лПоляОбъектовМеталданных = ПолучитьПоляОбъектовМетаданных(лИмяМетаданного, лИмяТаблицы, лИмяКоллекции);
		
		Если лПоляОбъектовМеталданных = Неопределено Тогда 
			Возврат Неопределено
		КонецЕсли;
		
		Для Каждого лПоле из лПоляОбъектовМеталданных Цикл
			лСтрокаСоЗначениямиКП = лСтрокаСоЗначениямиКП + ?(лСтрокаСоЗначениямиКП = "", "", Символы.ПС) + лПоле.Значение;
		КонецЦикла;
		
		Если лСтрокаСоЗначениямиКП = "" Тогда 
			Возврат Неопределено
		КонецЕсли;
		
		лМассив    = ПолучитьСтрокиПоФильтру(лСтрокаСоЗначениямиКП, лФильтр);
		лОкончание = ?(СокрЛП(лСловоПослеКурсора) <> "", " ", "");
		
		Для i = 0 по лМассив.Count-1 Цикл
			лКоллекция = лПоляОбъектовМеталданных.НайтиПоЗначению(СокрЛП(лМассив.Item(i).Value));
			ЗначенияДляВыбора.Добавить(лКоллекция.Значение + лОкончание, лКоллекция.Представление, Ложь, лКоллекция.Картинка);
		КонецЦикла;
		
		лМножественныйВыбор = Истина;
		
	ИначеЕсли лРежимКП.Режим = гРежимыКонтекстнойПодсказки().Условия тогда
		
		
		RegExp.Pattern = "[a-zA-Zа-яА-я_]+[0-9a-zA-Zа-яА-я_]*(\.[a-zA-Zа-яА-я_]+[0-9a-zA-Zа-яА-я_]*){1,3}";
		Если RegExp.Test(лРежимКП.Текст) Тогда 
			Массив = RegExp.Execute(лРежимКП.Текст);
			лИсходныйПутьКМетаданному = Массив.Item(0).Value;
			лМетаданное = ПолучитьСписокМетаданных().НайтиПоЗначению(Лев(лИсходныйПутьКМетаданному, Найти(лИсходныйПутьКМетаданному, ".") - 1));
			Если лМетаданное = Неопределено Тогда 
				Возврат Неопределено
			КонецЕсли;
			лИмяМетаданного = лМетаданное.Представление;
			лОстатокОтИмени = Сред(лИсходныйПутьКМетаданному, СтрДлина(Лев(лИсходныйПутьКМетаданному, Найти(лИсходныйПутьКМетаданному, ".") - 1)) + 2);
			лПозицияТочки = Найти(лОстатокОтИмени, ".");
			Если лПозицияТочки = 0 Тогда 
				лИмяТаблицы = лОстатокОтИмени;
			Иначе
				лИмяТаблицы = Лев(лОстатокОтИмени, лПозицияТочки - 1);
				лИмяКоллекции = Прав(лОстатокОтИмени, СтрДлина(лОстатокОтИмени) - лПозицияТочки);
			КонецЕсли;
		Иначе
			RegExp.Pattern = "[\?a-zA-Zа-яА-я_]*$";
			Массив         = RegExp.Execute(лТекстЗапросаПослеКурсора);
			лМетаданное    = ПолучитьСписокМетаданных().НайтиПоЗначению(Массив.Item(0).Value);
			Если лМетаданное = Неопределено Тогда 
				Возврат Неопределено
			КонецЕсли;
			лИмяМетаданного = лМетаданное.Представление;
		КонецЕсли;
		
		лПоляОбъектовМеталданных = ПолучитьПоляОбъектовМетаданных(лИмяМетаданного, лИмяТаблицы, лИмяКоллекции);
		
		Если лПоляОбъектовМеталданных = Неопределено Тогда 
			Возврат Неопределено
		КонецЕсли;
		
		Для Каждого лПоле из лПоляОбъектовМеталданных Цикл
			лСтрокаСоЗначениямиКП = лСтрокаСоЗначениямиКП + ?(лСтрокаСоЗначениямиКП = "", "", Символы.ПС) + лПоле.Значение;
		КонецЦикла;
		
		Если лСтрокаСоЗначениямиКП = "" Тогда 
			Возврат Неопределено
		КонецЕсли;
		
		лМассив    = ПолучитьСтрокиПоФильтру(лСтрокаСоЗначениямиКП, лФильтр);
		лОкончание = ?(СокрЛП(лСловоПослеКурсора) <> "", " ", "");
		
		Для i = 0 по лМассив.Count-1 Цикл
			лКоллекция = лПоляОбъектовМеталданных.НайтиПоЗначению(СокрЛП(лМассив.Item(i).Value));
			ЗначенияДляВыбора.Добавить(лКоллекция.Значение + лОкончание, лКоллекция.Представление, Ложь, лКоллекция.Картинка);
		КонецЦикла;
		
		лМножественныйВыбор = Истина;
		
	ИначеЕсли лРежимКП.Режим = гРежимыКонтекстнойПодсказки().Начало тогда
		
		лСтрокаСоЗначениямиКП = 
		"Выбрать * из
		|Выбрать Первые 1 * из";
		
		лМассив    = ПолучитьСтрокиПоФильтру(лСтрокаСоЗначениямиКП, лФильтр);
		лОкончание = " ";
		
		Для i = 0 по лМассив.Count-1 Цикл
			ЗначенияДляВыбора.Добавить(СокрЛП(лМассив.Item(i).Value) + лОкончание, СокрЛП(лМассив.Item(i).Value));
		КонецЦикла;
		
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	Если лСловоДоКурсора = "" Тогда лСловоПослеКурсора = "" КонецЕсли;
		
	Возврат Новый Структура("ЗначенияДляВыбора, СловоДоКурсора, СловоПослеКурсора, РежимКП, ТекстЗапросаДоКурсора, ТекстЗапросаПослеКурсора, МножественныйВыбор", 
		ЗначенияДляВыбора, лСловоДоКурсора, лСловоПослеКурсора, лРежимКП, лТекстЗапросаДоКурсора, лТекстЗапросаПослеКурсора, лМножественныйВыбор);
	
КонецФункции // гПолучитьДанныеДляПодбораКП()

Функция ПолучитьПоследнееСлово(Текст)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда 
		Возврат ""
	КонецЕсли;
	
	лВременныйТекст = Новый ТекстовыйДокумент;
	лВременныйТекст.УстановитьТекст(Текст);
	лТекст = лВременныйТекст.ПолучитьСтроку(лВременныйТекст.КоличествоСтрок());
	
	RegExp.Pattern="[\?a-zA-Zа-яА-я_]+$";
	Массив = RegExp.Execute(лТекст);
	Если Массив.Count>0 тогда
		Результат = Массив.Item(Массив.Count-1).Value;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат
КонецФункции // ПолучитьПоследнееСлово()()

Функция ПолучитьПервоеСлово(Текст)
	RegExp.Pattern="^[\?a-zA-Zа-яА-я_]+";
	Массив = RegExp.Execute(Текст);
	Если Массив.Count>0 и Лев(Текст, 1) = Лев(Массив.Item(Массив.Count - 1).Value, 1) тогда
		Результат = Массив.Item(Массив.Count - 1).Value;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат
КонецФункции // ПолучитьПоследнееСлово()()

функция гРежимыКонтекстнойПодсказки() Экспорт
	Возврат Новый Структура("Метаданные, Параметры, Таблицы, ПодТаблицы, Поля, Условия, Начало", "Метаданные", "Параметры", "Таблицы", "ПодТаблицы", "Поля", "Условия", "Начало")
КонецФункции // гРежимыКонтекстнойПодсказки()

Функция ПолучитьРежимКонтекстнойПодсказки(ТекстСлеваОтКурсора, ТекстСправаОтКурсора)
	
	Если ТекстСлеваОтКурсора = "" Тогда 
		Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().Начало, "");
	КонецЕсли;
	
	// условия
	
	//грубый признак того, что нужно выбирать условия
	RegExp.Pattern="(^|\s+|\(\s*)Выбрать\s+[\s\S]*\s+из\s+[\s\S]*где\s+[\s\S]*$";
	ГрубаяПроверка = RegExp.Test(ТекстСлеваОтКурсора);
	
	Если ГрубаяПроверка тогда
		
		//обрамим нужным нам текст
		RegExp.Pattern="из\s+[\s\S]+\s+где";
		Массив = RegExp.Execute(ТекстСлеваОтКурсора);
		ПромежуточныйТекст = Массив.Item(0).Value;
		
		RegExp.Pattern="из(\s+)[a-zA-Zа-яА-я_]+($|\s|(\.[a-zA-Zа-яА-я_]+)*)+";
		Массив = RegExp.Execute(ПромежуточныйТекст);
		Если Массив.Count>0 тогда
			Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().Условия, Массив.Item(Массив.Count - 1).Value);
		КонецЕсли;
	КонецЕсли;
	
	// подтаблицы
	RegExp.Pattern="(^|\s+|\(){0,1}Выбрать\s+[\s\S]*\s+из[\s]+[a-zA-Zа-яА-Я_?]+\.[a-zA-Zа-яА-Я_?]+\.[a-zA-Zа-яА-Я_?]*$";
	ГрубаяПроверка = RegExp.Test(ТекстСлеваОтКурсора);
	
	Если ГрубаяПроверка тогда
		RegExp.Pattern="[a-zA-Zа-яА-я_\.?]+$";
		Массив = RegExp.Execute(ТекстСлеваОтКурсора);
		Если Массив.Count > 0 тогда
			Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().ПодТаблицы, Массив.Item(Массив.Count - 1).Value);
		КонецЕсли;
	Конецесли;
	
	// таблицы
	RegExp.Pattern="(^|\s+|\(){0,1}[\s\S]*\s+из[\s]+[a-zA-Zа-яА-Я_?]+\.[a-zA-Zа-яА-Я_?]*$";
	ГрубаяПроверка = RegExp.Test(ТекстСлеваОтКурсора);
	
	Если ГрубаяПроверка тогда
		RegExp.Pattern="[a-zA-Zа-яА-я_\.?]+$";
		Массив = RegExp.Execute(ТекстСлеваОтКурсора);
		Если Массив.Count > 0 И 
			Прав(ТекстСлеваОтКурсора, 1) = Прав(Массив.Item(Массив.Count - 1).Value, 1) // исключаем перенос строки
			тогда 
			Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().Таблицы, Массив.Item(Массив.Count - 1).Value);
		КонецЕсли;
	Конецесли;
	
	// метаданные
	RegExp.Pattern="(^|\s+|\(){0,1}Выбрать\s+[\s\S]*\s+из\s+[a-zA-Zа-яА-Я_?]*$";
	Массив = RegExp.Execute(ТекстСлеваОтКурсора);
	Если Массив.Count > 0 тогда
		Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().Метаданные, Массив.Item(Массив.Count - 1).Value);
	КонецЕсли;
	
	// параметры
	RegExp.Pattern="(^|\s+|\()[a-zA-Zа-яА-я_]+\s*=\s*&$";
	Массив = RegExp.Execute(ТекстСлеваОтКурсора);
	Если Массив.Count > 0 тогда
		Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().Параметры, Массив.Item(Массив.Count - 1).Value);
	КонецЕсли;
	
	// поля
	//так как на весь шаблон vbscript глючит, проверяем по отдельности
	RegExp.Pattern="(^|\s+|\(){0,1}Выбрать\s+[\s\S]*$";
	ЛеваяПроверкаШаблона = RegExp.Test(ТекстСлеваОтКурсора);
	
	Если ЛеваяПроверкаШаблона Тогда 
		RegExp.Pattern="([a-zA-Zа-яА-Я_,]*\s+|^)*ИЗ\s+[a-zA-Zа-яА-Я_]";
		ПраваяПроверкаШаблона = RegExp.Test(ТекстСправаОтКурсора);
		
		Если ЛеваяПроверкаШаблона и ПраваяПроверкаШаблона тогда
			Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().Поля);
		КонецЕсли;
	КонецЕсли;
	
	// начало запроса	
	Результат = новый Структура;
	RegExp.Pattern="[\?a-zA-Zа-яА-я_)]+\s*$";
	Массив = RegExp.Execute(ТекстСлеваОтКурсора);
	Если Массив.Count>0 тогда
		Возврат Новый Структура("Режим, Текст", гРежимыКонтекстнойПодсказки().Начало, Массив.Item(Массив.Count - 1).Value);
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции // ПолучитьРежимКонтекстнойПодсказки()

Функция ПолучитьСтрокиПоФильтру(ИсходнаяСтрока, Фильтр)

	RegExp.Pattern     = "^("+СтрЗаменить(Фильтр,"?","\?")+")[a-zA-Zа-яА-я_]*.*(\n|$)";
	Возврат RegExp.Execute(ИсходнаяСтрока);

КонецФункции // ПолучитьСтрокиПоФильтру()

Функция ПолучитьСписокМетаданных()

	Список = Новый СписокЗначений;
	Список.Добавить("Константы"             , "Константы"              ,, ПолучитьКартинкуПоМетаданному("Константы"));
	Список.Добавить("Справочник"            , "Справочники"            ,, ПолучитьКартинкуПоМетаданному("Справочники"));
	Список.Добавить("Документ"              , "Документы"              ,, ПолучитьКартинкуПоМетаданному("Документы"));
	Список.Добавить("ЖурналДокументов"      , "ЖурналыДокументов"      ,, ПолучитьКартинкуПоМетаданному("ЖурналыДокументов"));
	Список.Добавить("Перечисление"          , "Перечисления"           ,, ПолучитьКартинкуПоМетаданному("Перечисления"));
	Список.Добавить("ПланВидовРасчета"      , "ПланыВидовРасчета"      ,, ПолучитьКартинкуПоМетаданному("ПланыВидовРасчета"));
	Список.Добавить("ПланВидовХарактеристик", "ПланыВидовХарактеристик",, ПолучитьКартинкуПоМетаданному("ПланыВидовХарактеристик"));
	Список.Добавить("ПланОбмена"            , "ПланыОбмена"            ,, ПолучитьКартинкуПоМетаданному("ПланыОбмена"));
	Список.Добавить("ПланСчетов"            , "ПланыСчетов"            ,, ПолучитьКартинкуПоМетаданному("ПланыСчетов"));
	Список.Добавить("РегистрБухгалтерии"    , "РегистрыБухгалтерии"    ,, ПолучитьКартинкуПоМетаданному("РегистрыБухгалтерии"));
	Список.Добавить("РегистрНакопления"     , "РегистрыНакопления"     ,, ПолучитьКартинкуПоМетаданному("РегистрыНакопления"));
	Список.Добавить("РегистрРасчета"        , "РегистрыРасчета"        ,, ПолучитьКартинкуПоМетаданному("РегистрыРасчета"));
	Список.Добавить("РегистрСведений"       , "РегистрыСведений"       ,, ПолучитьКартинкуПоМетаданному("РегистрыСведений"));
	Список.Добавить("Последовательность"    , "Последовательности"     ,, ПолучитьКартинкуПоМетаданному("Последовательности"));
	Список.Добавить("КритерийОтбора"        , "КритерииОтбора"         ,, ПолучитьКартинкуПоМетаданному("КритерииОтбора"));
	Список.Добавить("БизнесПроцесс"         , "БизнесПроцессы"         ,, ПолучитьКартинкуПоМетаданному("БизнесПроцессы"));
	Список.Добавить("Задача"                , "Задачи"                 ,, ПолучитьКартинкуПоМетаданному("Задачи"));
	
	Возврат  Список;

КонецФункции // ПолучитьСписокМетаданных()
 
Функция ПолучитьСписокКоллекцийОбъектаМетаданных(ИмяМетаданного, ИмяОбъектаМетаданных)
	
	Перем лКартинка;
	
	Список = Новый СписокЗначений;
	
	Если ИмяМетаданного = "Справочники" ИЛИ ИмяМетаданного = "Документы" тогда
		
		лКартинка = ПолучитьКартинку("МетаданныеСвойстваОбъектовТабличнаяЧасть");
		
		Попытка
			лОбъектМетаданных = Вычислить("Метаданные[""" + ИмяМетаданного + """][""" + ИмяОбъектаМетаданных + """]");
		Исключение
			Возврат Список;
		КонецПопытки; 
		лКоллекция = лОбъектМетаданных.ТабличныеЧасти;
		Для Каждого ЭлементКоллекции из лКоллекция Цикл
			Список.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.Имя, , лКартинка);
		КонецЦикла;
		                                                     
	ИначеЕсли ИмяМетаданного = "РегистрыБухгалтерии" тогда
		
		лКартинка = ПолучитьКартинкуПоМетаданному(ИмяМетаданного);
		
		Список.Добавить("Субконто()"         , "Субконто"         ,, лКартинка);
		Список.Добавить("ДвиженияССубконто()", "ДвиженияССубконто",, лКартинка);
		Список.Добавить("Остатки()"          , "Остатки"          ,, лКартинка);
		Список.Добавить("Обороты()"          , "Обороты"          ,, лКартинка);
		Список.Добавить("ОстаткиИОбороты()"  , "ОстаткиИОбороты"  ,, лКартинка);
		Список.Добавить("ОборотыДтКт()"      , "ОборотыДтКт"      ,, лКартинка);
		
	ИначеЕсли ИмяМетаданного = "РегистрыНакопления" тогда
		
		лКартинка = ПолучитьКартинкуПоМетаданному(ИмяМетаданного);
		
		Список.Добавить("Обороты()"        , "Обороты"        ,, лКартинка);
		Список.Добавить("Остатки()"        , "Остатки"        ,, лКартинка);
		Список.Добавить("ОстаткиИОбороты()", "ОстаткиИОбороты",, лКартинка);
		
	ИначеЕсли ИмяМетаданного = "РегистрыРасчета" тогда
		
		лКартинка = ПолучитьКартинку("МетаданныеСвойстваОбъектовПерерасчет");
		
		лОбъектМетаданных = Вычислить("Метаданные[""" + ИмяМетаданного + """][""" + ИмяОбъектаМетаданных + """]");
		лКоллекция = лОбъектМетаданных.Перерасчеты;
		Для Каждого ЭлементКоллекции из лКоллекция Цикл
			Список.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.Имя,, лКартинка);
		КонецЦикла;
		
		Список.Добавить("ФактическийПериодДействия()", "ФактическийПериодДействия",, лКартинка);
		Список.Добавить("ДанныеГрафика"              , "ДанныеГрафика"            ,, лКартинка);
		
	ИначеЕсли ИмяМетаданного = "РегистрыСведений" тогда
		
		лКартинка = ПолучитьКартинкуПоМетаданному(ИмяМетаданного);
		
		Список.Добавить("СрезПоследних()", "СрезПоследних",, лКартинка);
		Список.Добавить("СрезПервых()"   , "СрезПервых"   ,, лКартинка);
	ИначеЕсли ИмяМетаданного = "Последовательности" тогда
		лКартинка = ПолучитьКартинкуПоМетаданному(ИмяМетаданного);
		Список.Добавить("Границы", "Границы",, лКартинка);
	ИначеЕсли ИмяМетаданного = "БизнесПроцесс" тогда
		лКартинка = ПолучитьКартинкуПоМетаданному(ИмяМетаданного);
		Список.Добавить("Точки", "Точки");
	ИначеЕсли ИмяМетаданного = "Задача" тогда
	ИначеЕсли ИмяМетаданного = "КритерийОтбора" тогда
	ИначеЕсли ИмяМетаданного = "ЖурналыДокументов" тогда
	ИначеЕсли ИмяМетаданного = "ПланыВидовРасчета" тогда
	ИначеЕсли ИмяМетаданного = "ПланыВидовХарактеристик" тогда
	ИначеЕсли ИмяМетаданного = "ПланыОбмена" тогда
	ИначеЕсли ИмяМетаданного = "ПланыСчетов" тогда
	КонецЕсли;
	
	Возврат Список
	
КонецФункции // ПолучитьСписокКоллекцийОбъектаМетаданных()

Функция ПолучитьПоляОбъектовМетаданных(ИмяМетаданного, ИмяОбъектаМетаданных, ИмяКоллекции)
	
	Список = Новый СписокЗначений;
	
	лЭтоРегистр = (Найти(ИмяМетаданного, "Регистры") = 1);
	
	Если ИмяМетаданного = "Константы" тогда
		
		лКартинка = ПолучитьКартинку("МетаданныеКонстанта");
		
		Для каждого Константа Из Метаданные.Константы Цикл
			Список.Добавить(Константа.Имя, Константа.Имя,, лКартинка);
		КонецЦикла; 
	Иначе

		Попытка
			Если ИмяКоллекции = Неопределено ИЛИ лЭтоРегистр тогда
				лОбъектМетаданных = Вычислить("Метаданные[""" + ИмяМетаданного + """][""" + ИмяОбъектаМетаданных + """]");
			Иначе
				лОбъектМетаданных = Вычислить("Метаданные[""" + ИмяМетаданного + """][""" + ИмяОбъектаМетаданных + """].ТабличныеЧасти[""" + ИмяКоллекции + """]");
			КонецЕсли;
		Исключение
			Возврат Неопределено
		КонецПопытки; 
		
		Если ИмяМетаданного = "Справочники" ИЛИ ИмяМетаданного = "Документы" ИЛИ ИмяМетаданного = "ПланыВидовХарактеристик" тогда
			
			лКартинка = ПолучитьКартинку("МетаданныеСвойстваОбъектовСтандартныеРеквизиты");
			
			Список.Добавить("Ссылка"         , "Ссылка"         ,, лКартинка);
			
			Если ИмяКоллекции = Неопределено Тогда 
				Список.Добавить("ПометкаУдаления", "ПометкаУдаления",, лКартинка);
				
				Если ИмяМетаданного = "Справочники" тогда
					Список.Добавить("Предопределенный", "Предопределенный",, лКартинка);
					Если лОбъектМетаданных.Владельцы.Количество() > 0 Тогда 
						Список.Добавить("Владелец", "Владелец",, лКартинка);
					КонецЕсли;
					Если лОбъектМетаданных.ДлинаКода > 0 Тогда 
						Список.Добавить("Код", "Код",, лКартинка);
					КонецЕсли;
					Если лОбъектМетаданных.ДлинаНаименования > 0 Тогда 
						Список.Добавить("Наименование", "Наименование",, лКартинка);
					КонецЕсли;
					Если лОбъектМетаданных.Иерархический Тогда 
						Список.Добавить("ЭтоГруппа", "ЭтоГруппа",, лКартинка);
						Список.Добавить("Родитель" , "Родитель" ,, лКартинка);
					КонецЕсли;
				ИначеЕсли ИмяМетаданного = "Документы" тогда
					Список.Добавить("Номер"   , "Номер"   ,, лКартинка);
					Список.Добавить("Дата"    , "Дата"    ,, лКартинка);
					Список.Добавить("Проведен", "Проведен",, лКартинка);
				Иначе
					Возврат Список
				КонецЕсли;
			КонецЕсли;
			
			лКартинка         = ПолучитьКартинку("МетаданныеСвойстваОбъектовРеквизит");			
			лРеквизитыОбъекта = лОбъектМетаданных.Реквизиты;
			Для Каждого Реквизит из лРеквизитыОбъекта Цикл
				Список.Добавить(Реквизит.Имя, Реквизит.Имя,, лКартинка);
			КонецЦикла;
			
		ИначеЕсли лЭтоРегистр Тогда

			лКартинка = ПолучитьКартинку("МетаданныеСвойстваОбъектовИзмерение");
			
			лСвойстваМетаданного = гПолучитьСтруктуруДанныхПоОбъектуМетаданных(ИмяМетаданного + "." + ИмяОбъектаМетаданных);
			
			Если Не лСвойстваМетаданного.Непериодический Тогда 
				Список.Добавить("Период", "Период",, лКартинка);
			КонецЕсли;
			
			Если лСвойстваМетаданного.Свойство("Регистратор") Тогда 
				Список.Добавить("Регистратор", "Регистратор",, лКартинка);
			КонецЕсли;
			
			лИзмеренияРегистра = лОбъектМетаданных.Измерения;
			Для Каждого Измерение из лИзмеренияРегистра Цикл
				Список.Добавить(Измерение.Имя, Измерение.Имя,, лКартинка);
			КонецЦикла;
			
			лКартинка        = ПолучитьКартинку("МетаданныеСвойстваОбъектовРесурс");
			лРесурсыРегистра = лОбъектМетаданных.Ресурсы;		
			Для Каждого Ресурс из лРесурсыРегистра Цикл
				
				Если ИмяКоллекции = "Обороты" тогда
					Список.Добавить(Ресурс.Имя + "Оборот", Ресурс.Имя + "Оборот",, лКартинка);
					Список.Добавить(Ресурс.Имя + "Приход", Ресурс.Имя + "Приход",, лКартинка);
					Список.Добавить(Ресурс.Имя + "Расход", Ресурс.Имя + "Расход",, лКартинка);
				ИначеЕсли ИмяКоллекции = "Остатки" тогда
					Список.Добавить(Ресурс.Имя + "Остаток", Ресурс.Имя + "Остаток",, лКартинка);
				ИначеЕсли ИмяКоллекции = "ОстаткиИОбороты" тогда
					Список.Добавить(Ресурс.Имя + "НачальныйОстаток", Ресурс.Имя + "НачальныйОстаток",, лКартинка);
					Список.Добавить(Ресурс.Имя + "Приход"          , Ресурс.Имя + "Приход"          ,, лКартинка);
					Список.Добавить(Ресурс.Имя + "Расход"          , Ресурс.Имя + "Расход"          ,, лКартинка);
					Список.Добавить(Ресурс.Имя + "КонечныйОстаток" , Ресурс.Имя + "КонечныйОстаток" ,, лКартинка);
				ИначеЕсли ИмяКоллекции = "СрезПоследних" тогда
					Список.Добавить(Ресурс.Имя, Ресурс.Имя,, лКартинка);
				КонецЕсли;
			КонецЦикла;
			
			лКартинка = ПолучитьКартинку("МетаданныеСвойстваОбъектовРесурс");
			
			лРеквизитыРегистра = лОбъектМетаданных.Реквизиты;		
			Для Каждого Ресурс из лРеквизитыРегистра Цикл
				Список.Добавить(Ресурс.Имя, Ресурс.Имя,, лКартинка);
			КонецЦикла;
			
		ИначеЕсли ИмяМетаданного="Перечисления" тогда	
			
			лКартинка = ПолучитьКартинкуПоМетаданному(ИмяМетаданного);
			
			Список.Добавить("Ссылка" , "Ссылка" ,, лКартинка);
			Список.Добавить("Порядок", "Порядок",, лКартинка);			
		ИначеЕсли ИмяМетаданного="ПланыВидовХарактеристик" тогда	
		ИначеЕсли ИмяМетаданного="ПланыВидовРасчета" тогда
		ИначеЕсли ИмяМетаданного="ПланыОбмена" тогда
		ИначеЕсли ИмяМетаданного="ПланыСчетов" тогда
		ИначеЕсли ИмяМетаданного="РегистрыРасчета" тогда
		ИначеЕсли ИмяМетаданного="Последовательности" тогда
		ИначеЕсли ИмяМетаданного="КритерийОтбора" тогда
		ИначеЕсли ИмяМетаданного="БизнесПроцесс" тогда
		ИначеЕсли ИмяМетаданного="Задача" тогда
		КонецЕсли;
	КонецЕсли;
	
	Возврат Список
	
КонецФункции // ПолучитьПоляОбъектовМетаданных()


/////////////////////////////////////////
// РаботаСДинамическимМеню

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция гЗаполнитьМенюПоДереву(Родитель, Знач Индекс, ДеревоМенюКнопки) Экспорт
	
	Для каждого ТекСтрока Из ДеревоМенюКнопки.Строки Цикл
		
		Если Родитель.Кнопки.Найти(ТекСтрока.Имя) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Индекс = Неопределено Тогда 
			лКомандаДобавленияКнопки = "Родитель.Кнопки.Добавить(";
		Иначе
			лКомандаДобавленияКнопки = "Родитель.Кнопки.Вставить(Индекс, ";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Действие) Тогда
			Кнопка = Вычислить(лКомандаДобавленияКнопки + "ТекСтрока.Имя, ?(ЗначениеЗаполнено(ТекСтрока.Название), ТипКнопкиКоманднойПанели.Подменю, ТипКнопкиКоманднойПанели.Разделитель), ТекСтрока.Название, )");
		Иначе
			Кнопка = Вычислить(лКомандаДобавленияКнопки + "ТекСтрока.Имя, ТипКнопкиКоманднойПанели.Действие, ТекСтрока.Название, Новый Действие(ТекСтрока.Действие))");
		КонецЕсли;
		
		Если ТекСтрока.СочетаниеКлавиш <> Неопределено Тогда
			Кнопка.СочетаниеКлавиш = ТекСтрока.СочетаниеКлавиш;
		КонецЕсли;
		
		Если ТекСтрока.Картинка <> Неопределено Тогда 
			Кнопка.Картинка = ТекСтрока.Картинка;
		КонецЕсли;
		
		Кнопка.Текст = ТекСтрока.Название;
		
		Если ТекСтрока.Строки.Количество() > 0 Тогда
			гЗаполнитьМенюПоДереву(Кнопка, Неопределено, ТекСтрока)
		КонецЕсли;	
		
	КонецЦикла; 
	
	Возврат Кнопка
	
КонецФункции // гЗаполнитьМенюПоДереву()

Функция ПолучитьКолонкиМеню()
	
	лКолонки = Новый Массив;
	лКолонки.Добавить("Имя");
	лКолонки.Добавить("Название");
	лКолонки.Добавить("Действие");
	лКолонки.Добавить("СочетаниеКлавиш");
	лКолонки.Добавить("Картинка");
	
	Возврат лКолонки
	
КонецФункции // ПолучитьКолонкиМеню()
 
Функция ПолучитьМенюСписком(ДеревоМеню, Список = Неопределено) Экспорт
	
	Если Список = Неопределено Тогда 
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	лКолонкиДереваМеню = ПолучитьКолонкиМеню();
	Для каждого ВеткаМеню Из ДеревоМеню.Строки Цикл
		лПунктМеню = Новый Структура;
		Для каждого ИмяКолонки Из лКолонкиДереваМеню Цикл
			лПунктМеню.Вставить(ИмяКолонки);
		КонецЦикла; 
		ЗаполнитьЗначенияСвойств(лПунктМеню, ВеткаМеню);
		Список.Добавить(лПунктМеню);
		ПолучитьМенюСписком(ВеткаМеню, Список)
	КонецЦикла; 
	
	Возврат Список

КонецФункции // ПолучитьМенюСписком()

// Функция возвращает дерево для формирования меню с действиями над результатом запроса
//
// Параметры
//  ИмяМеню - Булево  - 
//  ДляУправляемойФормы - Булево
//
// Возвращаемое значение:
//   <ДеревоЗначений> - 
//
Функция гПолучитьМеню(ИмяМеню, ДляУправляемойФормы = Ложь, ВВидеСписка = Ложь, Знач ВеткаДереваМеню = Неопределено) Экспорт
	
	лМассивМеню = СтрокаВМассив(ИмяМеню);
	
	Если ВеткаДереваМеню = Неопределено Тогда 
		ВеткаДереваМеню = Новый ДеревоЗначений;
		ВеткаДереваМеню.Колонки.Добавить("Имя");
		ВеткаДереваМеню.Колонки.Добавить("Название");
		ВеткаДереваМеню.Колонки.Добавить("Действие");
		ВеткаДереваМеню.Колонки.Добавить("СочетаниеКлавиш");
		ВеткаДереваМеню.Колонки.Добавить("Картинка");
	КонецЕсли;
	
	Если лМассивМеню.Количество() > 1 Тогда 
		Для каждого ЭлементМассиваМеню Из лМассивМеню Цикл
			гПолучитьМеню(СокрЛП(ЭлементМассиваМеню), ДляУправляемойФормы, ВВидеСписка, ВеткаДереваМеню)
		КонецЦикла; 
	КонецЕсли;	
	
	Если ИмяМеню = "ПредустановленныйКод" Тогда
		
		КореньМеню           = ВеткаДереваМеню.Строки.Добавить();
		КореньМеню.Название = "Предустановленный код";
		КореньМеню.Имя      = "ПредустановленныйКодКнопкаМеню";
		КореньМеню.Картинка = Новый Картинка(ПолучитьМакет("Картинка_ПредустановленныйКод"), Истина);
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Редактировать регистр сведений";
		НоваяСтрока.Имя      = "ПредустановленныйКодРедактироватьРегистрСведений";
		НоваяСтрока.Действие = "ПредустановленныйКодРедактироватьРегистрСведений";
		НоваяСтрока.Картинка = БиблиотекаКартинок.РегистрСведений;
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Редактировать документы";
		НоваяСтрока.Имя      = "ПредустановленныйКодРедактироватьДокументы";
		НоваяСтрока.Действие = "ПредустановленныйКодРедактироватьДокументы";
		НоваяСтрока.Картинка = БиблиотекаКартинок.Документ;
		
		Если Не ДляУправляемойФормы Тогда 
			
			НоваяСтрока          = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Подключить базу";
			НоваяСтрока.Имя      = "ПредустановленныйКодПодключитьБазу";
			НоваяСтрока.Действие = "ПредустановленныйКодПодключитьБазу";
			НоваяСтрока.Картинка = Новый Картинка(ПолучитьМакет("Картинка_ПодключитьБазу"), Истина);
			
		КонецЕсли;
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Вставить цикл";
		НоваяСтрока.Имя      = "ПредустановленныйКодВставитьЦикл";
		НоваяСтрока.Действие = "ПредустановленныйКодВставитьЦикл";
		НоваяСтрока.Картинка = Новый Картинка(ПолучитьМакет("Картинка_ВставитьЦикл"), Истина);
		
		Если Не ДляУправляемойФормы Тогда 			
			НоваяСтрока          = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Перенумеровать справочник";
			НоваяСтрока.Имя      = "ПредустановленныйКодПеренумероватьСправочник";
			НоваяСтрока.Действие = "ПредустановленныйКодПеренумероватьСправочник";
			НоваяСтрока.Картинка = Новый Картинка(ПолучитьМакет("Картинка_ПеренумероватьСправочник"), Истина);
			
			НоваяСтрока          = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Добавить параметр типа таблица значений";
			НоваяСтрока.Имя      = "ПредустановленныйКодДобавитьПараметрТипаТаблицаЗначений";
			НоваяСтрока.Действие = "ПредустановленныйКодДобавитьПараметрТипаТаблицаЗначений";
			НоваяСтрока.Картинка = Новый Картинка(ПолучитьМакет("Картинка_ДобавитьПараметрТЗ"), Истина);
			
			НоваяСтрока          = КореньМеню.Строки.Добавить();
			НоваяСтрока.Имя      = "ПредустановленныйКодРазделитель";
			
			НоваяСтрока          = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Выбрать значение параметра";
			НоваяСтрока.Имя      = "ПредустановленныйКодВыбратьЗначениеПараметра";
			НоваяСтрока.Действие = "ПредустановленныйКодВыбратьЗначениеПараметра";
		КонецЕсли;
		
	ИначеЕсли ИмяМеню = "Сервис" Тогда
		
		КореньМеню = ВеткаДереваМеню.Строки.Добавить();
		КореньМеню.Название = "Сервис";
		КореньМеню.Имя = "СервисКнопкаМеню";
		
		НоваяСтрока = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Действие с результатом запроса";
		НоваяСтрока.Имя = "СервисДействиеСРезультатомЗапроса";
		
		Если Не ДляУправляемойФормы Тогда 
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Проведение документов";
			Уровень2.Имя = "СервисПроведениеДокументов";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПроведениеДокументов";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Отмена проведения";
			Уровень2.Имя = "СервисОтменапроведенияДокументов";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюОтменапроведенияДокументов";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Пометка удаления";
			Уровень2.Имя = "СервисПометкаУдаленияОбъектов";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПометкаУдаленияОбъектов";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Снятие пометки удаления";
			Уровень2.Имя = "СервисСнятиеПометкиУдаленияОбъектов";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюСнятиеПометкиУдаленияОбъектов";
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Имя = "КнопкаМенюДействиеСРезультатомЗапросаРазделитель1";
			
		КонецЕсли;
		
		Уровень2 = НоваяСтрока.Строки.Добавить();
		Уровень2.Название = "Выгрузить в параметр";
		Уровень2.Имя = "СервисВыгрузитьВПараметр";
		Уровень2.Действие = "СервисВыгрузитьВПараметр";
		
		Если Не ДляУправляемойФормы Тогда 
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Выполнить код";
			Уровень2.Имя = "СервисВыполнитьКод";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюВыполнитьКод";
			Уровень2.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F5);			
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Печать результата запроса";
			Уровень2.Имя = "СервисПечатьРезультатаЗапроса";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПечатьРезультатаЗапроса";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Печать данных таблицы";
			Уровень2.Имя = "СервисПечатьДанныхТаблицы";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПечатьДанныхТаблицы";
			Уровень2.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.P,,Истина);			
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Имя = "СервисДействиеСРезультатомЗапросаРазделитель2";
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Поиск ссылок на объекты";
			Уровень2.Имя = "СервисПоискСсылок";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПоискСсылок";
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Поиск ссылок на объекты (в глобальную структуру)";
			Уровень2.Имя = "СервисПоискСсылокВСтруктуру";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПоискСсылокВСтруктуру";
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Имя = "СервисДействиеСРезультатомЗапросаРазделитель3";
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Выгрузить в DBF";
			Уровень2.Имя = "СервисВыгрузкаВDBF";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюВыгрузкаВDBF";
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Имя = "СервисРазделитель1";
			
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Показать в виде Диаграммы";
			Уровень2.Имя = "СервисДиаграмма";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюДиаграмма";
			
			НоваяСтрока = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Настройки колонок";
			НоваяСтрока.Имя = "СервисСервисНастройкиКолонок";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Запомнить ширину колонок";
			Уровень2.Имя = "СервисЗапомнитьШиринуКолонок";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюЗапомнитьШиринуКолонок";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "ПросмотретьТекущиеЗначения";
			Уровень2.Имя = "СервисПросмотретьТекущиеЗначения";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПросмотретьТекущиеЗначения";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Сохранить текущие размеры по умолчанию";
			Уровень2.Имя = "СервисСохранитьТекущиеРазмерыПоУмолчанию";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюСохранитьТекущиеРазмерыПоУмолчанию";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Имя = "СервисНастройкиКолонокРазделитель1";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Восстановить значения по умолчанию";
			Уровень2.Имя = "СервисВосстановитьЗначенияПоУмолчанию";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюВосстановитьЗначенияПоУмолчанию";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Очистить значения по умолчанию";
			Уровень2.Имя = "СервисОчиститьЗначенияПоУмолчанию";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюОчиститьЗначенияПоУмолчанию";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Просмотреть значения по умолчанию";
			Уровень2.Имя = "СервисПросмотретьЗначенияПоУмолчанию";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюПросмотретьЗначенияПоУмолчанию";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Имя = "СервисНастройкиКолонокРазделитель2";
			Уровень2 = НоваяСтрока.Строки.Добавить();
			Уровень2.Название = "Установить всем одну ширину";
			Уровень2.Имя = "СервисУстановитьВсемОднуШирину";
			Уровень2.Действие = "КнопкаДействияКнопкаМенюУстановитьВсемОднуШирину";
		КонецЕсли;
			
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Имя      = "СервисРазделитель2";
		
		НоваяСтрока = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Загрузить из буфера в таблицу с результатом";
		НоваяСтрока.Имя      = "СервисЗагрузитьИзБуфераВТаблицуСРезультатом";
		НоваяСтрока.Действие = "СервисЗагрузитьИзБуфераВТаблицуСРезультатом";
		
		Если Не ДляУправляемойФормы Тогда 
			НоваяСтрока                 = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название        = "Intellisense";
			НоваяСтрока.Имя             = "КнопкаМенюСервисIntellisense";
			НоваяСтрока.Действие        = "КнопкаДействияКнопкаМенюСервисIntellisense";
			НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Space,,Истина);			
			
			НоваяСтрока          = КореньМеню.Строки.Добавить();
			НоваяСтрока.Имя      = "СервисРазделитель3";
		
			НоваяСтрока = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Сформировать код для отладки";
			НоваяСтрока.Имя = "СервисСформироватьКодДляОтладки";
			НоваяСтрока.Действие = "СервисСформироватьКодДляОтладки";
			
		КонецЕсли;
		
	ИначеЕсли ИмяМеню = "Запросы" Тогда
		
		Если Не ДляУправляемойФормы Тогда 
			КореньМеню = ВеткаДереваМеню.Строки.Добавить();
			КореньМеню.Название = "Запросы";
			КореньМеню.Имя = "ЗапросыКнопкаМеню";
			
			НоваяСтрока = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Все документы";
			НоваяСтрока.Имя = "ЗапросыВсеДокументы";
			НоваяСтрока.Действие = "КнопкаДействияКнопкаМенюВсеДокументы";
			
			НоваяСтрока = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Выбранные документы";
			НоваяСтрока.Имя = "ЗапросыВыбранныеДокументы";
			НоваяСтрока.Действие = "КнопкаДействияКнопкаМенюВыбранныеДокументы";
			
			НоваяСтрока = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Все справочники";
			НоваяСтрока.Имя = "ЗапросыВсеСправочники";
			НоваяСтрока.Действие = "КнопкаДействияКнопкаМенюВсеСправочники";
			
			НоваяСтрока = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Выбранные справочники";
			НоваяСтрока.Имя = "ЗапросыВыбранныеСправочники";
			НоваяСтрока.Действие = "КнопкаДействияКнопкаМенюВыбранныеСправочники";
			
			НоваяСтрока          = КореньМеню.Строки.Добавить();
			НоваяСтрока.Имя      = "ЗапросыРазделитель";
			
			НоваяСтрока = КореньМеню.Строки.Добавить();
			НоваяСтрока.Название = "Выбрать метаданное для запроса...";
			НоваяСтрока.Имя      = "ЗапросыВыбратьМетаданноеДляЗапроса";
			НоваяСтрока.Действие = "КнопкаДействияКнопкаМенюВыбратьМетаданноеДляЗапроса";				
			
		КонецЕсли;
		
	ИначеЕсли ИмяМеню = "Информация" Тогда
		
		КореньМеню           = ВеткаДереваМеню.Строки.Добавить();
		КореньМеню.Название = "Информация";
		КореньМеню.Имя      = "ИнформацияКнопкаМеню";
		КореньМеню.Картинка = Новый Картинка(ПолучитьМакет("Картинка_Информация"), Истина);
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Список изменений";
		НоваяСтрока.Имя      = "ИнформацияСписокИзменений";
		НоваяСтрока.Действие = "ВыборМенюИнформация";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("changelog");
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Отправить отзыв";
		НоваяСтрока.Имя      = "ИнформацияОтправитьОтзыв";
		НоваяСтрока.Действие = "ВыборМенюИнформация";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("mail__pencil");
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Другие разработки автора";
		НоваяСтрока.Имя      = "ИнформацияДругиеРазработкиАвтора";
		НоваяСтрока.Действие = "ВыборМенюИнформация";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("drill");
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Стать спонсором";
		НоваяСтрока.Имя      = "ИнформацияDonate";
		НоваяСтрока.Действие = "ВыборМенюИнформация";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("piggy_bank");
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Сайт автора";
		НоваяСтрока.Имя      = "ИнформацияСайтАвтора";
		НоваяСтрока.Действие = "ВыборМенюИнформация";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("home");
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "FugueIcons";
		НоваяСтрока.Имя      = "ИнформацияFugueIcons";
		НоваяСтрока.Действие = "ВыборМенюИнформация";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("FugueIcons");
		
		//НоваяСтрока          = КореньМеню.Строки.Добавить();
		//НоваяСтрока.Имя      = "ИнформацияРазделитель1";
		//
		//НоваяСтрока          = КореньМеню.Строки.Добавить();
		//НоваяСтрока.Название = "Подписаться на новости (RSS)";
		//НоваяСтрока.Имя      = "RSS";
		//НоваяСтрока.Действие = "ВыборМенюИнформация";
		//НоваяСтрока.Картинка = Новый Картинка(ПолучитьМакет("Картинка_RSS"), Истина);
		
	ИначеЕсли ИмяМеню = "Дополнительно" Тогда
		
		КореньМеню          = ВеткаДереваМеню.Строки.Добавить();
		КореньМеню.Название = "Дополнительно";
		КореньМеню.Имя      = "ДополнительноКнопкаМеню";
		КореньМеню.Картинка = ПолучитьВнешнююКартинку("addon");
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Поиск";
		НоваяСтрока.Имя      = "ДополнительноПоиск";
		НоваяСтрока.Действие = "ДополнительноПоиск";
		НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F, ,Истина, Истина);
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("find");
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Имя      = "ДополнительноРазделитель";
		
		Если Не ДляУправляемойФормы Тогда 
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Открыть форму cписка метаданного из запроса";
		НоваяСтрока.Имя      = "ДополнительноОткрытьФормуСпискаМетаданногоизЗапроса";
		НоваяСтрока.Действие = "ДополнительноОткрытьФормуСпискаМетаданногоизЗапроса";
		НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.M, ,Истина);
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("open_list_metadata");
		КонецЕсли;
		
		
		//НоваяСтрока          = КореньМеню.Строки.Добавить();
		//НоваяСтрока.Имя      = "ДополнительноРазделитель2";
		//
		//НоваяСтрока          = КореньМеню.Строки.Добавить();
		//НоваяСтрока.Название = "Настройки FTP";
		//НоваяСтрока.Имя      = "ДополнительноНастройкиFTP";
		//НоваяСтрока.Действие = "НастройкиFTP";
		//НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("server_cloud");
		//
		//НоваяСтрока          = КореньМеню.Строки.Добавить();
		//НоваяСтрока.Название = "Сохранить на FTP";
		//НоваяСтрока.Имя      = "ДополнительноСохранитьНаFTP";
		//НоваяСтрока.Действие = "СохранитьНаFTP";
		//НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.S,Истина, Истина);
		//НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("upload_cloud");
		//
		//НоваяСтрока          = КореньМеню.Строки.Добавить();
		//НоваяСтрока.Название = "Загрузить с FTP";
		//НоваяСтрока.Имя      = "ДополнительноЗагрузитьСFTP";
		//НоваяСтрока.Действие = "ЗагрузитьСFTP";
		//НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.O,Истина, Истина);
		//НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("download_cloud");
		
	ИначеЕсли ИмяМеню = "КодЗапрос" Тогда

		КореньМеню          = ВеткаДереваМеню.Строки.Добавить();
		КореньМеню.Название = "Сформировать код с запросом для 1С";
		КореньМеню.Имя      = "КодЗапросСформироватьКодКнопкаМеню";
		КореньМеню.Картинка = ПолучитьВнешнююКартинку("create_from_query");
	
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Сформировать код с запросом(выборка)";
		НоваяСтрока.Имя      = "КодЗапросСформироватьКод" + гРежимыФормированияКодаИзТекстаЗапроса().Выборка;
		НоваяСтрока.Действие = "КодЗапросСформироватьКод";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("create_from_query1");
		НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._1, Истина,,);			
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Сформировать код с запросом (ТЗ)";
		НоваяСтрока.Имя      = "КодЗапросСформироватьКод" + гРежимыФормированияКодаИзТекстаЗапроса().ТЗ;
		НоваяСтрока.Действие = "КодЗапросСформироватьКод";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("create_from_query2");
		НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._2, Истина,,);			
		
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Сформировать код с запросом (с обработкой результата)";
		НоваяСтрока.Имя      = "КодЗапросСформироватьКод" + гРежимыФормированияКодаИзТекстаЗапроса().ОбработкаРезультата;
		НоваяСтрока.Действие = "КодЗапросСформироватьКод";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("create_from_query3");
		НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._3, Истина,,);			
		
		КореньМеню          = ВеткаДереваМеню.Строки.Добавить();
		КореньМеню.Название = "Получить запрос из кода 1С";
		КореньМеню.Имя      = "КодЗапросПолучитьЗапросКнопкаМеню";
		КореньМеню.Картинка = ПолучитьВнешнююКартинку("create_from_code");
	
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Получить запрос из кода 1С";
		НоваяСтрока.Имя      = "КодЗапросПолучитьЗапрос" + гРежимыПолученияЗапросаИзКода().СОбработкой;
		НоваяСтрока.Действие = "КодЗапросПолучитьЗапрос";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("create_from_code1");
		НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._1, Истина,, Истина);
	
		НоваяСтрока          = КореньМеню.Строки.Добавить();
		НоваяСтрока.Название = "Получить запрос из кода 1С (без обработки)";
		НоваяСтрока.Имя      = "КодЗапросПолучитьЗапрос" + гРежимыПолученияЗапросаИзКода().БезОбработки;
		НоваяСтрока.Действие = "КодЗапросПолучитьЗапрос";
		НоваяСтрока.Картинка = ПолучитьВнешнююКартинку("create_from_code2");
		НоваяСтрока.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._2, Истина,, Истина);
		
	КонецЕсли;
	
	Если ВВидеСписка Тогда 
		Возврат ПолучитьМенюСписком(ВеткаДереваМеню)
	Иначе
		Возврат ВеткаДереваМеню;	
	КонецЕсли;
	
КонецФункции // гПолучитьМеню()

/////////////////////////////////////////
// РаботаСМетаданными

Функция гСписокОбъектовМетаданныхИзТекста(Текст, ИмяМетаданного = Неопределено) Экспорт
	
	лСписокОбъектовМетаданных = Новый СписокЗначений;
	
	//Получаем регистр из запроса
	Если гИнициализацияVBScript() тогда
		
		лНастройкиДляПарсингаТекста = Новый СписокЗначений;
		
		Если ИмяМетаданного = Неопределено ИЛИ Найти(ИмяМетаданного, "РегистрыСведений") > 0 Тогда 
			лНастройкиДляПарсингаТекста.Добавить(ИмяМетаданного, "регистрсведений");
		КонецЕсли;
		
		Если ИмяМетаданного = Неопределено ИЛИ Найти(ИмяМетаданного, "Справочники") > 0 Тогда 
			лНастройкиДляПарсингаТекста.Добавить(ИмяМетаданного, "справочник");
		КонецЕсли;
		
		Если ИмяМетаданного = Неопределено ИЛИ Найти(ИмяМетаданного, "РегистрыНакопления") > 0 Тогда
			лНастройкиДляПарсингаТекста.Добавить(ИмяМетаданного, "регистрнакопления");
		КонецЕсли;
		
		Если ИмяМетаданного = Неопределено ИЛИ Найти(ИмяМетаданного, "Документы") > 0 Тогда
			лНастройкиДляПарсингаТекста.Добавить(ИмяМетаданного, "документ");
		КонецЕсли;
		
		Для каждого лНастройка Из лНастройкиДляПарсингаТекста Цикл
			
			RegExp.Pattern = RegExp.Pattern + ?(RegExp.Pattern = "", "", "|") + лНастройка.Представление + "\.[a-zA-Zа-яА-я_]+[a-zA-Zа-яА-я_0-9]*";
			
		КонецЦикла; 
		
		Массив = RegExp.Execute(НРег(Текст));
		
		Для каждого текЭлемент Из Массив Цикл
			
			Если Найти(текЭлемент.Value, "документ.") > 0 Тогда 
				текНазвание = СтрЗаменить(текЭлемент.Value, "документ.", "");
				текЗначение = Документы[текНазвание];
				Если лСписокОбъектовМетаданных.НайтиПоЗначению(текЗначение) = Неопределено Тогда 
					лСписокОбъектовМетаданных.Добавить(текЗначение, Метаданные.НайтиПоТипу(Тип(текЗначение)).Синоним,, БиблиотекаКартинок.Документ);
				КонецЕсли;
			ИначеЕсли Найти(текЭлемент.Value, "справочник.") > 0 Тогда 
				текНазвание = СтрЗаменить(текЭлемент.Value, "справочник.", "");
				текЗначение = Справочники[текНазвание];
				Если лСписокОбъектовМетаданных.НайтиПоЗначению(текЗначение) = Неопределено Тогда 
					лСписокОбъектовМетаданных.Добавить(текЗначение, Метаданные.НайтиПоТипу(Тип(текЗначение)).Синоним,, БиблиотекаКартинок.Справочник);
				КонецЕсли;
			ИначеЕсли Найти(текЭлемент.Value, "регистрсведений.") > 0 Тогда 
				текНазвание = СтрЗаменить(текЭлемент.Value, "регистрсведений.", "");
				Если Метаданные.РегистрыСведений.Найти(текНазвание) <> Неопределено Тогда 
					текЗначение = РегистрыСведений[текНазвание]; 
					Если лСписокОбъектовМетаданных.НайтиПоЗначению(текЗначение) = Неопределено Тогда 
						лСписокОбъектовМетаданных.Добавить(текЗначение, Метаданные.НайтиПоТипу(Тип(текЗначение)).Синоним,, БиблиотекаКартинок.РегистрСведений);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Найти(текЭлемент.Value, "регистрнакопления.") > 0 Тогда 
				текНазвание = СтрЗаменить(текЭлемент.Value, "регистрнакопления.", "");
				текЗначение = РегистрыНакопления[текНазвание];
				Если лСписокОбъектовМетаданных.НайтиПоЗначению(текЗначение) = Неопределено Тогда 
					лСписокОбъектовМетаданных.Добавить(текЗначение, Метаданные.НайтиПоТипу(Тип(текЗначение)).Синоним,, БиблиотекаКартинок.РегистрНакопления);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат лСписокОбъектовМетаданных
	
КонецФункции // гСписокОбъектовМетаданныхИзТекста

Функция гПолучитьСписокОбъектовМетаданныхИзТекста(ИсходныйТекст, ФильтрМетаданных, ЗначениеПоУмолчанию) Экспорт
	
	СписокОбъектовМетаданных = Новый СписокЗначений;
	
	лМассивМетаданных = СтрокаВМассив(ФильтрМетаданных);
	
	Для каждого лИмяОбъектаМетаданных Из лМассивМетаданных Цикл
		
		Для каждого лОбъектМетаданных Из Метаданные[лИмяОбъектаМетаданных] Цикл
			СписокОбъектовМетаданных.Добавить(НРег(лИмяОбъектаМетаданных + "." + лОбъектМетаданных.Имя), лОбъектМетаданных.Синоним,, ПолучитьКартинкуПоМетаданному(лИмяОбъектаМетаданных));
		КонецЦикла; 
		
	КонецЦикла; 
	
	гСписокОбъектовМетаданныхИзТекста = гСписокОбъектовМетаданныхИзТекста(ИсходныйТекст, ФильтрМетаданных);
	
	Если гСписокОбъектовМетаданныхИзТекста.Количество() = 0 Тогда 
		лРегистрИзЗапроса = Неопределено
	Иначе
		
		ЗначениеПоУмолчанию = НРег(ПолучитьИмяБазовогоТипаПоТипуОбъекта(Тип(гСписокОбъектовМетаданныхИзТекста[0].Значение)) + 
		"." + 
		Метаданные.НайтиПоТипу(Тип(гСписокОбъектовМетаданныхИзТекста[0].Значение)).Имя);
		
	КонецЕсли;
	
	Возврат СписокОбъектовМетаданных 
	
КонецФункции // гПолучитьСписокОбъектовМетаданныхИзТекста()

Функция гПолучитьСтруктуруДанныхПоОбъектуМетаданных(ПолноеИмяОбъектаМетаданных) Экспорт
	
	лПутьКМетаданному = СтрокаВМассив(ПолноеИмяОбъектаМетаданных, ".");
	
	лМетаданное = Метаданные[лПутьКМетаданному[0]][лПутьКМетаданному[1]];
	
	Если Найти(НРег(ПолноеИмяОбъектаМетаданных), "регистры") = 1 Тогда 
		
		лСтруктураПараметров = Новый Структура("Непериодический, Измерения, Ресурсы, Реквизиты", Ложь, Новый Массив, Новый Массив, Новый Массив);
		Если лМетаданное.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда 
			лСтруктураПараметров.Вставить("Регистратор", Неопределено);
		КонецЕсли;
		
		лСтруктураПараметров.Непериодический = (лМетаданное.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
		
		Для каждого лИзмерение Из лМетаданное.Измерения Цикл
			лСтруктураПараметров.Измерения.Добавить(лИзмерение.Имя);
		КонецЦикла; 
		
		Для каждого лРесурс Из лМетаданное.Ресурсы Цикл
			лСтруктураПараметров.Ресурсы.Добавить(лРесурс.Имя);
		КонецЦикла; 
		
		Для каждого лРеквизит Из лМетаданное.Реквизиты Цикл
			лСтруктураПараметров.Реквизиты.Добавить(лРеквизит.Имя);
		КонецЦикла; 
		
	ИначеЕсли  Найти(НРег(ПолноеИмяОбъектаМетаданных), "документы") = 1 Тогда 
		
		лСтруктураПараметров = Новый Структура("ПроведениеЗапретить, Реквизиты", Ложь, Новый Массив, Новый Массив, Новый Массив);
		
		лСтруктураПараметров.ПроведениеЗапретить = (лМетаданное.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить);
		
		Для каждого лРеквизит Из лМетаданное.Реквизиты Цикл
			лСтруктураПараметров.Реквизиты.Добавить(лРеквизит.Имя);
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат лСтруктураПараметров
	
КонецФункции // гПолучитьСтруктуруДанныхПоОбъектуМетаданных()


/////////////////////////////////////////
// Формирование и парсинг кода

Функция гПолучитьПредустановленныйКодВставитьЦикл(СписокКолонокТаблицыСРезультатомЗапроса, ИмяРеквизитаТаблицыРезультата) Экспорт
	
	лТекстПредустановленногоКода = "Для каждого СтрокаЗапроса из " + ИмяРеквизитаТаблицыРезультата + " Цикл";
	
	Для каждого лКолонкаЗапроса Из СписокКолонокТаблицыСРезультатомЗапроса Цикл
		Если ТипЗнч(СписокКолонокТаблицыСРезультатомЗапроса) = Тип("СписокЗначений") Тогда 
			лСтруктураКолонки = лКолонкаЗапроса.Значение;
		Иначе
			лСтруктураКолонки = лКолонкаЗапроса;
		КонецЕсли;
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
		|	//СтрокаЗапроса." + лСтруктураКолонки.Имя;
	КонецЦикла; 
	
	лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
	|КонецЦикла;
	|
	|Сообщить(""Обработка закончена."", СтатусСообщения.Важное);";
	
	Возврат лТекстПредустановленногоКода
	
КонецФункции // гПолучитьПредустановленныйКодВставитьЦикл()

Функция гПолучитьПредустановленныйКодРедактироватьРегистрСведений(ПолноеИмяОбъектаМетаданных, ТекстЗапроса, ИмяРеквизитаТаблицыРезультата) Экспорт
	
	лСтруктураДанныхПоРегистру = гПолучитьСтруктуруДанныхПоОбъектуМетаданных(ПолноеИмяОбъектаМетаданных);
	 
	Если лСтруктураДанныхПоРегистру = Неопределено Тогда 
		Возврат "";
	КонецЕсли;
	
	лТекстПредустановленногоКода = 
	"лПозиция = 0;	
	|
	|Для каждого СтрокаЗапроса из " + ИмяРеквизитаТаблицыРезультата + " Цикл
	|	
	|	лПозиция = лПозиция + 1;
	|
	|	лМенеджерЗаписей = " + ПолноеИмяОбъектаМетаданных + ".СоздатьМенеджерЗаписи();
	|
	|";
	
	#Если НаКлиенте Тогда
	лТекстПредустановленногоКода = СтрЗаменить(лТекстПредустановленногоКода, "лПозиция = лПозиция + 1;", "ОбработкаПрерыванияПользователя();
	|	лПозиция = лПозиция + 1;
	|	Состояние(""Выполнено "" + Окр(лПозиция / " + ИмяРеквизитаТаблицыРезультата + ".Количество() * 100) + ""%"");");
	#КонецЕсли
	
	Если Не лСтруктураДанныхПоРегистру.Непериодический Тогда 
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + Символы.ПС;
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + "	лМенеджерЗаписей.Период = СтрокаЗапроса.Период;
		|";
	КонецЕсли;
	
	Если лСтруктураДанныхПоРегистру.Измерения.Количество() > 0 Тогда 
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
		|	// измерения
		|";
		Для каждого ТекИзмерение Из лСтруктураДанныхПоРегистру.Измерения Цикл
			лТекстПредустановленногоКода = лТекстПредустановленногоКода + "	лМенеджерЗаписей." + ТекИзмерение  + " = СтрокаЗапроса." + ТекИзмерение + ";
			|";
		КонецЦикла; 
	КонецЕсли;
	
	Если лСтруктураДанныхПоРегистру.Ресурсы.Количество() > 0 Тогда 
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
		|	// ресурсы
		|";
		Для каждого ТекРесурс Из лСтруктураДанныхПоРегистру.Ресурсы Цикл
			лТекстПредустановленногоКода = лТекстПредустановленногоКода + "	лМенеджерЗаписей." + ТекРесурс  + " = СтрокаЗапроса." + ТекРесурс + ";
			|";
		КонецЦикла; 
	КонецЕсли;
	
	Если лСтруктураДанныхПоРегистру.Реквизиты.Количество() > 0 Тогда 
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
		|	// реквизиты
		|";
		Для каждого ТекРеквизит Из лСтруктураДанныхПоРегистру.Реквизиты Цикл
			лТекстПредустановленногоКода = лТекстПредустановленногоКода + "	лМенеджерЗаписей." + ТекРеквизит  + " = СтрокаЗапроса." + ТекРеквизит + ";
			|";
		КонецЦикла; 
	КонецЕсли;
	
	Если лСтруктураДанныхПоРегистру.Свойство("Регистратор") Тогда 
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
		|	// Регистратор
		|	лМенеджерЗаписей.Регистратор = СтрокаЗапроса.Регистратор;
		|";
	КонецЕсли;
	
	лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
	|	//лМенеджерЗаписей.Записать();
	|	//лМенеджерЗаписей.Удалить();
	|
	|КонецЦикла;
	|
	|Сообщить(""Обработка закончена."", СтатусСообщения.Важное);";
		
	Возврат лТекстПредустановленногоКода;
	
КонецФункции // гПолучитьПредустановленныйКодРедактироватьРегистрСведений()

Функция гПолучитьПредустановленныйКодРедактироватьДокумент(ПолноеИмяОбъектаМетаданных, ТекстЗапроса, ИмяРеквизитаТаблицыРезультата) Экспорт
	
	лСтруктураДанныхПоОбъектуМетаданных = гПолучитьСтруктуруДанныхПоОбъектуМетаданных(ПолноеИмяОбъектаМетаданных);
	 
	Если лСтруктураДанныхПоОбъектуМетаданных = Неопределено Тогда 
		Возврат "";
	КонецЕсли;
	
	лТекстПредустановленногоКода = 
	"лПозиция = 0;	
	|
	|Для каждого СтрокаЗапроса из " + ИмяРеквизитаТаблицыРезультата + " Цикл
	|	
	|	ОбработкаПрерыванияПользователя();
	|	лПозиция = лПозиция + 1;
	|	Состояние(""Выполнено "" + Окр(лПозиция / " + ИмяРеквизитаТаблицыРезультата + ".Количество() * 100) + ""%"");
	|	
	|	лОбъект = СтрокаЗапроса.Ссылка.ПолучитьОбъект();";
	
	Если лСтруктураДанныхПоОбъектуМетаданных.Реквизиты.Количество() > 0 Тогда 
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + Символы.ПС;
		лТекстПредустановленногоКода = лТекстПредустановленногоКода + "	//реквизиты" + Символы.ПС;
		Для каждого ТекРеквизит Из лСтруктураДанныхПоОбъектуМетаданных.Реквизиты Цикл
			лТекстПредустановленногоКода = лТекстПредустановленногоКода + "	лОбъект." + ТекРеквизит  + " = СтрокаЗапроса." + ТекРеквизит + ";" + Символы.ПС;
		КонецЦикла; 
	КонецЕсли;
	
	лТекстПредустановленногоКода = лТекстПредустановленногоКода + "
	|	//лОбъект.ОбменДанными.Загрузка = Истина;
	|	лРежимЗаписиДокумента = РежимЗаписиДокумента.Запись;
	|	//лРежимЗаписиДокумента = РежимЗаписиДокумента.ОтменаПроведения;
	|	//лРежимЗаписиДокумента = РежимЗаписиДокумента.Проведение;
	|	лРежимПроведенияДокумента = РежимПроведенияДокумента.Неоперативный;
	|	//лРежимПроведенияДокумента = РежимПроведенияДокумента.Оперативный;
	|	//лОбъект.Записать(лРежимЗаписиДокумента, лРежимПроведенияДокумента);
	|
	|КонецЦикла;
	|
	|Сообщить(""Обработка закончена."", СтатусСообщения.Важное);";
	
	Возврат лТекстПредустановленногоКода;
	
КонецФункции // гПолучитьПредустановленныйКодРедактироватьДокумент()

Функция гСформироватьКодЗапросаДля1С(ТекстЗапроса, ПараметрыЗапроса, Режим, ЗначениеИзстрокиВнутр = Ложь) Экспорт

	лРасчетныеПараметрыЗапроса = гПолучитьПараметрыЗапроса(ТекстЗапроса, True);
	
	Результат = "";
	
	Результат = "Запрос = Новый Запрос;" + Символы.ПС;
	Результат = Результат + "Запрос.Текст =" + Символы.ПС;
	
	//Символ(34)  - " (кавычки)
	//Символ(13)  - cr (возврат коретки)
	текПервыйРаз = Истина;
	Для Сч = 1 по СтрЧислоСтрок(ТекстЗапроса) цикл
		ТекСтр = СтрЗаменить(СтрПолучитьСтроку(ТекстЗапроса, Сч), Символ(13), "");
		ТекСтр = СтрЗаменить(ТекСтр,Символ(34),Символ(34) + Символ(34));
		Если Лев(СокрЛП(ТекСтр),1)<> "|" Тогда
			Результат = Результат + ?(НЕ текПервыйРаз, Символы.ПС, "") + ?(текПервыйРаз, """", "|") + ТекСтр;
			текПервыйРаз = Ложь;
		КонецЕсли;
	КонецЦикла;
	Результат = Результат  + """;" + Символы.ПС;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		
		Для Каждого ТекПараметрЗапроса Из лРасчетныеПараметрыЗапроса Цикл
			СтрокаСПараметром = ПараметрыЗапроса.Получить(ТекПараметрЗапроса.Имя);
			
			лЗначениеПараметра = ?(ЗначениеИзстрокиВнутр, ЗначениеИзстрокиВнутр(СтрокаСПараметром.Значение), СтрокаСПараметром.Значение);
			
			Если СтрокаСПараметром = Неопределено Тогда
				Сообщить("Не задан параметр """ + ТекПараметрЗапроса.Имя + """");
			ИначеЕсли ТипЗнч(лЗначениеПараметра) = Тип("СписокЗначений") Тогда
				ЗначениеПараметра = "кзСписок" + ТекПараметрЗапроса.Имя;
				Результат = Результат + ЗначениеПараметра + " = Новый СписокЗначений;" + Символы.ПС;
				Для каждого ТекЗначениеСписка Из лЗначениеПараметра Цикл
					Результат = Результат + "кзСписок" + ТекПараметрЗапроса.Имя + ".Добавить(" + гПодставитьПараметр(ТекЗначениеСписка.Значение) + ");" + Символы.ПС;
				КонецЦикла;
			Иначе
				ЗначениеПараметра = гПодставитьПараметр(лЗначениеПараметра);
			КонецЕсли;
			Результат = Результат + "Запрос.УстановитьПараметр(""" + ТекПараметрЗапроса.Имя + """, " +
				?(СтрокаСПараметром = Неопределено, "", ЗначениеПараметра) + ");" + Символы.ПС;
		КонецЦикла;
		
		Результат = Результат + Символы.ПС;
		
	Конецесли;
	
	Если Найти(Режим, гРежимыФормированияКодаИзТекстаЗапроса().Выборка) > 0 Тогда
		Результат = Результат + "Результат = Запрос.Выполнить();" + Символы.ПС;
		Результат = Результат + "Выборка = Результат.Выбрать();" + Символы.ПС;
		Результат = Результат + "Пока Выборка.Следующий() Цикл" + Символы.ПС;
		Результат = Результат + "КонецЦикла;" + Символы.ПС;
	ИначеЕсли Найти(Режим, гРежимыФормированияКодаИзТекстаЗапроса().ТЗ) > 0 Тогда
		Результат = Результат + "Результат = Запрос.Выполнить();" + Символы.ПС;
		Результат = Результат + "Выборка = Результат.Выгрузить();" + Символы.ПС;
		Результат = Результат + "Для каждого СтрокаТЗ Из Выборка Цикл" + Символы.ПС;
		Результат = Результат + "КонецЦикла;" + Символы.ПС;
	ИначеЕсли Найти(Режим, гРежимыФормированияКодаИзТекстаЗапроса().ОбработкаРезультата) > 0 Тогда
		Результат = "//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			|// Данный фрагмент построен конструктором.
			|// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			|" + Результат;			
		Результат = Результат + "Результат = Запрос.Выполнить();" + Символы.ПС;
		Результат = Результат + "Выборка = Результат.Выбрать();" + Символы.ПС;
		Результат = Результат + "Пока Выборка.Следующий() Цикл" + Символы.ПС;
		Результат = Результат + "КонецЦикла;" + Символы.ПС;		
		Результат = Результат + "//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // гСформироватьКодЗапросаДля1С()
 

/////////////////////////////////////////
// РаботаСКартинками

Функция гИзвлечьКартинкиОбработкиНаСервере() Экспорт

	лВременныйФайл = Новый Файл(ПолучитьИмяВременногоФайла());
	лПутьККартинке = лВременныйФайл.Путь + гПреобразоватьВПравильноеНазвание(гНазваниеОбработки() + "\" + гСеансовыеДанные.ИдентификаторСеанса, "\");
	Если СоздатьКаталогРекурсивно(лПутьККартинке) Тогда 
		лИмяАрхиваСИконками = лПутьККартинке + "\ico.zip";
		ПолучитьМакет("БиблиотекаКартинок").Записать(лИмяАрхиваСИконками);
		лАрхив = Новый ЧтениеZipФайла(лИмяАрхиваСИконками);
		лАрхив.ИзвлечьВсе(лПутьККартинке);
        лАрхив.Закрыть();
	Иначе
		лПутьККартинке = Неопределено
	КонецЕсли;
	
	Возврат лПутьККартинке

КонецФункции // гИзвлечьКартинкиОбработкиНаСервере()

Функция ПолучитьКартинку(ИмяКартинки, Локальная = Ложь) Экспорт
	
	Перем Результат;
	
	Если Локальная Тогда 
		Попытка
			Возврат БиблиотекаКартинок[ИмяКартинки];
		Исключение
		КонецПопытки;
	Иначе
		
		Если Не гСеансовыеДанные.КЭШ.Свойство("Картинки_" + ИмяКартинки, Результат) Тогда 
			Результат = ПолучитьВнешнююКартинку(ИмяКартинки);
		КонецЕсли;		
		
		гСеансовыеДанные.КЭШ.Вставить("Картинки_" + ИмяКартинки, Результат);
		
		Возврат Результат
		
	КонецЕсли;
	
КонецФункции // ПолучитьКартинку

Функция ПолучитьВнешнююКартинку(ИмяКартинки, ВернутьАдрес = Ложь) Экспорт
	
	лПутьККартинке = гСеансовыеДанные.ПутьККартинкам;
	
	Попытка		
		лПолныйПутьККартинке = лПутьККартинке + "\" + ИмяКартинки + ".png";
		Если ВернутьАдрес Тогда 
			Результат = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(лПолныйПутьККартинке))
		Иначе 
			Результат = Новый Картинка(лПолныйПутьККартинке);
		КонецЕсли;		
	Исключение
		Результат = Неопределено;
	КонецПопытки; 
	
	Возврат Результат
	
КонецФункции

Функция ПолучитьКартинкуПоМетаданному(ИмяМетаданного)
	
	Если ИмяМетаданного = "Константы" тогда
		Результат = БиблиотекаКартинок.Константа;
	ИначеЕсли ИмяМетаданного = "Справочники" тогда
		Результат = БиблиотекаКартинок.Справочник;
	ИначеЕсли ИмяМетаданного = "Документы" тогда
		Результат = БиблиотекаКартинок.Документ;
	ИначеЕсли ИмяМетаданного = "ЖурналыДокументов" тогда
		Результат = БиблиотекаКартинок.ЖурналДокументов;
	ИначеЕсли ИмяМетаданного = "Перечисления" тогда
		Результат = БиблиотекаКартинок.Перечисление;
	ИначеЕсли ИмяМетаданного = "ПланыВидовРасчета" тогда
		Результат = БиблиотекаКартинок.ПланВидовРасчета;
	ИначеЕсли ИмяМетаданного = "ПланыВидовХарактеристик" тогда
		Результат = БиблиотекаКартинок.ПланВидовХарактеристик;
	ИначеЕсли ИмяМетаданного = "ПланыОбмена" тогда
		Результат = БиблиотекаКартинок.ПланОбмена;
	ИначеЕсли ИмяМетаданного = "ПланыСчетов" тогда
		Результат = БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли ИмяМетаданного = "РегистрыБухгалтерии" тогда
		Результат = БиблиотекаКартинок.РегистрБухгалтерии;
	ИначеЕсли ИмяМетаданного = "РегистрыНакопления" тогда
		Результат = БиблиотекаКартинок.РегистрНакопления;
	ИначеЕсли ИмяМетаданного = "РегистрыРасчета" тогда
		Результат = БиблиотекаКартинок.РегистрРасчета;
	ИначеЕсли ИмяМетаданного = "РегистрыСведений" тогда
		Результат = БиблиотекаКартинок.РегистрСведений;
	ИначеЕсли ИмяМетаданного = "Последовательности" тогда
		Результат = Новый Картинка(ПолучитьМакет("Картинка_Последовательности"), Истина);
	ИначеЕсли ИмяМетаданного = "КритерииОтбора" тогда
		Результат = БиблиотекаКартинок.КритерийОтбора;
	ИначеЕсли ИмяМетаданного = "БизнесПроцессы" тогда
		Результат = БиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли ИмяМетаданного = "Задачи" тогда
		Результат = БиблиотекаКартинок.Задача;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции // ПолучитьКартинкуПоМетаданному


/////////////////////////////////////////
// РаботаССообщениями

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  гПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция гПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = гПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция гПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Процедура гПоказатьОшибкуНаСервере(ТекстСообщения) Экспорт
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);
КонецПроцедуры

/////////////////////////////////////////
// СервисныеФункции

Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере    = "";
	ИмяСкрипта       = "";
	ПараметрыСкрипта = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
		Позиция = Найти(ПутьНаСервере, "?");
		Если Позиция > 0 Тогда
			ИмяСкрипта       = Лев(ПутьНаСервере, Позиция - 1);
			ПараметрыСкрипта = "&" + Сред(ПутьНаСервере, Позиция + 1);
		КонецЕсли;
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема"           , Схема);
	Результат.Вставить("Логин"           , Логин);
	Результат.Вставить("Пароль"          , Пароль);
	Результат.Вставить("ИмяСервера"      , ИмяСервера);
	Результат.Вставить("Хост"            , Хост);
	Результат.Вставить("Порт"            , ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере"   , ПутьНаСервере);
	Результат.Вставить("ИмяСкрипта"      , ИмяСкрипта);
	Результат.Вставить("ПараметрыСкрипта", ПараметрыСкрипта);
	
	Возврат Результат;
	
КонецФункции

// Возвращает вид границы из ее строкового представления.
//
// Параметры:
//	Вид - строковое представление вида границы.
//
Функция гОпределениеВидаГраницы(Вид) Экспорт
	Если ВРег(Вид) = "ИСКЛЮЧАЯ" Тогда
		Результат = ВидГраницы.Исключая;
	Иначе
		Результат = ВидГраницы.Включая;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // гОпределениеВидаГраницы()

Функция ЭтоСсылка(Тип)
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
	ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
	ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

Функция ПреобразоватьВUniCode(Знач СтрокаAnsi)
	
	Возврат СтрЗаменить(СтрокаAnsi, " ", "%20")
	
КонецФункции // ПреобразоватьВUniCode

Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта)
	
	
	Если ТипОбъекта = Тип("ОписаниеТипов") Тогда 
		Возврат "ОписаниеТипов"
	Иначе     		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		Если МетаданныеТипа = Неопределено Тогда
			
			Возврат "УдалениеОбъекта";
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
			
			Возврат "РегистрыСведений";
			
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
			
			Возврат "Документы";
			
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			
			Возврат "Справочники";	
			
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеТипа) Тогда
			
			Возврат "РегистрыНакопления";	
			
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеТипа) Тогда
			
			Возврат "РегистрыБухгалтерии";	
			
		ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
			
			Возврат "Перечисления";
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
			
			Возврат "ПланыВидовХарактеристик";
			
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
			
			Возврат "ПланыВидовРасчета";
			
		ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеТипа) Тогда
			
			Возврат "ПланыОбмена";
			
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
			
			Возврат "ПланыСчетов";
			
		ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеТипа) Тогда
			
			Возврат "Задачи";
			
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеТипа) Тогда
			
			Возврат "БизнесПроцессы";
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СоздатьКаталогРекурсивно(Путь)
	
	Если Путь = "" Тогда 
		Возврат Ложь
	КонецЕсли;
	
	// рекурсивно проверем каталоги с права
	лФайл = Новый Файл(Путь);
	Если лФайл.Существует() Тогда 
		Возврат Истина
	КонецЕсли;
	
	лМассив     = СтрокаВМассив(Путь, "\");
	лПодкаталог = "";
	Сч          = 0;
	Пока Сч < лМассив.Количество() - 1 Цикл
		лПодкаталог = лПодкаталог + ?(лПодкаталог = "", "", "\") + лМассив[Сч];
		Сч = Сч + 1
	КонецЦикла;
	
	СоздатьКаталогРекурсивно(лПодкаталог);
	
	СоздатьКаталог(Путь);
	
	лФайл = Новый Файл(Путь);                                                                             
	Возврат лФайл.Существует();
	
КонецФункции // СоздатьКаталогРекурсивно()

Функция СтрокаВМассив(ИсходнаяСтрока, Разделитель = ",", ДобавитьИсходнуюСтрокуВКонецМассива = Ложь, РазмерМассива = 0)
	
	Массив = "Массив = Новый Массив;Массив.Добавить("""+СтрЗаменить(ИсходнаяСтрока,Разделитель,""");Массив.Добавить(""")+""");";
	Выполнить(Массив); 
	
	УдаленныйФрагмент = "";
	
	Если РазмерМассива > 0 Тогда 
		Пока Массив.Количество() > РазмерМассива Цикл 
			УдаленныйФрагмент = Массив[Массив.Количество() - 1] + ?(УдаленныйФрагмент = "", "", Разделитель) + УдаленныйФрагмент;
			Массив.Удалить(Массив.Количество() - 1);
		КонецЦикла;
		
		Если ДобавитьИсходнуюСтрокуВКонецМассива И УдаленныйФрагмент <> "" Тогда 
			Массив.Добавить(УдаленныйФрагмент);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Массив
	
КонецФункции // СтрокаВМассив()

Функция гПолучитьПараметрыЗапроса(ТекстЗапроса, Безсообщений = False) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Если Не Безсообщений Тогда
			Сообщить("Ошибка в запросе: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Новый СписокЗначений;
	КонецПопытки;
	
	Возврат ПараметрыЗапроса                         
	
КонецФункции // гПолучитьПараметрыЗапроса()

Функция гПодставитьПараметр(Параметр) Экспорт
	
	Результат = Параметр;
	Если Параметр<> Неопределено Тогда
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "Справочники." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "Справочники." + ИмяМетаданного + "." + 
						Справочники[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.Справочники[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "Справочники." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "Справочники." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
            ИмяМетаданного = Параметр.Метаданные().Имя; 
            Если Параметр.Пустая() Тогда
                Результат = "Документы." + ИмяМетаданного + ".ПустаяСсылка()";
            Иначе    
                Результат = "Документы." + ИмяМетаданного + ".НайтиПоНомеру(""" + Параметр.Номер + """)";
            КонецЕсли;
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + "." + 
						ПланыВидовХарактеристик[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.ПланыВидовХарактеристик[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "ПланыВидовРасчета." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "ПланыВидовРасчета." + ИмяМетаданного + "." + 
						ПланыВидовРасчета[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.ПланыВидовРасчета[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "ПланыВидовРасчета." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "ПланыВидовРасчета." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "Перечисления." + ИмяМетаданного + ".ПустаяСсылка()"
			Иначе    
				Результат = "Перечисления." + ИмяМетаданного + "." + Метаданные.Перечисления[ИмяМетаданного].ЗначенияПеречисления[Перечисления[ИмяМетаданного].Индекс(Параметр)].Имя
			КонецЕсли;
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "ПланыСчетов." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "ПланыСчетов." + ИмяМетаданного + "." + 
						ПланыСчетов[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.ПланыСчетов[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "ПланыСчетов." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "ПланыСчетов." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Дата") Тогда
				Результат = "Дата(""" + Параметр + """)"
        ИначеЕсли ТипЗнч(Параметр) = Тип("МоментВремени") Тогда
            Результат = "Новый МоментВремени(Дата(""" + Параметр.Дата + """), " + гПодставитьПараметр(Параметр.Ссылка) + ")";   			
		ИначеЕсли ТипЗнч(Параметр) = Тип("ВидДвиженияНакопления") Тогда
				Результат = "ВидДвиженияНакопления." + Параметр
		ИначеЕсли ТипЗнч(Параметр) = Тип("Строка") Тогда
				Результат = """" + Параметр + """"
		ИначеЕсли ТипЗнч(Параметр) = Тип("Число") Тогда
				Результат = Формат(Параметр, "ЧГ = ")
		КонецЕсли;

	КонецЕсли;
		
	Возврат Результат 	
КонецФункции // гПодставитьПараметр()

&НаКлиенте
Процедура гОбработкаДействийЗаполнитьПараметрыИзЗапроса(ФормаПараметров) Экспорт
	
	лТекстЗапроса = ФормаПараметров.ВладелецФормы.ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Если ПустаяСтрока(лТекстЗапроса) Тогда 
		ПоказатьПредупреждение(,"Не заполнен текст запроса!", 10);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(лТекстЗапроса);
	
	Попытка
		лПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Сообщить("Некорректный запрос: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	//Добавим выбор параметров для ввода
	СписокПараметров = Новый СписокЗначений;
	Для Каждого ПараметрЗапроса Из лПараметрыЗапроса Цикл
		СписокПараметров.Добавить(ПараметрЗапроса.ТипЗначения, ПараметрЗапроса.Имя, True);
	КонецЦикла; 
	
	Для каждого ПараметрЗапроса Из СписокПараметров Цикл
		
		лИмяПараметра     =  ПараметрЗапроса.Представление;		
		лСтрокаПараметров = гПолучитьЗначениеСпискаБезУчетаРегистра(лИмяПараметра, ФормаПараметров.ПараметрыСписок);
		Если лСтрокаПараметров = Неопределено Тогда
			лСтрокаПараметров     = ФормаПараметров.ПараметрыСписок.Добавить();
			лСтрокаПараметров.Имя = лИмяПараметра;
			лСтрокаПараметров.Тип = 1;
			лСтрокаПараметров.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли; 
		
		Если лСтрокаПараметров.Тип = 1 Тогда //для списка и ТЗ не приводим
			лСтрокаПараметров.Значение = ПараметрЗапроса.Значение.ПривестиЗначение(лСтрокаПараметров.Значение);
		КонецЕсли;  	
		
	КонецЦикла; 
	
	Если не ФормаПараметров.Открыта() тогда
		ФормаПараметров.Открыть();
	КонецЕсли;
	
	ФормаПараметров.Активизировать();
	
КонецПроцедуры // гОбработкаДействийЗаполнитьПараметрыИзЗапроса()

/////////////////////////////////////////
// Неиспользуемые

//Функция ОтборПоПостроителюЗапроса(Параметры)
//	
//	//Параметры = {ПараметрыЗапросов,Отбор}
//	
//	лПостроительОтчета                = Новый ПостроительОтчета;
//	лПостроительОтчета.ИсточникДанных = Параметры.ИсточникДанных;
//	
//	Если Параметры.Свойство("ПараметрыЗапросов") тогда
//		
//		Для Каждого ТекПараметр Из Параметры.ПараметрыЗапросов Цикл
//			
//			лОтбор = лПостроительОтчета.Отбор;
//			Если лОтбор.Найти(ТекПараметр.Представление) = Неопределено Тогда
//				лОтбор.Добавить(ТекПараметр.Представление);
//			КонецЕсли;
//			
//			Если ТипЗнч(ТекПараметр.Значение) = Тип("СписокЗначений") Тогда
//				лОтбор[ТекПараметр.Представление].ВидСравнения = ВидСравнения.ВСписке;
//			Иначе
//				лОтбор[ТекПараметр.Представление].ВидСравнения = ВидСравнения.Равно;
//			КонецЕсли;
//			
//			лОтбор[ТекПараметр.Представление].Значение      = ТекПараметр.Значение;
//			лОтбор[ТекПараметр.Представление].Использование = Истина;
//			
//		КонецЦикла; 
//	КонецЕсли;
//	
//	лПостроительОтчета.Выполнить();
//	
//	Возврат лПостроительОтчета.Результат.Выгрузить()
//	
//КонецФункции // ОтборПоПостроителюЗапроса()

//Функция ПолучитьОписаниеПроизвольногоТипа(Типы)
//	
//	лМассив = Новый Массив;
//	
//	Если ТипЗнч(Типы) = Тип("СписокЗначений") и Типы.Количество() > 0 тогда
//		
//		Для Каждого ТекущийТип Из Типы Цикл
//			лМассив.Добавить(ТекущийТип.Значение);
//		КонецЦикла; 
//		
//		Возврат Новый ОписаниеТипов(лМассив, , , );
//		
//	Иначе
//		
//		лМассив.Добавить(Типы);
//		Возврат Новый ОписаниеТипов(лМассив, , , );
//		
//	КонецЕсли;
//	
//КонецФункции	// ПолучитьОписаниеТиповДаты() 

//Функция НайтиПоПредставлению(Список, Представление, ВернутьЗначение = Неопределено)
//	Для каждого ЭлементСписка из Список Цикл
//		Если ЭлементСписка.Представление = Представление тогда
//			Если ВернутьЗначение = Неопределено тогда
//				Возврат True
//			Иначе
//				Возврат ЭлементСписка.Значение
//			КонецЕсли;
//		Конецесли;
//	КонецЦикла;
//	Возврат False
//КонецФункции

//// Возвращает строковое представление типа по значению.
////
//// Параметры:
////	Значение - передаваемое значение.
////
//Функция ИмяТипаИзЗначения(Значение) Экспорт
//	Если ТипЗнч(Значение) = Тип("Строка") Тогда
//		ИмяТипа = "Строка";
//	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 	
//		ИмяТипа = "Число";
//	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда 	
//		ИмяТипа = "Булево";
//	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда 		
//		ИмяТипа = "Дата";
//	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда 		
//		ИмяТипа = "МоментВремени";	
//	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда 		
//		ИмяТипа = "Строка";		
//	Иначе	
//		ИмяТипа = xmlТип(ТипЗнч(Значение)).ИмяТипа;
//	КонецЕсли;	
//	
//	Возврат ИмяТипа;
//КонецФункции	




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

гСтруктураТЗДляВременныхТаблиц = Новый Структура;
гСоответствиеЗапросы           = Новый Соответствие;