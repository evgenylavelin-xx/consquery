////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяСтрока; // текущая(прошлая) строка списка вариантов кода.

Перем мИмяРеквизитаТаблицы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ЗаполнитьНовуюСтроку(НоваяСтрока)
	НоваяСтрока.Имя = "Вариант №" + ИсполняемыйКодСписок.Количество();
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
КонецПроцедуры // ЗаполнитьНовуюСтроку()

&НаКлиенте
Процедура ПодставитьПредустановленныйКод(ВидПредустановленногоКода)
	
	Если ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока <> Неопределено тогда
		
		Если ВидПредустановленногоКода = гТипыПредустановленногоКода().ВставитьЦикл Тогда 
			лТекстПредустановленногоКода = гПолучитьПредустановленныйКодВставитьЦикл(ВладелецФормы[мИмяРеквизитаТаблицы].Колонки, гПолучитьСвойстваРеквизитаТаблицаРезультата().ИмяРеквизита);
		ИначеЕсли ВидПредустановленногоКода = гТипыПредустановленногоКода().РедактироватьРегистрСведений Тогда 			
			лЗначениеПоУмолчанию = Неопределено;
			лСписокОбъектовМетаданных  = гПолучитьСписокОбъектовМетаданныхИзТекста(ЭтаФорма.ВладелецФормы.Элементыформы.ТекстЗапроса.ПолучитьТекст(), "РегистрыСведений", лЗначениеПоУмолчанию);
			лВыбранныйОбъектМетаданных = лСписокОбъектовМетаданных.ВыбратьЭлемент("Выберите регистр для редактирования", лСписокОбъектовМетаданных.НайтиПоЗначению(лЗначениеПоУмолчанию));
			Если лВыбранныйОбъектМетаданных <> Неопределено Тогда 
				лТекстПредустановленногоКода = гПолучитьПредустановленныйКодРедактироватьРегистрСведений(лВыбранныйОбъектМетаданных.Значение, ЭтаФорма.ВладелецФормы.Элементыформы.ТекстЗапроса.ПолучитьТекст(), гПолучитьСвойстваРеквизитаТаблицаРезультата().ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли ВидПредустановленногоКода = гТипыПредустановленногоКода().РедактироватьДокументы Тогда 			
			лЗначениеПоУмолчанию = Неопределено;
			лСписокОбъектовМетаданных  = гПолучитьСписокОбъектовМетаданныхИзТекста(ЭтаФорма.ВладелецФормы.Элементыформы.ТекстЗапроса.ПолучитьТекст(), "Документы", лЗначениеПоУмолчанию);
			лВыбранныйОбъектМетаданных = лСписокОбъектовМетаданных.ВыбратьЭлемент("Выберите документ для редактирования", лСписокОбъектовМетаданных.НайтиПоЗначению(лЗначениеПоУмолчанию));
			Если лВыбранныйОбъектМетаданных <> Неопределено Тогда 
				лТекстПредустановленногоКода = гПолучитьПредустановленныйКодРедактироватьДокумент(лВыбранныйОбъектМетаданных.Значение, ЭтаФорма.ВладелецФормы.Элементыформы.ТекстЗапроса.ПолучитьТекст(), гПолучитьСвойстваРеквизитаТаблицаРезультата().ИмяРеквизита);
			КонецЕсли;
		Иначе
			Возврат
		КонецЕсли;
		
		ВставитьТекстВПолеФормы(ЭлементыФормы.КодДляВыполнения, лТекстПредустановленногоКода);
		
		Модифицированность = Истина;
		
	Иначе
		Предупреждение("Выберите или введите новый вариант для подстановки кода.")
	КонецЕсли;

КонецПроцедуры // ПодставитьПредустановленныйКод()
 
// Процедура выводит информацию по позиции курсора в строке с произвольным кодом
//
// Параметры
//  Нет
//
&НаКлиенте
Процедура ВывестиПозициюКурсора()
	
	СтрокаНач  = 1;
	КолонкаНач = 1;              
	СтрокаКон  = 1;
	КолонкаКон = 1;
	ЭлементыФормы.КодДляВыполнения.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	НадписьПозицияКурсора = "Строка: " + СтрокаНач + "	Кол: " + КолонкаНач;

КонецПроцедуры // ВывестиПозициюКурсора()

// Процедура добавляет текст в поле с текстом
//
// Параметры
//  <ПолеФормы>  - <Элементформы> 
//  <ТекстДляДобавления>  - <Строка> - текст для добавление в поле
//
//
Процедура ВставитьТекстВПолеФормы(ПолеФормы, ТекстДляДобавления);
	
	Если ПолеФормы.КоличествоСтрок() = 0 тогда
		ПолеФормы.УстановитьТекст(ТекстДляДобавления);
	Иначе
		СтруктураКоординат = гПолучитьГраницыВыделенияПоляФормы(ПолеФормы);
		ТекущаяСтрока = ПолеФормы.ПолучитьСтроку(СтруктураКоординат.СтрокаНач);
		Если СтрДлина(ТекущаяСтрока) < СтруктураКоординат.КолонкаКон Тогда 
			СтруктураКоординат.КолонкаНач = СтрДлина(ТекущаяСтрока) + 1;
			СтруктураКоординат.КолонкаКон = СтруктураКоординат.КолонкаНач;
		КонецЕсли;
		СтруктураТекста = гПолучитьСтруктуруТекстаДоИПослеКурсора(ПолеФормы, СтруктураКоординат);
		ПолеФормы.УстановитьТекст(СтруктураТекста.ТекстДо + ТекстДляДобавления + СтруктураТекста.ТекстПосле);
		
		ПолеФормы.УстановитьГраницыВыделения(СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон,СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
			
	КонецЕсли;
	
КонецПроцедуры // ВставитьТекстВПолеФормы()
 
Процедура УстановитьДоступность()
	ЭлементыФормы.КодДляВыполнения.Доступность = (ИсполняемыйКодСписок.Количество() > 0);
КонецПроцедуры

Процедура ПодставитьТекст(ТекстДляПодстановки)
	
	ПолеСТекстом = ЭтаФорма.Элементыформы.КодДляВыполнения;
	
	Если ПолеСТекстом.КоличествоСтрок() = 0 тогда
		
		ПолеСТекстом.УстановитьТекст(ТекстДляподстановки);
		
	Иначе
		
		СтруктураКоординат = гПолучитьГраницыВыделенияПоляФормы(ПолеСТекстом);
		ТекущаяСтрока = ПолеСТекстом.ПолучитьСтроку(СтруктураКоординат.СтрокаНач);
		
		Если СтрДлина(ТекущаяСтрока) < СтруктураКоординат.КолонкаКон Тогда
			СтруктураКоординат.КолонкаНач = СтрДлина(ТекущаяСтрока) + 1;
			СтруктураКоординат.КолонкаКон = СтруктураКоординат.КолонкаНач;
		КонецЕсли;
		
		СтруктураТекста = гПолучитьСтруктуруТекстаДоИПослеКурсора(ПолеСТекстом, СтруктураКоординат);
		ПолеСТекстом.УстановитьТекст(СтруктураТекста.ТекстДо + ТекстДляподстановки + СтруктураТекста.ТекстПосле);
	КонецЕсли;
								
КонецПроцедуры // ПодставитьТекст

Функция СохранитьтекстКодаТекущейСтроки(ЗапрашиватьСохранение = Ложь)
	Результат = 1;
	Если Модифицированность и ЗапрашиватьСохранение тогда
	//Сохранить, не сохранить , отмена	
		ФормаВопроса=ПолучитьФорму("СложныйВопрос");
		ФормаВопроса.Параметры.Добавить("Сохранить изменения");
		ФормаВопроса.Параметры.Добавить("Кнопка Сохранить","Сохранить");
		ФормаВопроса.Параметры.Добавить("Кнопка НеСохранить","Не сохранить",Истина);
		ФормаВопроса.Параметры.Добавить("Кнопка Отмена","Отмена",Истина);
		Ответ = ФормаВопроса.ОткрытьМодально(30);
		Если Найти(Ответ,"Отмена")>0 тогда
			Результат = 0;
		ИначеЕсли Найти(Ответ,"Не cохранить")>0 тогда
			Результат = 2;                   
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = 1 тогда
		Если мТекущаяСтрока <> Неопределено тогда
			мТекущаяСтрока.Текст = ЭлементыФормы.КодДляВыполнения.ПолучитьТекст();
		КонецЕсли;
	КонецЕсли;

	Возврат Результат
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мТекущаяСтрока = Неопределено;
	
	лКореньМеню = гЗаполнитьМенюПоДереву(ЭлементыФормы.КоманднаяПанельОсновная, Неопределено, гПолучитьМеню("ПредустановленныйКод"));
	Если лКореньМеню <> Неопределено Тогда 
		лКореньМеню.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ИсполняемыйКодСписок.Количество() = 0 тогда
		ЗаполнитьНовуюСтроку(ИсполняемыйКодСписок.Добавить())
	КонецЕсли;
	
	Если ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока = Неопределено тогда
		ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока = ИсполняемыйКодСписок[0];
	КонецЕсли;
	
	мТекущаяСтрока = ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока;
	
	УстановитьДоступность();
	
	ПодключитьОбработчикОжидания("ВывестиПозициюКурсора", 1);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказж, СтандартнаяОбработка)
	СохранитьтекстКодаТекущейСтроки();
	ВладелецФормы.Модифицированность = ?(ВладелецФормы.Модифицированность, 
		ВладелецФормы.Модифицированность, Модифицированность);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ПредустановленныйКодВыбратьЗначениеПараметра(Кнопка)
	
	лСтрокаСПараметром = ВладелецФормы.мФормаПараметров.ПараметрыСписок.ВыбратьСтроку();
	
	Если лСтрокаСПараметром <> Неопределено Тогда 
		                         
			ТекстДляВставки = "Параметр" + лСтрокаСПараметром.Имя + " = мФормаПараметров.ПараметрыСписок.Найти(""" + лСтрокаСПараметром.Имя + """, ""Имя"").ЗначениеПараметра;";
			
			ПолеСТекстом = ЭтаФорма.Элементыформы.КодДляВыполнения;
			ВставитьТекстВПолеФормы(ПолеСТекстом, ТекстДляВставки);
			
			Модифицированность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПредустановленныйКодДобавитьПараметрТипаТаблицаЗначений(Кнопка)
	
	Если ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока <> Неопределено тогда

		НазваниеПараметра = "";
		Если ВвестиСтроку(НазваниеПараметра, "Введите название параметра для ТЗ") Тогда 
			
			ТекстДляВставки = "//Подробное описание механизма использования таблицы значений в качестве параметра описано в информации о релизе 1.17.14 от 18.09.2012. Меню: ""Информация -> О программе""
				|//Добавляем данные из таблицы с результатом запроса в структуру 
				|Если " + мИмяРеквизитаТаблицы + ".Колонки.Количество() = 0 Тогда
				|	Сообщить(""Таблица с результатом не содержит колонок!"", СтатусСообщения.Важное);
				|Иначе
				|	лИмяПараметра = """ + НазваниеПараметра +  """;
				|	гСтруктураТЗДляВременныхТаблиц.Вставить(лИмяПараметра, " + мИмяРеквизитаТаблицы + ".Скопировать()); //добавление в глобальную структуру данных из результирующей таблицы
				|//	//Добавляем в список параметров параметр с таблице значений
				|//	текПараметры = мФормаПараметров.ПараметрыСписок;
				|//	СтрокаПараметров = гПолучитьЗначениеСпискаБезУчетаРегистра(лИмяПараметра, текПараметры);
				|//	Если СтрокаПараметров = Неопределено Тогда
				|//		СтрокаПараметров = текПараметры.Добавить();
				|//		СтрокаПараметров.Тип               = 3;
				|//		СтрокаПараметров.Имя               = лИмяПараметра;
				|//		СтрокаПараметров.ЗначениеПараметра = лИмяПараметра;
				|//	КонецЕсли; 
				|КонецЕсли;
				|
				|//Текст запроса для формирования временной таблицы из таблицы значений
				|//Выбрать * Поместить ВремТабл" + НазваниеПараметра + " из &" + НазваниеПараметра + " КАК " + НазваниеПараметра + ";
				|";
			
			ПолеСТекстом = ЭтаФорма.Элементыформы.КодДляВыполнения;
			ВставитьТекстВПолеФормы(ПолеСТекстом, ТекстДляВставки);
										
			Модифицированность = Истина;
			
		КонецЕсли;
	Иначе
		Предупреждение("Выберите или введите новый вариант для подстановки кода.")
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредустановленныйКодПодключитьБазу(Кнопка)
	Если ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока <> Неопределено тогда
		// Выбираем базу которую необходимо подключить
		ТекПараметрИБ  = ВладелецФормы.мФормаПараметрыИБ.ТаблицаПараметров.ВыбратьСтроку();
		Если ТекПараметрИБ <> Неопределено тогда
			
			ТекстДляПодстановки = "ТекПараметрИБ = мФормаПараметрыИБ.ТаблицаПараметров[0];
			|СтруктураПараметров = Новый Структура(""Установить, Коннектор, КаталогБазы, SQL_Сервер, SQL_БазаДанных, ТипБазы, ИмяПользователя, Пароль, ВыводитьСообщение"", 
			|	Истина, ""V81.COMConnector"", """ + ТекПараметрИБ.КаталогБазы + """, """ + ТекПараметрИБ.SQL_Сервер + """, """ + ТекПараметрИБ.SQL_БазаДанных + """, " + 
			?(ТекПараметрИБ.ФайловаяБаза, "ИСТИНА", "ЛОЖЬ") + ", 
			|	""" + ТекПараметрИБ.ИмяПользователя + """, """ + ТекПараметрИБ.Пароль + """, Истина);
			|V8COM = кзСвязьСВнешнейБазой(СтруктураПараметров);	
			|Если V8COM <> Неопределено тогда		
			|	//Ошибка подключения
			|Иначе
			|	//Удачно подключились
			|Конецесли;";
			
			ПодставитьТекст(ТекстДляПодстановки);
			
			Модифицированность = Истина;
			
		Конецесли;
	Иначе
		Предупреждение("Выберите или введите новый вариант для подстановки кода.")
	КонецЕсли;
КонецПроцедуры

Процедура ПредустановленныйКодВставитьЦикл(Кнопка)
	ПодставитьПредустановленныйКод(гТипыПредустановленногоКода().ВставитьЦикл);
КонецПроцедуры

Процедура ПредустановленныйКодПеренумероватьСправочник(Кнопка)
	
	Если ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока <> Неопределено тогда

		лТекстПредустановленногоКода = "лПозиция = 0;
		|лДлинаКодаСправочника = 9;
		|Для Каждого СтрокаЗапроса из " + мИмяРеквизитаТаблицы + " Цикл
		|
		|	ОбработкаПрерыванияПользователя();
		|
		|	лПозиция = лПозиция + 1;
		|	Состояние(""Выполнено "" + Окр(лПозиция / " + мИмяРеквизитаТаблицы + ".Количество() * 100) + ""%"");
		|
		|	НовыйНомер = Формат(лПозиция, ""ЧЦ="" + лДлинаКодаСправочника + ""; ЧВН=; ЧГ=0"");
		|
		|	СпрОбъект = СтрокаЗапроса.Ссылка.ПолучитьОбъект();
		|	СпрОбъект.Код = НовыйНомер;
		|	СпрОбъект.ОбменДанными.Загрузка = Истина;
		|	СпрОбъект.Записать();
		|	
		|КонецЦикла;
		|
		|Сообщить(""Обработка закончена."", СтатусСообщения.Важное);";
		
		ПолеСТекстом = ЭтаФорма.Элементыформы.КодДляВыполнения;
		ВставитьТекстВПолеФормы(ПолеСТекстом, лТекстПредустановленногоКода);
									
		Модифицированность = Истина;
				
	Иначе
		Предупреждение("Выберите или введите новый вариант для подстановки кода.")
	КонецЕсли;

КонецПроцедуры

Процедура ПредустановленныйКодРедактироватьРегистрСведений(Кнопка)
	ПодставитьПредустановленныйКод(гТипыПредустановленногоКода().РедактироватьРегистрСведений);
КонецПроцедуры // ПредустановленныйКодРедактироватьРегистрСведений

Процедура ПредустановленныйКодРедактироватьДокументы(Кнопка)
	ПодставитьПредустановленныйКод(гТипыПредустановленногоКода().РедактироватьДокументы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Если Вопрос("Вы уверены? :)", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК тогда
		Закрыть(ЭлементыФормы.КодДляВыполнения.ПолучитьТекст());
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ <ИсполняемыйКодСписок>

Процедура ИсполняемыйКодСписокПередУдалением(Элемент, Отказ)
	мТекущаяСтрока = Неопределено;
КонецПроцедуры

Процедура ИсполняемыйКодСписокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		мТекущаяСтрока = Неопределено;
	ИначеЕсли НоваяСтрока тогда
		УстановитьДоступность();
	КонецЕсли;
КонецПроцедуры

Процедура ИсполняемыйКодСписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока тогда
		ЗаполнитьНовуюСтроку(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	Если Копирование тогда
		ЭлементыФормы.КодДляВыполнения.УстановитьТекст(мТекущаяСтрока.Текст);	
	КонецЕсли;
КонецПроцедуры

Процедура ИсполняемыйКодСписокПослеУдаления(Элемент)
	УстановитьДоступность();
КонецПроцедуры

Процедура ИсполняемыйКодСписокПриАктивизацииСтроки(Элемент)
	
	СохранитьтекстКодаТекущейСтроки();
	
	мТекущаяСтрока = ЭлементыФормы.ИсполняемыйКодСписок.ТекущаяСтрока;
	
	Если мТекущаяСтрока = Неопределено тогда
		ЭлементыФормы.КодДляВыполнения.Очистить();	
	Иначе
		ЭлементыФормы.КодДляВыполнения.УстановитьТекст(мТекущаяСтрока.Текст);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяРеквизитаТаблицы = гПолучитьСвойстваРеквизитаТаблицаРезультата().ИмяРеквизита;