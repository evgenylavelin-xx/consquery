{3,
{46,0,0,90,0,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,0},0,0,1,1,1,0,1,0,
{5,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",52dbb775-1631-4fd5-8c55-1615b5881dac,"ПередЗакрытием",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",ca21cd18-35b2-4281-b5c8-016ecc8da8ac,"",1,0,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,0,1,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1,52dbb775-1631-4fd5-8c55-1615b5881dac,0,1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1,ca21cd18-35b2-4281-b5c8-016ecc8da8ac,0,1},
{12,06ee6a21-061e-47f8-81c5-92ae8b8f3b5d,198ea630-fda2-4cda-8a23-f999f4c67ee6,239f0103-8de9-4fdf-b485-eb5531da7e51,3772996b-41f4-4c47-a5a8-ea397db424ae,39bb0fe9-771d-4dd5-8a6e-2d16984523af,3f01ed62-97f8-465b-b4f7-6517ac2bc994,5174ad3f-0569-42fd-8adf-011d8206db6c,5d41082e-9619-42ec-b96f-98b082b3a2f0,679b62d9-ff72-4329-bf3a-c0c32b311dd2,71e0226e-ebb2-4e33-8745-0a94a01bbf15,d7e9e72c-8fa7-430c-a3e9-aeadfd57dfc7,f3613d5c-20c6-46e5-b4d5-7d712ece1296},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{481,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"МенюФайл",
{1,1,
{"ru","&Файл"}
},
{1,1,
{"ru","Операции с файлами"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},4,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{409,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"НовыйФайлЗапросов",
{1,0},1,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{445,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НовыйФайлЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{43,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ОткрытьФайлСЗапросами",
{1,0},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{446,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОткрытьФайлСЗапросамиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{39,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СохранитьЗапросыВФайл",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{447,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СохранитьЗапросыВФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{487,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСохранитьЗапросыВНовыйФайл",
{1,0},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{488,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСохранитьЗапросыВНовыйФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{482,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{491,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаОткрытьФайлСЗапросами",
{1,0},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{492,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаОткрытьФайлСЗапросамиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{493,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСохранитьЗапросыВФайл",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{494,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСохранитьЗапросыВФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{479,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"МенюОперации",
{1,1,
{"ru","Оп&ерации"}
},
{1,1,
{"ru","Меню операции"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,2,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{483,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"МенюОперацииКомментарии",
{1,1,
{"ru","Меню операции комментарии"}
},
{1,1,
{"ru","Меню операции комментарии"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{313,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"УдалитьКомментарий",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAF9SURBVDhPpZG7S0JRHMf9OyLCIXLo
JRWYgyKUIRUWkWOD0FbQnGtNLbUERS/sMRg9IBwqSjRqKDITHz20qK4Rcc00q/Xb
OUfOyZt3qYaPfD+/F9yjBsC/UC3+BtUiZS+2gOXjERLVnaOQYgbWWuGLu0lUd45C
OMHbLfStNCGfuyZa6sUohOPyOuA5HSNR3YspKSQeD+BYrEU6EyVKPYBed43wn5QU
xn2DmD4cxns2gXz6AqGUH2cP+6SlnOMoRH4Jo2teh9TzCVFoUj0WSFY9nuQQc4pk
rcers0O44gD9m0Z3nCQW/MVuxF23Gee2ZlZL2k3MpZY6MSOWc9kr9q3R+23WzJEX
f/2UEbMZQBeTDhM75Lc0sD5HBG94EkMb7SR+e0KO4OPthi1xeJ8jQr/HjMDlEokF
l8gjRiQfdo16rOp1DHpgs6FazFDYTyYTx8yRSzSoB8nLL1dqxTKtz1ZpQZkoLxOz
4pIa651tmNJWkPhdo0fnDI2iJhp/A5ovQBvqNJujYkoAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{421,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УдалитьКомментарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{303,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДобавитьКомментарий",
{1,0},1,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAADgSURBVDhPpdG/C0FRGMZx/43FaDaZ
LBZGg7JRVt2VyWIySJEwKBlkoKSIgRgU8qOUYhBu5A94vFed2z33vIoMn3q+b53h
dh0A/sIef8Eehe6yiMo4SZNvgzk40boXvVWJJt8Gc9jN9k2Eqm48H1tKtQXpkZXW
CqI2TdPkW5BC2J0GCJRcuOoLSrWtpBAyvRhywwRNvq2Uw+U2h7/gxPE8oVTbTjkY
vynVCdPk206Kx33z/tbFoU2pNkeK1jyLeMNHk2+OFJGaB/11mSbfHHPo+gr5kUaT
70/Y4y/Y4/fgeAFzxPvPuWqBWgAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{420,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДобавитьКомментарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{484,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюОперацииКомментарииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{295,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"Intellisense",
{1,1,
{"ru","Автоподстановка (Intellisense)"}
},1,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,1,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{0,3bdc16c8-6a96-4467-9442-a8e4804b3fa2},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{419,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"IntellisenseРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{480,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюОперацииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{404,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаКнопокОтображениеБлоков",
{1,1,
{"ru","Группа кнопок отображение блоков"}
},
{1,1,
{"ru","Группа кнопок отображение блоков"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{347,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьРезультат",
{1,1,
{"ru","Результат"}
},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,3,
{-22}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAE/SURBVDhPpZMxS8NgEIbvt1Sd7OIg
uoggVQdpFxGjg1YwaWqQdgiR0AzZ/DFVQcHJwS5OTi4FwUUKGQJJaEJKKSmvuW8q
JUKTBh7u5S4PR76PkG3b1RSlIFWyLKuBgg+7ZJpmo9PpKEVgl3RdV6fTKZIkEXA2
DEOZ7WXBc3ap3W43J5MJxuOxgHOr1VJme1nwnF3SNK3JjTiOBZxVVVVme1nwnF2S
ZflmNBohDEMB53q9nvnN87BL6ctaFEUIgkDAWZIkhbdw/g+es0vyvYcL28HJ3Q+O
br+we/WBzdM3lGvPWDt8QKnSxcr+U5pfsV59x8bxJ7bO+ti5/MXetQvaPv/GcDiE
7/u5K7tUrr3A8zw4jpO7skurB92FN85XdqlUeVx443xlV5yB67oYDAa5qziD9BZ6
S9xCj9KfaglAf1E5EqFtaGXCAAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{415,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьРезультатРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{349,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьСекциюСЗапросами",
{1,1,
{"ru","Запросы"}
},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAFkSURBVDhPpdNBS4MAFAfw9wXGvsOq
W5cOQTC6BNkhbAcPbR5qh+latvIgxHAHT/VhiqDDiNhlEQUjCjp2lIFjmoqO2Rgb
rz1PCgphwg8f7//+4EXQNI1dEjNiod1u1zHjQ11otVp1VVXFqNrVN/4VKIpyslgs
cD6fh2iuqDo+ffxg7z1IRTndgSzLjdlshtPpNETzKnOD3b6Hj69uKsrpDiRJalBx
MpmEaN7iv/DhxcHOs5WKcroDQRBOgyBA3/dDNAvXdu9IM3C/+Ymbh11cP7jHtb1b
XNm9W747uMG94faxjjs1swfValUaj8foum6I5nK5LNLX0JyGcuoCz/NnpVJJzIK6
wHFc0/M8dBwnJmkXRTl1gWXZc9u20TCMmKRdFOXUBYZhLkzTxMFgEJO0i6KculAs
FuXRaIS6rsck7aIopy4UCgXFsiwcDocxSbsoyqkL+Xy+ksvlLrOgLix/qn9A+AWH
rOFaqiFMjgAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{416,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСекциюСЗапросамиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{351,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьПараметры",
{1,1,
{"ru","Параметры"}
},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAE4SURBVDhPpZMxS4RgGMefLyD3HYy2
loamoyXIhrDFIVpqKc9D7nSQCzkHt75MBEG1tFw0NvURRPBQU3AQjuPkyf9Nr/Ae
hAk/fPj//T2+IFIYhnqL2ROdgiAYcc8LLvm+P5rP52Yf4JLneVbTNLzZbLZgns1m
ppjJQA+XXNcdr9drXq1WWzA7jmOKmQz0cKUnsCzLxEN1Xe8EvW3bY+kJ7h4Kvg4T
Pp9889HlOx9cPPP+2SPvnT6191c+NL74+Cbik9uMCVvEt2HGgrfPH375yHaCfrtA
9hXaBYs/nmBBhmFMqqrisiw7yDIR9HBJ1/VpURScJEkHWSaCHi5pmuZkWcZxHHeQ
ZSLo4dJwOHTTNOUoijrIMhH0cElVVS/Pc14ulx1kmQh6uDQYDK4URbnvA1xqf6p/
wPQLQ1bsE+jxn/0AAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{417,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{414,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокОтображениеБлоковРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{500,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ФормаГруппаПозицияКурсора",
{1,1,
{"ru","Форма группа позиция курсора"}
},
{1,1,
{"ru","Форма группа позиция курсора"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{498,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКнопкаПозицияКурсора",
{1,1,
{"ru","Строка:  Кол:"}
},1,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,0,
{16711680}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{499,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаКнопкаПозицияКурсораРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{501,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаГруппаПозицияКурсораРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,0,0,3,3},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{143,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаДанныеЗапроса",
{1,1,
{"ru","Скрыть секцию с запросами"}
},
{1,1,
{"ru","Скрыть данные запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},3,143c00f7-a42d-4cd7-9189-88e4467dc768,
{51,
{159,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоЗапросов",0,0,1,
{1,0},
{1,0},
{1,
{10}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,0,
{10,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,"ДеревоЗапросовПриОкончанииРедактирования",0d644ff6-443b-4390-86fa-7f9105e42711,"",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоЗапросовПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоЗапросовПередУдалением",60edb81d-887b-478e-94ee-7fef2b13393d,"ДеревоЗапросовПриАктивизацииСтроки",6d4d6747-a823-4f61-ab31-a426572f2c6c,"",8ad48496-8d0b-4f6c-ae48-99d95227884b,"ДеревоЗапросовПеретаскивание",b3c10170-c5ff-4cba-b537-679e1c872b45,"ДеревоЗапросовПриНачалеРедактирования",cb286ab3-3a1c-40d2-a232-6e64f624ccec,"",de65638d-a806-4a76-bc10-f62bbc86e0e7,"ДеревоЗапросовПослеУдаления",1,0,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,0,1,0d644ff6-443b-4390-86fa-7f9105e42711,0,1,2391e7b8-7235-45d7-ab7e-6ff3dc086396,0,1,2ccfdec5-583d-4eca-8319-e55de492665a,0,1,60edb81d-887b-478e-94ee-7fef2b13393d,0,1,6d4d6747-a823-4f61-ab31-a426572f2c6c,0,1,8ad48496-8d0b-4f6c-ae48-99d95227884b,0,1,b3c10170-c5ff-4cba-b537-679e1c872b45,0,1,cb286ab3-3a1c-40d2-a232-6e64f624ccec,0,1,de65638d-a806-4a76-bc10-f62bbc86e0e7,0,1},
{0},1,
{21,
{160,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗапросовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{502,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗапросовКонтекстноеМенюНоваяСтрокаНаТомЖеУровне",
{1,0},1,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{503,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовКонтекстноеМенюНоваяСтрокаНаТомЖеУровнеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,
{21,
{161,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоЗапросовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{203,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоЗапросовИмя",1,0,
{1,0},
{1,0},
{2,
{10},
{6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{204,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗапросовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{438,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{10,
{428,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{429,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{21,
{430,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗапросовСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{431,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{159,0},0,3,3},1,
{4,
{432,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоЗапросовСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{21,
{433,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗапросовСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{434,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{159,1},0,3,3},1,
{4,
{435,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоЗапросовУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{21,
{436,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗапросовУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{437,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{159,2},0,3,3},0,1,0,0,1,0,3,3,0,1,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{233,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаКнопокОбщая",
{1,1,
{"ru","Группа кнопок общая"}
},
{1,1,
{"ru","Группа кнопок общая"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{145,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ПоказатьДеревоЗапросов",
{1,0},1,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAABHNCSVQICAgIfAhk
iAAAAAlwSFlzAAAMUgAADFIB7RQTngAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3Nj
YXBlLm9yZ5vuPBoAAADTSURBVDiN5ZRdSkNBDIW/nIn4gxQFd9AduJmuZO4a3JuL
cAsiYivem/ggVVsd5yJ90u9tcpIzgYRYrXUECh8kcE+fCXhoaOmA9oIGXM4wBrhq
ferAasfV7AQ47TlGxJmk45Y8s7H/gNVaryPCAMzsxd0fe0URsZG0/inHgVtJ75sx
TdOsjjp5Kb6u2yEIL6Ust69xHM8z86hXVUpZRERp6ZLyUB3+AWwYhkpjgBHxLOlp
hs86MzefA56ZNy1jMyPzV3MIB+54u2jfsWD3pLa42PPIV39kQLJK8QjRAAAAAElF
TkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{440,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьДеревоЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{279,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаКнопокОсновная",
{1,1,
{"ru","Группа кнопок основная"}
},
{1,1,
{"ru","Группа кнопок основная"}
},0,1,0,0,0,0,0,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},7,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{26,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ФормаВыполнитьЗапрос",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,1,0,0,2,2,3,1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{442,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВыполнитьЗапросРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{368,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДекорацияПоказатьДеревоЗапросов",
{1,1,
{"ru","Декорация показать дерево запросов"}
},
{1,0},1,3,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,1,
{-8},"",-1,-1,1,0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0}
},1,
{21,
{369,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДекорацияПоказатьДеревоЗапросовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},0,2,
{1,
{1,1,
{"ru","Декорация показать дерево запросов"}
},0},0,1,
{10,
{444,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДекорацияПоказатьДеревоЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{216,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"СкопироватьОбработкуДляОтладки",
{1,0},1,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{449,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СкопироватьОбработкуДляОтладкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{220,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ФормаЗагрузитьЗапросыДляОтладки",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{450,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗагрузитьЗапросыДляОтладкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{239,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ВыполнитьКод",
{1,0},1,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{448,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнитьКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{411,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"МенюДополнительно",
{1,0},0,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAADwSURBVDhPrZMtDsJAEIUbQECC5DD8
mBocl6FBIEnwIPAcANMjIDgEEtFjQLK8r5kl01IEFJIvnZ19fTO7TJMQQiveEtPj
YyjWIheFQUxuWNdXFhKk4ibCB9hL/Tv1l6PwImZiYBCfBXt3Ma4YKEHbsfJedMRc
HAxicluB5ir63oDzxcpdkdnakyX66Rk7WXkDLonkQkwsboI9NMS5N+CmSY7EzuIm
TgINcUFHfzNofYR4iVxQTyxt7TlRUM94iWtv4P/GrQmpRsswsdxGoEFbTmVpYCZ+
kKhCq5wXiP0gvabxZeBMfhvliAS/f0zfE5In9aeZPqQt/uMAAAAASUVORK5CYII=
}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{443,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюДополнительноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{373,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"МенюИнформация",
{1,0},1,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{0,b7c81c62-d6ad-4eae-9cea-0e203182db67},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{451,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюИнформацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},1,0,1,
{10,
{441,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокОсновнаяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{151,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКнопокНеИспользуемые",
{1,1,
{"ru","Запросы"}
},
{1,1,
{"ru","Группа кнопок не используемые"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0}
},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{25,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаНастроитьДополнительно",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{453,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаНастроитьДополнительноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},0,0,1,
{10,
{452,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокНеИспользуемыеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{439,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокОбщаяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{263,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаЗапрос",
{1,1,
{"ru","Текст запроса"}
},
{1,1,
{"ru","Группа запрос"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{286,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},7,"ТекстТекущегоЗапроса",0,0,
{1,1,
{"ru","Текст запроса"}
},
{1,1,
{"ru","Текст запроса"}
},
{1,
{21}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{4,100,10,1,1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,0,0,1,0},
{0,1,0},1,
{21,
{287,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ТекстТекущегоЗапросаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{291,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ТекстЗапросаДляСкрытогоДереваКонтекстноеМенюКонструкторЗапроса",
{1,0},1,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{455,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТекстЗапросаДляСкрытогоДереваКонтекстноеМенюКонструкторЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{456,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТекстТекущегоЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{265,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаПараметрыЗапросов",
{1,1,
{"ru","Скрыть параметры запроса"}
},
{1,1,
{"ru","Группа параметры запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,2,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{51,
{375,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},"ПараметрыТекущегоЗапроса",0,0,1,
{1,0},
{1,0},
{1,
{24}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,13,
{"U"},
{2,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,"ПараметрыТекущегоЗапросаПриОкончанииРедактирования",fe115cc8-9e33-4684-a166-bd5136fe7a9f,"",1,0,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,0,1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},
{0},1,
{21,
{376,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыТекущегоЗапросаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{377,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ПараметрыТекущегоЗапросаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{397,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПараметрыЗапросовЗагрузитьПараметрыИзЗапроса",
{1,1,
{"ru","Загрузить параметры из запроса"}
},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{460,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовЗагрузитьПараметрыИзЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{489,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПараметрыТекущегоЗапросаСоздатьПараметрИзБуфера",
{1,0},1,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAABU0lEQVQ4T6WSwUrDQBCG8yAeBR9B
0EdQPIroTY8+gIcehF6Ugog3W+jBmx600FJtBEVokBqtErTCEhFBRa16EYVWCuP+
m8x2Y1oiePgyyZ/ZbydhLSL6F7HgoJinzMJYBGS/+xhr3/NoYrFAU0tbqmJBp+12
+dxV2cD4Gg3OrtLQXJ7K9XO5NhTMLO9R67ujyWZGZJ6WZEPSSuA4x7pneDol8z4C
cenq0RlkgHtGJ+e7AoxuCvrx+NzU938SNG5eYtREIEmt5JIFp9d+LLNPGioHiQI0
98qweNOuxQXNjzY9vLVU5WZU37/V0xSqnspB6VAoiRLwYvwoVFPAQlQGz7ltOyoQ
968aU1A9u6LykUsVp67gaSIC8fRFF3fvGhYosXynCTdAvrFTCQTmQeLxAI44Pgci
/DQGz8jXi6VAgBAHwwR25CxjzA30J+DSC+yQBBFZP9FuUJMQI5hcAAAAAElFTkSu
QmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{490,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаСоздатьПараметрИзБуфераРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{388,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовИмя",1,0,
{1,0},
{1,0},
{2,
{24},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{389,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{471,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{402,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовГруппаТипКартинка",
{1,1,
{"ru","Параметры запроса группа тип картинка"}
},
{1,1,
{"ru","Параметры запроса группа тип картинка"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,2,1,0,3,
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{0},
{"Pattern"},"",
{1,0},0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{399,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ПараметрыЗапросовКартинкаТипа",0,0,
{1,0},
{1,0},
{2,
{24},
{6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{8,0,0,1,1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0},1,0,0,1,0},
{0,1,0},1,
{21,
{400,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовКартинкаТипаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{473,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовКартинкаТипаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{391,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовТип",1,0,
{1,1,
{"ru","Тип"}
},
{1,0},
{2,
{24},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ПараметрыЗапросовТипНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{392,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовТипКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{474,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовТипРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{472,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовГруппаТипКартинкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{394,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовЗначение",1,0,
{1,0},
{1,0},
{2,
{24},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ПараметрыЗапросовЗначениеНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ПараметрыЗапросовЗначениеПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{395,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовЗначениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{475,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовЗначениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{406,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПараметрыЗапросовГлобальныйПараметр",1,0,
{1,0},
{1,0},
{2,
{24},
{8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,0,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{407,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовГлобальныйПараметрКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{476,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовГлобальныйПараметрРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{495,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПараметрыТекущегоЗапросаДобавлятьВоВременнуюТвблицу",1,0,
{1,0},
{1,0},
{2,
{24},
{9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,1,0},1,
{21,
{496,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаДобавлятьВоВременнуюТвблицуКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{497,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаДобавлятьВоВременнуюТвблицуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{10,
{461,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{462,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{21,
{463,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{464,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{375,0},0,3,3},1,
{4,
{465,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ПараметрыТекущегоЗапросаСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{21,
{466,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{467,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{375,1},0,3,3},1,
{4,
{468,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПараметрыТекущегоЗапросаУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{21,
{469,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{470,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{375,2},0,3,3},0,1,0,0,1,0,3,3,0,1,0},1,0,1,
{10,
{459,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПараметрыЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{454,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЗапросРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{426,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаДанныеЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{147,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаРезультатЗапроса",
{1,1,
{"ru","Скрыть результат запроса"}
},
{1,1,
{"ru","Группа результат запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{58,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КоманднаяПанельРезультатЗапроса",
{1,1,
{"ru","Командная панель результат запроса"}
},
{1,1,
{"ru","Командная панель результат запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,2,
{0}
},0,1,0,1,
{10,
{478,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КоманднаяПанельРезультатЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{477,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаРезультатЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",2,0,0,0,0,0,3,3,0,0,2,100,1,1,0},"//Консоль запросов 1С от Евгения Лавелина
//e-mail:support@consquery.ru
//http: www.consquery.ru

&НаКлиенте
Перем мВыполняетсяЗакрытие, мКэшЗначений, мДлительнаяОперацияЗапущена, мДеревоЗапросовВидимость, мОперацииСЗапросами, мОперацияПослеСохраненияИзменений;

&НаКлиенте
Перем RegExp, мЦветСтиляЦветРамки, мТекущаяСтрокаДереваЗапросов;

&НаКлиенте
Перем мРежимДобавленияСтрокиСЗапросом; // Принимаемые значения: 0 - добавление, 1- копирование, Неопределено - событие добавления строки не было инициировано

&НаКлиенте
Перем мВыполняетсяУдалениеСтроки, мВыполняетсяПеретаскиваниеСтроки Экспорт;

&НаКлиенте
Перем ПредыдущаяСтрока;

#Область Константы

Функция РежимыДобавленияСтроки()
	Возврат Новый Структура(""Добавление, Копирование"", ""Добавление"", ""Копирование"");
КонецФункции

&НаСервереБезКонтекста
Процедура гВывестиОшибкуВыполнениякода(ТипОбработка, СеансовыеДанные, ТекстОшибки, КодДляВыполнения)
	ОбъектОбработки(ТипОбработка, СеансовыеДанные).гВывестиОшибкуВыполнениякода(ТекстОшибки, КодДляВыполнения);
КонецПроцедуры

&НаСервереБезКонтекста
Функция гОперацииСЗапросами(ТипОбработка, СеансовыеДанные)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гОперацииСЗапросами();
КонецФункции

&НаСервереБезКонтекста
Функция гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, Режим)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гРежимыЗакрытияФормыВводаПроизвольногоКода()[Режим];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбщиеПеречисления()
	Возврат Новый Структура(""ВсеКолонки"", ""Все колонки"");
КонецФункции

&НаСервереБезКонтекста
Функция гНазваниеОбработки(ТипОбработка, СеансовыеДанные, ВернутьПолноеНазвание = Истина)

	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гНазваниеОбработки(ВернутьПолноеНазвание);

КонецФункции // гНазваниеОбработки()

&НаСервереБезКонтекста
Функция гРежимыОткрытияФормы(ТипОбработка, СеансовыеДанные)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гРежимыОткрытияФормы();
КонецФункции

&НаСервереБезКонтекста
Функция гРежимыПолученияЗапросаИзКода(ТипОбработка, СеансовыеДанные)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гРежимыПолученияЗапросаИзКода();
КонецФункции

&НаСервереБезКонтекста
Функция гСформироватьКодЗапросаДля1С(ТипОбработка, СеансовыеДанные, ТекстЗапроса, ПараметрыЗапроса, Режим)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСформироватьКодЗапросаДля1С(ТекстЗапроса, ПараметрыЗапроса, Режим, Истина);
КонецФункции

&НаСервереБезКонтекста
Функция гПолучитьЗапросИзТекста(ТипОбработка, СеансовыеДанные, Код1С, ПростаяОбработкаТекста)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьЗапросИзТекста(Код1С, ПростаяОбработкаТекста);
КонецФункции

&НаСервереБезКонтекста
Функция гСтроковоеПредставлениеТипа(ТипОбработка, СеансовыеДанные, Тип)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСтроковоеПредставлениеТипа(Тип);
КонецФункции

&НаСервере
Функция ЗаполнитьПараметрыНаФормеИПолучитьТекстЗапросаИзКода1сНаСервере(ТипОбработка, СеансовыеДанные, Код1С, ПростаяОбработкаТекста)
	
	лЗапрос = гПолучитьЗапросИзТекста(ТипОбработка, СеансовыеДанные, Код1С, ПростаяОбработкаТекста);
	
	//#заполнениепараметровзапроса 1
	Для каждого лПараметр Из лЗапрос.Параметры Цикл
		Попытка
			лСтрокаСПараметром = НайтиЗначениеБезУчетаРегистра(лПараметр.Ключ, ПараметрыТекущегоЗапроса, ""Имя"");
			Если лСтрокаСПараметром = Неопределено Тогда 
				лСтрокаСПараметром     = ПараметрыТекущегоЗапроса.Добавить();
				лСтрокаСПараметром.Имя = лПараметр.Ключ;
			КонецЕсли;                                                                                                            
			
			лСтрокаСПараметром.Тип            = XMLТип(ТипЗнч(лПараметр.Значение)).ИмяТипа;
			лСтрокаСПараметром.Значение       = ЗначениеВСтрокуВнутр(лПараметр.Значение);
			лСтрокаСПараметром.ЗначениеВФорме = ФормированиеПредставленияЗначения(лСтрокаСПараметром.Значение);
			
			ДанныеПоТипу = СписокТипов.НайтиПоЗначению(лСтрокаСПараметром.Тип);                                      // простые типы
			Если ДанныеПоТипу = Неопределено Тогда                                                                           
				ДанныеПоТипу = СписокТипов.НайтиПоЗначению(СериализаторXDTO.XMLТип(лСтрокаСПараметром.Тип).ИмяТипа); // сложные типы
			КонецЕсли;
			
			лСтрокаСПараметром.ТипВФорме    = ДанныеПоТипу.Представление;
			лСтрокаСПараметром.КартинкаТипа = ДанныеПоТипу.Картинка;
		Исключение
			Сообщить(""Неудачная попытка установки параметра "" + лПараметр.Ключ + ""["" + лПараметр.Значение + ""](ощибка:"" + ОписаниеОшибки() + "")"");
		КонецПопытки; 
	КонецЦикла; 
	
	Возврат лЗапрос.Текст;
	
КонецФункции // ЗаполнитьПараметрыНаФормеИПолучитьТекстЗапросаИзКода1сНаСервере()
 
// ДУБЛЬ В ОБЫЧНОЙ ФОРМЕ 
&НаКлиенте
Функция ПолучитьТипыJSONБЕзЗначений() Экспорт
	
	//Null (Null)
	//Булево (Boolean)
	//ИмяСвойства (PropertyName)
	//Комментарий (Comment)
	//КонецМассива (ArrayEnd)
	//КонецОбъекта (ОbjectEnd)
	//НачалоМассива (ArrayStart)
	//НачалоОбъекта (ObjectStart)
	//Ничего (None)
	//Строка (String)
	//Число (Number)
	
	лМассивТиповJSONБезЗначений = Новый Массив;
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоОбъекта);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецОбъекта);
	
	Возврат лМассивТиповJSONБезЗначений;
КонецФункции // ПолучитьТипыJSONБЕзЗначений()

&НаСервере
Функция ИмяФайлаКонсолиЗапросовНаСервере()
	файлСОбработкой = Новый Файл(ПутьКФайлуСОбработкой);
	Возврат КаталогВременныхФайлов() + файлСОбработкой.ИмяБезРасширения + ""_server"" + файлСОбработкой.Расширение;
КонецФункции

&НаСервере
Функция гПрефиксСпецПоляНаСервере()
	
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПрефиксСпецПоля()
	
КонецФункции

&НаКлиенте
Функция гПрефиксСпецПоля()
	
	КлючКэшаЗначений = ""гПрефиксСпецПоляНаСервере"";
	Если Не мКэшЗначений.Свойство(КлючКэшаЗначений) Тогда 
		мКэшЗначений.Вставить(КлючКэшаЗначений, гПрефиксСпецПоляНаСервере());
	КонецЕсли;
	
	Возврат мКэшЗначений[КлючКэшаЗначений];
	
КонецФункции

&НаСервереБезКонтекста
Функция РежимыКонтекстнойПодсказкиНаСервере(ТипОбработка, СеансовыеДанные)
	
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).РежимыКонтекстнойПодсказки().Условия
	
КонецФункции // РежимыКонтекстнойПодсказкиНаСервере()

// Возвращает пустую структуру для параметра ПараметрыОжидания процедуры ОжидатьЗавершение.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * ФормаВладелец          - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
//   * ТекстСообщения         - Строка - текст сообщения, выводимый на форме ожидания.
//                                       Если не задан, то выводится ""Пожалуйста, подождите..."".
//   * ВыводитьОкноОжидания   - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции. 
//                                       Если используется собственный механизм индикации, то следует указать Ложь.
//   * ВыводитьПрогрессВыполнения - Булево - выводить прогресс выполнения в процентах на форме ожидания.
//   * ОповещениеОПрогрессеВыполнения - ОписаниеОповещения - оповещение, которое периодически вызывается при 
//                                      проверке готовности фонового задания. Параметры процедуры-обработчика оповещения:
//     ** Прогресс - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства: 
//	     *** Статус               - Строка - ""Выполняется"", если задание еще не завершилось;
//                                           ""Выполнено"", если задание было успешно выполнено;
//	                                         ""Ошибка"", если задание завершено с ошибкой;
//                                           ""Отменено"", если задание отменено пользователем или администратором.
//	     *** ИдентификаторЗадания - УникальныйИдентификатор - идентификатор запущенного фонового задания.
//	     *** Прогресс             - Структура, Неопределено - результат функции ДлительныеОперации.ПрочитатьПрогресс, если ВыводитьПрогрессВыполнения = Истина.
//	     *** Сообщения            - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю, если ВыводитьСообщения = Истина
//     ** ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
//
//   * ВыводитьСообщения      - Булево - выводить сообщения, сформированные в процедуре-обработчике длительной операции.
//                                       Значение Истина имеет смысл, только если ВыводитьПрогрессВыполнения = Ложь
//   * Интервал               - Число  - интервал в секундах между проверками готовности длительной операции.
//                                       По умолчанию 0 - после каждой проверки интервал увеличивается с 1 до 15 секунд с коэффициентом 1.4.
//   * ОповещениеПользователя - Структура - содержит свойства:
//     ** Показать            - Булево - если Истина, то по завершении длительной операции вывести оповещение пользователя.
//     ** Текст               - Строка - текст оповещения пользователя.
//     ** НавигационнаяСсылка - Строка - навигационная ссылка оповещения пользователя.
//     ** Пояснение           - Строка - пояснение оповещения пользователя.
// 
&НаКлиенте
Функция ПараметрыОжидания(ФормаВладелец) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить(""ФормаВладелец""                 , ФормаВладелец);
	Результат.Вставить(""ТекстСообщения""                , """");
	Результат.Вставить(""ВыводитьОкноОжидания""          , Истина); 
	Результат.Вставить(""ВыводитьПрогрессВыполнения""    , Ложь); 
	Результат.Вставить(""ОповещениеОПрогрессеВыполнения"", Неопределено); 
	Результат.Вставить(""ВыводитьСообщения""             , Ложь); 
	Результат.Вставить(""Интервал""                      , 0); 
	Результат.Вставить(""ИдентификаторЗадания""          , ПоместитьВоВременноеХранилище(Новый Структура(""Статус"", ""Выполняется""), УникальныйИдентификатор)); 														 														 
	
	ОповещениеПользователя = Новый Структура;
	ОповещениеПользователя.Вставить(""Показать""           , Ложь);
	ОповещениеПользователя.Вставить(""Текст""              , Неопределено);
	ОповещениеПользователя.Вставить(""НавигационнаяСсылка"", Неопределено);
	ОповещениеПользователя.Вставить(""Пояснение""          , Неопределено);
	Результат.Вставить(""ОповещениеПользователя"", ОповещениеПользователя);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область Обработчики

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");  
	
     // установим внутреннее строковое представление типа значения объекта обработки
    ТипОбработка = ЗначениеВСтрокуВнутр(ТипЗнч(ОбработкаОбъект));
	
	РеквизитыТаблицыРезультата = ОбработкаОбъект.гПолучитьСвойстваРеквизитаТаблицаРезультата();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы     = СистемнаяИнформация.ВерсияПриложения;
	лПлатформаАктуальна  = (ОбработкаОбъект.гСравнитьВерсии(ВерсияПлатформы, ""8.3.6.2421"") >= 0);
	
	СеансовыеДанные = Новый Структура();	
	СеансовыеДанные.Вставить(""ИдентификаторСеанса"", Новый УникальныйИдентификатор);
	СеансовыеДанные.Вставить(""КЭШ""                , Новый Структура);
	
	ОбработкаОбъект.гСеансовыеДанные = СеансовыеДанные; // ОБЯЗАТЕЛЬНО перед вызовом гИзвлечьКартинкиОбработкиНаСервере
	
	СеансовыеДанные.Вставить(""ПутьККартинкам"", ОбработкаОбъект.гИзвлечьКартинкиОбработкиНаСервере());
	
	Если лПлатформаАктуальна Тогда 
		ЭтотОбъектФорма = ""ЭтотОбъект""
	Иначе
		ЭтотОбъектФорма = ""ЭтаФорма""
	КонецЕсли;
	
	Объект.ДоступныеТипыДанных = ОбработкаОбъект.Метаданные().Реквизиты.ДоступныеТипыДанных.Тип;
	Объект.ПутьКФормам         = ОбработкаОбъект.Метаданные().ПолноеИмя() + "".Форма"";
	ПутьКФайлуСОбработкой      = ОбработкаОбъект.ИспользуемоеИмяФайла;
	СписокТипов                = ОбработкаОбъект.гСформироватьСписокТипов(Объект.ДоступныеТипыДанных.Типы());
	
	// +++ создаем пустую таблицу для отображения при открытии
	лРезультат = Новый ТаблицаЗначений;
	лРезультат.Колонки.Добавить(""Поле1"");
	//лРезультат.Добавить();
	
	АдресРезультата = ПоместитьВоВременноеХранилище(лРезультат, УникальныйИдентификатор);
	// --- создаем пустую таблицу для отображения при открытии
	
	СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);
	
	лИмяЭлементаРезультатЗапроса = РеквизитыТаблицыРезультата.ИмяРеквизита;
	лКоманднаяПанельРезультатаЗапроса = Вычислить(""Элементы."" + лИмяЭлементаРезультатЗапроса + "".КоманднаяПанель"");
	
	//+++ формируем меню
	МассивМенюДляДобавления = Новый Массив;
	//МассивМенюДляДобавления.Добавить(Новый Структура(""Имя, Контейнер, Картинка"", ""Информация"", КоманднаяПанель                         , ОбработкаОбъект.ПолучитьКартинку(""Информация"")));
	МассивМенюДляДобавления.Добавить(Новый Структура(""Имя, Контейнер, Картинка, КореньЭтоПодменю"", ""Дополнительно"", Элементы.МенюОперации            , ОбработкаОбъект.ПолучитьКартинку(""НастроитьСписок""), Ложь));
	МассивМенюДляДобавления.Добавить(Новый Структура(""Имя, Контейнер, Картинка, КореньЭтоПодменю"", ""КодЗапрос""    , Элементы.МенюОперации            ,                                                    , Ложь));
	МассивМенюДляДобавления.Добавить(Новый Структура(""Имя, Контейнер, Картинка, КореньЭтоПодменю"", ""Сервис""       , лКоманднаяПанельРезультатаЗапроса, ОбработкаОбъект.ПолучитьКартинку(""НастроитьСписок""), Истина));
	МассивМенюДляДобавления.Добавить(Новый Структура(""Имя, Контейнер, Картинка, КореньЭтоПодменю"", ""Запросы""      , лКоманднаяПанельРезультатаЗапроса, Новый Картинка,                                    , Истина));

	Для каждого ТекущееМеню Из МассивМенюДляДобавления Цикл
		лДеревоМеню = ОбработкаОбъект.гПолучитьМеню(ТекущееМеню.Имя, Истина, Ложь);
		ЗаполнитьМенюПоДеревуНаСервере(ТекущееМеню.Контейнер, лДеревоМеню, ТекущееМеню.КореньЭтоПодменю);
	КонецЦикла; 
	
	// добавляем контекстное меню самой таблицы с результатом
	лИмяКоманды  = ""ТаблицаРезультатаПолучитьТипЗначения"";
	
	КомандаФормы = Команды.Добавить(лИмяКоманды);
	КомандаФормы.Действие = лИмяКоманды;
	
	Кнопка = Элементы.Добавить(""МенюТаблицаРезультатаПолучитьТипЗначения"", Тип(""КнопкаФормы""), Вычислить(""Элементы."" + лИмяЭлементаРезультатЗапроса).КонтекстноеМеню);
	Кнопка.ИмяКоманды = лИмяКоманды;
	Кнопка.Заголовок = ""Получить тип значения"";		
	//+++ формируем меню
	
	// добавляем строку состояния к элементу с результатом запроса
	лИмяКоманды  = ""ПоказатьКоличествоСтрокРезультатаЗапроса"";
	
	КомандаФормы = Команды.Добавить(лИмяКоманды);
	КомандаФормы.Действие = лИмяКоманды;
	
	Кнопка = Элементы.Добавить(""КнопкаКоличествоСтрокРезультатаЗапроса"", Тип(""КнопкаФормы""), лКоманднаяПанельРезультатаЗапроса);
	Кнопка.ИмяКоманды = лИмяКоманды;
	Кнопка.ЦветТекста = Новый Цвет(0,0,255);	

	//+++ восстанавливаем настройки по умолчанию
	ЗначенияПоУмолчанию	= ВосстановитьНастройкиНаСервере();
	//--- восстанавливаем настройки по умолчанию
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем лЗначениеНастройки;
	
	ОбновитьСостояниеРезультатаЗапроса();
	
	мОперацииСЗапросами = гОперацииСЗапросами(ТипОбработка, СеансовыеДанные);
	мЦветСтиляЦветРамки = ПолучитьЦветСтиляНаСервере(""ЦветРамки"");
	
	мДлительнаяОперацияЗапущена = Истина;
	ОповещениеОЗавершении = Новый ОписаниеОповещения(""ВыполнитьДействиеЗавершение"", Вычислить(ЭтотОбъектФорма));
	ПараметрыФормыДлительнойОперации = ПараметрыОжидания(Неопределено);
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ДлительнаяОперация"", ПараметрыФормыДлительнойОперации, Вычислить(ЭтотОбъектФорма),,,,ОповещениеОЗавершении);

	//+++ восстанавливаем настройки по умолчанию
	Если ЗначениеЗаполнено(ЗначенияПоУмолчанию) Тогда 
		
		лДеревоЗапросовВидимость = Неопределено;
		ЗначенияПоУмолчанию.Свойство(""ДеревоЗапросовВидимость"", лДеревоЗапросовВидимость);
		
		Если ЗначенияПоУмолчанию.Свойство(""ГруппаРезультатЗапроса"", лЗначениеНастройки) Тогда 
			лИмяРодителяЭлементаРезультатЗапроса = РеквизитыТаблицыРезультата.ИмяЭлементаРодителя;
			Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость = лЗначениеНастройки;
			ОформитьКнопкуПоказатьРезультат(лЗначениеНастройки);
		КонецЕсли;
		
		Если ЗначенияПоУмолчанию.Свойство(""ГруппаДанныеЗапроса"", лЗначениеНастройки) Тогда 
			ОбработкаДействияПоказатьСекциюСЗапросами(лЗначениеНастройки);
		Иначе
			ОбработкаДействияПоказатьСекциюСЗапросами(Истина);
		КонецЕсли;

		Если ЗначенияПоУмолчанию.Свойство(""ГруппаПараметрыЗапросов"", лЗначениеНастройки) Тогда 
			Элементы.ГруппаПараметрыЗапросов.Видимость = лЗначениеНастройки;
		Иначе
			Элементы.ГруппаПараметрыЗапросов.Видимость = Ложь;
		КонецЕсли;
		
		ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
		
		ЗначенияПоУмолчанию.Свойство(""ИмяФайлаСЗапросом"", ИмяФайлаСЗапросом);
		
	КонецЕсли;
	//--- восстанавливаем настройки по умолчанию
	
	ОформитьКнопкуПоказатьСекциюСЗапросами(Элементы.ГруппаДанныеЗапроса.Видимость);
	ОформитьКнопкуПоказатьРезультат(Элементы.ГруппаРезультатЗапроса.Видимость);
	ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
	
	ЗагрузитьЗапросы(ИмяФайлаСЗапросом, мОперацииСЗапросами.Открыть);
	
	Если лДеревоЗапросовВидимость <> Неопределено Тогда 
		Элементы.ДеревоЗапросов.Видимость = лДеревоЗапросовВидимость;
	КонецЕсли;
	
	мДеревоЗапросовВидимость = Элементы.ДеревоЗапросов.Видимость;
	
	ОтобразитьДеревоЗапросов(мДеревоЗапросовВидимость);
	
	Модифицированность          = Ложь;
	мДлительнаяОперацияЗапущена = Ложь;
	
	ПоместитьВоВременноеХранилище(Новый Структура(""Статус"", ""Выполнено""), ПараметрыФормыДлительнойОперации.ИдентификаторЗадания);
	
	ОбновитьЗаголовок();
	
	ВывестиПозициюКурсора();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не мВыполняетсяЗакрытие Тогда 
		
		Отказ = Истина;
		
		лОповещение = Новый ОписаниеОповещения(""ПередЗакрытиемЗавершение"", Вычислить(ЭтотОбъектФорма), Модифицированность);
		
		Если Модифицированность Тогда 
			ТекстВопроса = НСтр(""ru = 'Данные изменены. Сохранить изменения перед закрытием?'"");
			КнопкиВопроса = РежимДиалогаВопрос.ДаНетОтмена;
		ИначеЕсли РежимОтладки Тогда 
			ТекстВопроса = НСтр(""ru = 'Обработка была запущена из режима отладки. При закрытии данные отладки не сохраняются. 
				|Закрыть обработку?'"");
			КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
		//Иначе
		//	ТекстВопроса = НСтр(""ru = 'Закрыть обработку?'"");
		//	КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
		Иначе
			ВыполнитьОбработкуОповещения(лОповещение, КодВозвратаДиалога.Нет);
			Возврат
		КонецЕсли;
		
		ПоказатьВопрос(лОповещение, ТекстВопроса, КнопкиВопроса);
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

Процедура УдалитьФайлыНаСервере(Путь)
	УдалитьФайлы(Путь);
КонецПроцедуры
	
//&НаКлиенте
//Процедура ПриЗакрытии()
//	СохранитьНастройки();
//	Если ЗначениеЗаполнено(СеансовыеДанные.ПутьККартинкам) Тогда 
//		Попытка
//			УдалитьФайлы(СеансовыеДанные.ПутьККартинкам);
//		Исключение
//		КонецПопытки; 
//		Попытка
//			УдалитьФайлыНаСервере(СеансовыеДанные.ПутьККартинкам);
//		Исключение
//		КонецПопытки; 
//	КонецЕсли;
//КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = ""ОбновитьПараметрСТаблицейЗначений"" Тогда	
		ОбновитьПараметрСТаблицейЗначений(Параметр);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ЗапуститьВыполнениеЗапроса();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваЗапросов

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	мРежимДобавленияСтрокиСЗапросом = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	Если мРежимДобавленияСтрокиСЗапросом = Неопределено Тогда 
		
		Если Элементы.ДеревоЗапросов.ТекущаяСтрока = ПредыдущаяСтрока Тогда
	        Возврат;
	    КонецЕсли;	
		
		ПредыдущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;		
		ПодключитьОбработчикОжидания(""ДеревоЗапросовПриАктивизацииСтрокиДействие"", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтрокиДействие()

	Если мВыполняетсяУдалениеСтроки <> Истина И мВыполняетсяПеретаскиваниеСтроки <> Истина  Тогда 
		// сохраняем текст и параметры текущего запроса
		СохранитьТекущиеЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
		
	Иначе 
		
		мВыполняетсяУдалениеСтроки       = Неопределено;
		мВыполняетсяПеретаскиваниеСтроки = Неопределено;
		
	КонецЕсли;
	
	мТекущаяСтрокаДереваЗапросов = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	
	// заполняем поля с текущим запросом и параметрами соответствующими значениями
	ОбновитьЭлементыФормыДляТекущегоЗапроса(мТекущаяСтрокаДереваЗапросов)

КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтрокиДействие()
 		
&НаКлиенте
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если мРежимДобавленияСтрокиСЗапросом <> Неопределено Тогда 
		
		// сохраняем текст и параметры текущего запроса
		СохранитьТекущиеЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
		
		мСтараяСтрокаДереваЗапросов  = мТекущаяСтрокаДереваЗапросов;
		мТекущаяСтрокаДереваЗапросов = Элементы.ДеревоЗапросов.ТекущаяСтрока;
		
		мТекущиеДанныеДереваЗапросов = Элементы.ДеревоЗапросов.ТекущиеДанные;
		мТекущиеДанныеДереваЗапросов.Идентификатор = Новый УникальныйИдентификатор;
		
		Если мРежимДобавленияСтрокиСЗапросом = Истина Тогда    // строку скопировали
			
			// копируем код выполнения предыдущего запроса
			мИдентификаторСтарогоЗапроса = ДеревоЗапросов.НайтиПоИдентификатору(мСтараяСтрокаДереваЗапросов).Идентификатор;
			СкопироватьИсполняемыйКод(мИдентификаторСтарогоЗапроса, мТекущиеДанныеДереваЗапросов.Идентификатор)
			
		ИначеЕсли мРежимДобавленияСтрокиСЗапросом = Ложь Тогда // строку не копировали
			
			// заполняем поля с текущим запросом и параметрами соответствующими значениями
			ОбновитьЭлементыФормыДляТекущегоЗапроса(Неопределено)
			
		КонецЕсли;
		
		мРежимДобавленияСтрокиСЗапросом = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 1 И Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор() Тогда   
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения(""ПослеЗакрытияВопросаСоздатьНовыйФайл"", ЭтаФорма, Новый Структура(""Режим"", ""СоздатьНовыйФайл"")), ""Список запросов должен содержать хотя бы одну строку. Создать новый файл?"", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	мВыполняетсяУдалениеСтроки = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	мВыполняетсяПеретаскиваниеСтроки = Истина;
	СохранитьТекущиеЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыРезультата

&НаКлиенте
Процедура ТаблицаРезультатаВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(АдресСпискаСпецПолей) Тогда 
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ИмяТекущегоПоля = Сред(Элемент.ТекущийЭлемент.Имя, СтрДлина(РеквизитыТаблицыРезультата.ИмяРеквизита) + 1);
		ИмяТекущегоПоляБезСпецПрефикса = СтрЗаменить(ИмяТекущегоПоля, гПрефиксСпецПоля(), """");
		лСпецПоля = ПолучитьИзВременногоХранилища(АдресСпискаСпецПолей);
		Если лСпецПоля.Свойство(ИмяТекущегоПоляБезСпецПрефикса) Тогда 
			РасшифроватьСпецПоле(ИмяТекущегоПоля, ТекущиеДанные.ПолучитьИдентификатор(), лСпецПоля[ИмяТекущегоПоляБезСпецПрефикса]);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРезультатаПриИзменении(Элемент)
	ОбновитьСостояниеРезультатаЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРезультатаПолучитьТипЗначения(Команда)
	лТекущиеДанные = Элементы[РеквизитыТаблицыРезультата.ИмяРеквизита].ТекущиеДанные;
	Если лТекущиеДанные <> Неопределено Тогда 
		СодержимоеЯчейки = лТекущиеДанные[СтрЗаменить(Элементы[РеквизитыТаблицыРезультата.ИмяРеквизита].ТекущийЭлемент.Имя, РеквизитыТаблицыРезультата.ИмяРеквизита + ""_"", """")];
		ПоказатьВводСтроки(Новый ОписаниеОповещения(""ПоказатьВводСтрокиЗавершение"", ЭтотОбъект), гСтроковоеПредставлениеТипа(ТипОбработка, СеансовыеДанные, ТипЗнч(СодержимоеЯчейки)), ""Тип значения"", ,Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПараметров

&НаКлиенте
Процедура ПараметрыЗапросовТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийПараметр = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	
	ЗаголовокЭлемента = НСтр(""ru = 'Выбрать тип'"");
	ОписаниеОповещения = Новый ОписаниеОповещения(""ЗавершениеВыбораТипаПараметра"", Вычислить(ЭтотОбъектФорма));
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, ЗаголовокЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	лТекущиеДанные = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	лТипПараметра  = лТекущиеДанные.ТипВФорме;
	
	Если лТипПараметра= НСтр(""ru = 'Таблица значений'"") Тогда 
		Путь = Объект.ПутьКФормам + ""."" + ""ТаблицаЗначений"";
	ИначеЕсли лТипПараметра = НСтр(""ru = 'Момент времени'"") Тогда 
		Путь = Объект.ПутьКФормам + ""."" + ""МоментВремени"";
	ИначеЕсли лТипПараметра = НСтр(""ru = 'Граница'"") Тогда
		Путь = Объект.ПутьКФормам + ""."" + ""Граница"";
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(Путь, Новый Структура(""Значение"", лТекущиеДанные.Значение), Вычислить(ЭтотОбъектФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросовЗначениеПриИзменении(Элемент)
	
	ТекущийПараметр = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	Значение        = ТекущийПараметр.ЗначениеВФорме;
	ТекущийТип		= ТекущийПараметр.Тип;
	
	Если ТекущийТип <> ""ТаблицаЗначений"" И ТекущийТип <> ""МоментВремени"" И ТекущийТип <> ""Граница"" Тогда
		//#рефакторинг непрозрачный код
		ТекущийПараметр.Значение	= ЗначениеВСтрокуСервер(Значение);		
		Модифицированность 			= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТекущегоЗапросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Элемент.ТекущиеДанные.Тип = """" Тогда 
		лВыбранныйЭлемент = СписокТипов.НайтиПоЗначению(""Строка"");
		ИнициализацияТипаИЗначенияПараметра(Элементы.ПараметрыТекущегоЗапроса.ТекущаяСтрока, лВыбранныйЭлемент.Значение, лВыбранныйЭлемент.Представление, лВыбранныйЭлемент.Картинка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	ОбработкаДействияВыполнитьКод();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоЗапросов(Команда)
	
	ОтобразитьДеревоЗапросов(Не мДеревоЗапросовВидимость);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВФайл(Команда)
	СохранитьФайлСЗапросом(ИмяФайлаСЗапросом);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВНовыйФайл()
	СохранитьФайлСЗапросом(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлСЗапросами(Команда)
	Если ПроверитьМодифицированностьНеАсинхронно(мОперацииСЗапросами.Открыть) Тогда 
		ДиалогВыбораФайлаОбщий(мОперацииСЗапросами.Открыть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлЗапросовДействие()
	
	ИмяФайлаСЗапросом = Неопределено;
	
	ОчиститьДанныеПоЗапросам();
	ДобавитьНовуюСтрокуСЗапросом();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры // НовыйФайлЗапросовДействие()

&НаКлиенте
Процедура НовыйФайлЗапросов(Команда)
	Если ПроверитьМодифицированностьНеАсинхронно(мОперацииСЗапросами.Новый) Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПараметрыИзЗапроса(Команда)
	ОбработкаДействийЗаполнитьПараметрыИзЗапроса();	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПараметрИзБуфера(Команда)
	ОбработкаДействияСоздатьПараметрИзБуфера();
КонецПроцедуры

&НаСервере
Функция ПолучитьКоординатыОшибкиНаСервере(ТекстОшибки)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьКоординатыОшибки(ТекстОшибки);
КонецФункции

&НаКлиенте
Процедура КонструкторЗапроса(Команда)

	Перем НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон;
	
	Если ТекущийЭлемент.ВыделенныйТекст = """" Тогда
		лТекстДляКонструктора = ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса;
	Иначе
		лТекстДляКонструктора = ТекущийЭлемент.ВыделенныйТекст;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура(""СтруктураГраницВыделения, Модифицированность"");
	ПараметрыОповещения.Модифицированность = Модифицированность;
	Если ТекущийЭлемент.ВыделенныйТекст <> """" Тогда 
		ТекущийЭлемент.ПолучитьГраницыВыделения(НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон);
		ПараметрыОповещения.СтруктураГраницВыделения = Новый Структура(""НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон"", НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон);
	КонецЕсли;
	
	Конструктор = Новый КонструкторЗапроса; 
	Если ЗначениеЗаполнено(лТекстДляКонструктора) Тогда 
		Попытка
			Конструктор.Текст = СокрЛП(лТекстДляКонструктора); 
		Исключение
			лТекстошибки = ОписаниеОшибки();
			лКоординатыОшибки = ПолучитьКоординатыОшибкиНаСервере(лТекстошибки);
			
			Если лКоординатыОшибки <> Неопределено Тогда 
				лСтрока = лКоординатыОшибки.Строка;
				лКолонка = лКоординатыОшибки.Колонка;				
				ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы.УстановитьГраницыВыделения(лСтрока, лКолонка, лСтрока, лКолонка);
			КонецЕсли;
			Сообщить(лТекстошибки, СтатусСообщения.Важное);
			Возврат;
		КонецПопытки; 
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(""ОткрытьКонструкторЗапросаЗавершение"", Вычислить(ЭтотОбъектФорма), ПараметрыОповещения); 
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьОбработкуДляОтладкиНаСервере(Адрес)
	ФайлСОбработкой = ПолучитьИзВременногоХранилища(Адрес);
	лПутьКФайлу = ИмяФайлаКонсолиЗапросовНаСервере();
	Попытка
		ФайлСОбработкой.Записать(лПутьКФайлу);
		Возврат лПутьКФайлу
	Исключение
		ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПоказатьОшибкуНаСервере(ОписаниеОшибки());
		Возврат Неопределено
	КонецПопытки; 
КонецФункции 

&НаКлиенте
Процедура СкопироватьОбработкуДляОтладки(Команда)
	
	Попытка
		
		Данные = Новый ДвоичныеДанные(ПутьКФайлуСОбработкой);
		Адрес = ПоместитьВоВременноеХранилище(Данные);
		ПутьКФайлуСОбработкойНаСервере = СкопироватьОбработкуДляОтладкиНаСервере(Адрес);	
		
		Если ПутьКФайлуСОбработкойНаСервере <> Неопределено Тогда 
			
			ТекстВопроса  = НСтр(""ru = 'Показать инструкцию?'"");
			КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
			ПараметрыВопроса = Новый Структура;
			ПараметрыВопроса.Вставить(""ИдВопроса""                     , ""ПоказатьИнструкциюСформироватьКодДляОтладкиНаСервере"");
			ПараметрыВопроса.Вставить(""ПутьКФайлуСОбработкойНаСервере"", ПутьКФайлуСОбработкойНаСервере);
			ПоказатьВопрос(Новый ОписаниеОповещения(""ВопросЗавершение"", Вычислить(ЭтотОбъектФорма), ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Нет, ""Вопрос"", КодВозвратаДиалога.Нет);
			
		КонецЕсли;
	Исключение
		ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПоказатьОшибкуНаСервере(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры // СкопироватьОбработкуДляОтладки()

&НаКлиенте
Процедура СкопироватьОбработкуДляОтладкиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СкопироватьОбработкуДляОтладки(Неопределено);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЗапросыДляОтладкиНаСервере()
	
	ФайлыСЗапросамиДляОтладки = НайтиФайлы(КаталогВременныхФайлов(),""*."" + ОбъектОбработки(ТипОбработка, СеансовыеДанные).гРасширениеФайлаДаныхДляОтладки(),Ложь);	
	
	КоличествоЗагруженныхЗапросов = ФайлыСЗапросамиДляОтладки.Количество();
	Если КоличествоЗагруженныхЗапросов > 0 Тогда 
		
		ДеревоЗапросовЗначение = РеквизитФормыВЗначение(""ДеревоЗапросов"");
		
		ШаблонИмени = ""Запрос для отладки"";
		Для Каждого ФайлСЗапросом Из ФайлыСЗапросамиДляОтладки Цикл
			
			ДанныеДляОтладки = ЗначениеИзФайла(ФайлСЗапросом.ПолноеИмя);
			
			НовыйЗапрос = ДеревоЗапросовЗначение.Строки.Добавить();
			
			НовыйЗапрос.ТекстЗапроса  = ДанныеДляОтладки.ТекстЗапроса;
			НовыйЗапрос.Имя           = ПолучитьСледующееУникальноеИмя(ШаблонИмени, ДеревоЗапросовЗначение.Строки, ""Имя"");
			НовыйЗапрос.Идентификатор = Новый УникальныйИдентификатор;
			
			Для каждого ПараметрЗапроса Из ДанныеДляОтладки.ПараметрыЗапроса Цикл
				НоваяСтрока1 = ПараметрыЗапросов.Добавить();
				НоваяСтрока1.ИдентификаторЗапроса = НовыйЗапрос.Идентификатор;
				НоваяСтрока1.Значение             = ЗначениеВСтрокуВнутр(ПараметрЗапроса.Значение);
				НоваяСтрока1.Имя                  = ПараметрЗапроса.Ключ;
				НоваяСтрока1.Тип                  = ТипЗнч(ПараметрЗапроса.Значение); // #Рефакторинг
			КонецЦикла; 
			
			УдалитьФайлы(ФайлСЗапросом.ПолноеИмя);
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
		ЗначениеВРеквизитФормы(ДеревоЗапросовЗначение, ""ДеревоЗапросов"");
		
	КонецЕсли;
	
	Возврат КоличествоЗагруженныхЗапросов
	
КонецФункции // ЗагрузитьЗапросыДляОтладкиНаСервере()

&НаКлиенте
Процедура ЗагрузитьЗапросыДляОтладки(Команда)
	
	//Если Модифицированность Тогда 
	//	СинхронизироватьДанныеЗапросаВЭлементахФормы();
	//КонецЕсли;
	
	лРезультатЗагрузки = ЗагрузитьЗапросыДляОтладкиНаСервере();
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[ДеревоЗапросов.ПолучитьЭлементы().Количество()-1].ПолучитьИдентификатор();	
	
	Если лРезультатЗагрузки = 0 Тогда 
		ПоказатьПредупреждение(, ""Не найдено данных для отладки."", 10, ""Информация"");
	Иначе
		ОтобразитьДеревоЗапросов(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДействияКнопкаМенюIntellisense(Команда)
	ОткрытьМенюIntelliSense(ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКоличествоСтрокРезультатаЗапроса(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры // ПоказатьКоличествоСтрокРезультатаЗапроса()

&НаКлиенте
Процедура НоваяСтрокаНаТомЖеУровне(Команда)
	лРодительТекущейстроки = ДеревоЗапросов.НайтиПоИдентификатору(мТекущаяСтрокаДереваЗапросов).ПолучитьРодителя();
	лНоваястрока = ?(лРодительТекущейстроки = Неопределено, ДеревоЗапросов, лРодительТекущейстроки).ПолучитьЭлементы().Добавить();
	лНоваястрока.Идентификатор = Новый УникальныйИдентификатор;
	Элементы.ДеревоЗапросов.ТекущаяСтрока = лНоваястрока.ПолучитьИдентификатор();
КонецПроцедуры // НоваяСтрокаНаТомЖеУровне()

#КонецОбласти

#Область ОбработчикиПрограммноДобавленныхЭлементов

&НаКлиенте
Процедура ВыборМенюИнформация(Кнопка, ДополнительныеПараметры) Экспорт
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение(гНажатиеНаКнопкуВыборМенюИнформацияНаСервере(Кнопка.Значение, Истина));
КонецПроцедуры // ВыборМенюИнформация()

&НаКлиенте
Процедура ВыборМенюДействие(Кнопка, ДополнительныеПараметры) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВыборМенюДействие()

&НаКлиенте
Процедура МенюИнформация(Команда)
	Оповещение = Новый ОписаниеОповещения(""ВыборМенюИнформация"", Вычислить(ЭтотОбъектФорма)); 
	ПоказатьВыборИзМеню(Оповещение, ПолучитьМенюНаСервереСписком(""Информация"", ТипОбработка, СеансовыеДанные));
КонецПроцедуры

&НаКлиенте
Процедура МенюДополнительно(Команда)
	Оповещение = Новый ОписаниеОповещения(""ВыборМенюДействие"", Вычислить(ЭтотОбъектФорма)); 
	ПоказатьВыборИзМеню(Оповещение, ПолучитьМенюНаСервереСписком(""Дополнительно"", ТипОбработка, СеансовыеДанные));	
КонецПроцедуры

&НаКлиенте
Процедура СервисЗагрузитьИзБуфераВТаблицуСРезультатом(Команда)
	
	лДанныеИзБуфера = ПодготовитьДанныеИзБуфера();
	Если лДанныеИзБуфера.КоличествоКолонок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультата              = ПоместитьРезультатВХранилищеНаСервере(РеквизитыТаблицыРезультата.ИмяРеквизита);
	лКоличествоКолонокЭлементаТЗ = ПолучитьКоличествоКолонокРезультатаНаСервере(АдресРезультата);

	Если лДанныеИзБуфера.КоличествоКолонок > лКоличествоКолонокЭлементаТЗ Тогда 
		ТекстВопроса  = НСтр(""ru = 'Добавить колонки в таблице?'"");
		КнопкиВопроса = РежимДиалогаВопрос.ДаНетОтмена;
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить(""ИдВопроса""                     , ""ДобавитьКолонкиВТаблице"");
		ПараметрыВопроса.Вставить(""МассивКолонокСтрокиТаблицы""    , лДанныеИзБуфера.МассивКолонок);
		ПараметрыВопроса.Вставить(""Текст""                         , лДанныеИзБуфера.Текст);
		ПараметрыВопроса.Вставить(""Разделитель""                   , лДанныеИзБуфера.Разделитель);
		ПоказатьВопрос(Новый ОписаниеОповещения(""ВопросЗавершение"", Вычислить(ЭтотОбъектФорма), ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Нет, ""Вопрос"", КодВозвратаДиалога.Нет);
	Иначе
		ТекстВТаблицуНаСервере(лДанныеИзБуфера.МассивКолонок, лДанныеИзБуфера.Текст, Ложь, лДанныеИзБуфера.Разделитель);
		ОбновитьСостояниеРезультатаЗапроса();
	КонецЕсли;

КонецПроцедуры // СервисЗагрузитьИзБуфераВТаблицуСРезультатом()

&НаКлиенте
Процедура КнопкаДействияКнопкаМенюВыполнитьКод(Команда)
	ОбработкаДействияВыполнитьКод();
КонецПроцедуры

&НаКлиенте
Процедура СервисВыгрузитьВПараметр(Команда)
	ОбработкаДействияВыгрузитьВПараметр();
КонецПроцедуры // СервисВыгрузитьВПараметр()

&НаКлиенте
Процедура КодЗапросСформироватьКод(Команда)
	
	ТекстВопроса  = НСтр(""ru = 'Скопировать в буфер?'"");
	КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить(""ИдВопроса"", ""СкопироватьСтрокуВБуфер"");
	ПараметрыВопроса.Вставить(""Строка""   , гСформироватьКодЗапросаДля1С(ТипОбработка, СеансовыеДанные, ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса, ПараметрыВСоответствие(), Команда.Имя));
	ПоказатьВопрос(Новый ОписаниеОповещения(""ВопросЗавершение"", Вычислить(ЭтотОбъектФорма), ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Нет, ""Вопрос"", КодВозвратаДиалога.Нет);
	
КонецПроцедуры // КодЗапросСформироватьКод()

&НаКлиенте
Процедура КодЗапросПолучитьЗапрос(Команда)
	ОбработкаДействияКодЗапросПолучитьЗапрос(Найти(Команда.Имя, гРежимыПолученияЗапросаИзКода(ТипОбработка, СеансовыеДанные).СОбработкой) = 0);
КонецПроцедуры // КодЗапросПолучитьЗапрос()

&НаКлиенте
Процедура ДополнительноПоиск(Команда)
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрПоиск"",,Вычислить(ЭтотОбъектФорма));
КонецПроцедуры // ДополнительноПоиск()

&НаСервере
Функция СписокОбъектовМетаданныхИзТекстаСервере(ТекстЗапроса)
	//#рефакторинг ошибка возврата менеджера, для упр форм необходимо возвращать в другом виде
	//Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСписокОбъектовМетаданныхИзТекста(ТекстЗапроса);
КонецФункции // СписокОбъектовМетаданныхИзТекстаСервере()

&НаКлиенте
Процедура ДополнительноОткрытьФормуСпискаМетаданногоизЗапроса(Команда)
	//Временный алгоритм. Необходимо сделать универсальный для других объектов метаданных!!!!

	//СписокОбъектовМетаданных = СписокОбъектовМетаданныхИзТекстаСервере(ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса);
	//
	//Если СписокОбъектовМетаданных.Количество() > 0 Тогда 
	//	ВыбЗначениеМетаданного = СписокОбъектовМетаданных.ВыбратьЭлемент(""Выберите объект для открытия формы списка."");
	//	Если ВыбЗначениеМетаданного <> Неопределено Тогда 
	//		ВыбЗначениеМетаданного.Значение.ПолучитьФормуСписка().Открыть();
	//	КонецЕсли;
	//Иначе
	//	ПоказатьПредупреждение(,""Не найдены метаданные в запросе."");
	//КонецЕсли;
КонецПроцедуры // ДополнительноПоиск()

#КонецОбласти 

#КонецОбласти

#Область ЗавершенияАсинхронныхВызовов

&НаСервере
Процедура ПоказатьВводСтрокиЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ПоказатьВводСтрокиЗавершение()

&НаСервере
Процедура ВыполнитьДействиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		//Сообщить(""Отмена""); //#рефакторинг реализовтаь действия при отмене
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыполненияКода(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип(""Структура"") Тогда 
		
		Если Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, ""Сохранить"") ИЛИ 
			Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, ""Выполнить"") Тогда 
			
			лСтарыйКод = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока).Идентификатор));
			Для каждого лСтрокаСоСтарымКодом Из лСтарыйКод Цикл
				ИсполняемыйКод.Удалить(лСтрокаСоСтарымКодом);
			КонецЦикла; 
			
			лНовыйКод = Результат.ИсполняемыйКод;
			Для каждого лСтрокаСНовымКодом Из лНовыйКод Цикл
				лНоваяСтрока = ИсполняемыйКод.Добавить();
				ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтрокаСНовымКодом);
				лНоваяСтрока.ИдентификаторЗапроса = Результат.ИдентификаторЗапроса;
			КонецЦикла; 
			
			Модифицированность = Истина;
		КонецЕсли;
		
		Если Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, ""Выполнить"") Тогда 
			
			Если Результат.ВыполнитьНаСервере Тогда 
				ВыполнитьНаСервере(Результат.Текст)
			Иначе
				Попытка
					Выполнить(Результат.Текст);
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);		
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте 
Процедура ОткрытьКонструкторЗапросаЗавершение(Текст, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры.СтруктураГраницВыделения <> Неопределено Тогда 
		лГраницыВыделения = ДополнительныеПараметры.СтруктураГраницВыделения;
		ТекущийЭлемент.УстановитьГраницыВыделения(лГраницыВыделения.НачалоСтрока,лГраницыВыделения.КолонкаНач,лГраницыВыделения.СтрокаКон,лГраницыВыделения.КолонкаКон);
	КонецЕсли;
	
	Если Текст <> Неопределено Тогда 
		Если ДополнительныеПараметры.СтруктураГраницВыделения = Неопределено Тогда 
			ПолучитьУстановитьТекущийТекстЗапроса(Текст);
		Иначе
			ТекущийЭлемент.ВыделенныйТекст = Текст;
		КонецЕсли;
	Иначе
		Модифицированность = ДополнительныеПараметры.Модифицированность;
	КонецЕсли; 
	
	Если ДополнительныеПараметры.СтруктураГраницВыделения <> Неопределено Тогда 
		ТекущийЭлемент.УстановитьГраницыВыделения(лГраницыВыделения.НачалоСтрока,лГраницыВыделения.КолонкаНач, лГраницыВыделения.НачалоСтрока + СтрЧислоСтрок(Текст) - 1, СтрДлина(СтрПолучитьСтроку(Текст,СтрЧислоСтрок(Текст))) + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    лДиалог   = ДополнительныеПараметры.Диалог;
	лОперация = ДополнительныеПараметры.Операция;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
		Если лДиалог.Режим = РежимДиалогаВыбораФайла.Сохранение Тогда 
			СохранитьФайлСЗапросом(лДиалог.ПолноеИмяФайла);
			Если мОперацияПослеСохраненияИзменений <> Неопределено Тогда 
				ВыполнитьОперациюПослеСохраненияИзменений(мОперацияПослеСохраненияИзменений);
			КонецЕсли;
		Иначе
			ЗагрузитьЗапросы(лДиалог.ПолноеИмяФайла, лОперация);
		КонецЕсли;		
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, Модифицированность) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Модифицированность Тогда 
		СохранитьФайлСЗапросом(ИмяФайлаСЗапросом);
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействияПриЗакрытииформы();
	
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
Процедура ВопросЗавершение(РезультатВопроса, ПараметрыВопроса) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Таймаут Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВопроса.ИдВопроса = ""ПоказатьИнструкциюСформироватьКодДляОтладкиНаСервере"" Тогда 
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
			ТекстСообщения = ""Для отладки запроса необходимо:
				|1. Установить точку останова перед выполнение запроса (Например, перед строкой """"Запрос.Выполнить()"""". 
				|2. Когда точка останова отработает, нажмите Shift + F9 (""""Вычислить выражение"""")).
				|3. В поле ввода """"Выражение"""" ввести следующий текст: 
				|	ВнешниеОбработки.Создать("""""" + ПараметрыВопроса.ПутьКФайлуСОбработкойНаСервере + """""", Ложь).ВыгрузитьДанныеДляОтладки(ЗАПРОС)
				|		--> вместо слова """"ЗАПРОС"""" подставляем имя переменной, со значением запроса, который предстоит отладить)
				|	и нажать кнопку """"Рассчитать"""". 
				|		--> в результате на сервере приложений по указанному адресу сформируется файл с данными для отладки
				|4. Продолжить отладку(F5).
				|5. В режиме предприятия, в обработке необходимо нажать на кнопку """"Загрузить данные для отладки"""".
				|		--> при этом в список запросов добавится новый запрос(или несколько новых запросов) с заполненными параметрами"";
				
			ТД = Новый ТекстовыйДокумент(); 		
			ТД.УстановитьТекст(ТекстСообщения);
			ТД.Показать(""Инструкция по отладке запросов.""); 
		КонецЕсли;
	ИначеЕсли ПараметрыВопроса.ИдВопроса = ""ДобавитьКолонкиВТаблице"" Тогда 
		Если РезультатВопроса <> КодВозвратаДиалога.Отмена Тогда 
			ТекстВТаблицуНаСервере(ПараметрыВопроса.МассивКолонокСтрокиТаблицы, ПараметрыВопроса.Текст, (РезультатВопроса = КодВозвратаДиалога.Да), ПараметрыВопроса.Разделитель);
			ОбновитьСостояниеРезультатаЗапроса();
		КонецЕсли;		
	ИначеЕсли ПараметрыВопроса.ИдВопроса = ""СкопироватьСтрокуВБуфер"" Тогда 
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
			лhtmlfile = Новый COMОбъект(""htmlfile""); лhtmlfile.parentWindow.clipboardData.setData(""text"", ПараметрыВопроса.Строка);
		Иначе
			ТД = Новый ТекстовыйДокумент();
			ТД.УстановитьТекст(ПараметрыВопроса.Строка);
			ТД.Показать(,);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ВопросЗавершение()

&НаКлиенте
Процедура СохранитьИзмененияЗавершение(РезультатВопроса, Знач Операция) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		мОперацияПослеСохраненияИзменений = Операция;
		лПродолжитьОперациюПослеСохранения = СохранитьФайлСЗапросом(ИмяФайлаСЗапросом);
	Иначе
		лПродолжитьОперациюПослеСохранения = Истина;
	КонецЕсли;
	
	Если лПродолжитьОперациюПослеСохранения Тогда 
		ВыполнитьОперациюПослеСохраненияИзменений(Операция);
	КонецЕсли;
	
КонецПроцедуры // СохранитьИзмененияЗавершение()

&НаКлиенте
Процедура ПослеВопросаСохранитьИзмененияПродолжение(Результат, Параметры) Экспорт
	
	Перем лОперация;
	
	Если Не Параметры.Свойство(""Операция"", лОперация) Тогда 
		лОперация = Неопределено;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		
		Если лОперация = гОперацииСЗапросами(ТипОбработка, СеансовыеДанные).Новый Тогда 
			//СоздатьНовыйФайлЗапросов();
		ИначеЕсли лОперация = гОперацииСЗапросами(ТипОбработка, СеансовыеДанные).Открыть Тогда 
			//ОткрытьЗапросыДействие(Истина);
		ИначеЕсли лОперация = ""ЗакрытьФорму"" Тогда // #рефакторинг определить константу
			//ВыполнитьЗакрытиеформы();
		КонецЕсли;		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
		//СохранитьЗапросыЛокально(Ложь, Ложь, Новый Структура(""Операция"", лОперация));
	КонецЕсли;
	
КонецПроцедуры // ПослеВопросаСохранитьИзмененияПродолжение()

&НаКлиенте
Процедура ВыполнитьОперациюПослеСохраненияИзменений(Операция)
	
	мОперацияПослеСохраненияИзменений = Неопределено;

	Если Операция = мОперацииСЗапросами.Открыть Тогда 
		ДиалогВыбораФайлаОбщий(Операция);
	ИначеЕсли Операция = мОперацииСЗапросами.Новый Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;
КонецПроцедуры // ВыполнитьОперациюПослеСохраненияИзменений()

&НаКлиенте
Процедура ПослеВыбораЭлементаИзСпискаЗначений(ВыбранноеЗначение, Параметры) Экспорт
	// ПРОЦЕДУРА ДУБЛЬ(!!!)
	
	лДанныеДляПодбораКП = Параметры.ДанныеДляПодбораКП;
	лСтруктураКоординат = Параметры.СтруктураКоординат;
	лПолеТекстаЗапроса  = Параметры.ПолеТекстаЗапроса;
	лЭтоУсловие         = (Параметры.ДанныеДляПодбораКП.РежимКП.Режим = ""Условия"");
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		лВременныйТД = Новый ТекстовыйДокумент;
		Если ТипЗнч(ВыбранноеЗначение) = Тип(""СписокЗначений"") Тогда 
			лРезультатПодстановкиКП = """";
			Для каждого ЭлементСписка Из ВыбранноеЗначение Цикл
				Если Не ЭлементСписка.Пометка Тогда 
					Продолжить;
				КонецЕсли;
				Если лЭтоУсловие Тогда 
					лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = """", """", "" И "") + ЭлементСписка.Значение + "" = &"" + ЭлементСписка.Значение;
				Иначе
					лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = """", """", "", "") + ЭлементСписка.Значение;
				КонецЕсли;
			КонецЦикла; 
		Иначе
			лРезультатПодстановкиКП = ВыбранноеЗначение.Значение
		КонецЕсли;
		лВременныйТД.УстановитьТекст(лРезультатПодстановкиКП);
		
		лТекстЗапроса = Лев(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора, СтрДлина(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора) - СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)) + 
			лРезультатПодстановкиКП + Сред(лДанныеДляПодбораКП.ТекстЗапросаПослеКурсора, СтрДлина(лДанныеДляПодбораКП.СловоПослеКурсора) + 1);
			
		лРезультатКП = Новый Структура(""ТекстЗапроса, Режим, дельта_x, дельта_y, дельта_x1, дельта_y1"", 
			лТекстЗапроса, 
			лДанныеДляПодбораКП.РежимКП.Режим,
			СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора), 
			0, 
			СтрДлина(лВременныйТД.ПолучитьСтроку(лВременныйТД.КоличествоСтрок())) - ?(лВременныйТД.КоличествоСтрок() > 1, 0, СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)), 
			лВременныйТД.КоличествоСтрок() - 1
			);
	КонецЕсли;
	
	Если лРезультатКП <> Неопределено Тогда 
		
		ПолучитьУстановитьТекущийТекстЗапроса(лРезультатКП.ТекстЗапроса);
		
		Если ПродолжитьФормироватьКПНаСервере(лРезультатКП.Режим, лРезультатПодстановкиКП) Тогда
			лПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.НачалоСтрока + лРезультатКП.дельта_y1, лСтруктураКоординат.КолонкаНач + лРезультатКП.дельта_x1,
				лСтруктураКоординат.НачалоСтрока + лРезультатКП.дельта_y1, лСтруктураКоординат.КолонкаНач + лРезультатКП.дельта_x1);
			ОткрытьМенюIntelliSense(лПолеТекстаЗапроса)
		Иначе
			лПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.НачалоСтрока - лРезультатКП.дельта_y, лСтруктураКоординат.КолонкаНач - лРезультатКП.дельта_x, 
				лСтруктураКоординат.НачалоСтрока + лРезультатКП.дельта_y1, лСтруктураКоординат.КолонкаНач + лРезультатКП.дельта_x1);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПослеВыбораЭлементаИзСпискаЗначений()

&НаКлиенте
Процедура ЗавершениеВыбораТипаПараметра(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ИнициализацияТипаИЗначенияПараметра(Элементы.ПараметрыТекущегоЗапроса.ТекущаяСтрока, ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление, ВыбранныйЭлемент.Картинка);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ЗавершениеВыбораТипаПараметра()

&НаКлиенте
Процедура ОбновитьПараметрСТаблицейЗначений(Параметр)
	ТекущиеДанные                = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;	
	ТекущиеДанные.Значение       = Параметр;	
	ТекущиеДанные.ЗначениеВФорме = ФормированиеПредставленияЗначения(ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыборКолонкиВыгрузитьВПараметр(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ДополнительныеПараметры.Действие = ""СоздатьПараметрИзБуфера"" Тогда 
			//ОбработкаДействияСоздатьПараметрИзБуфераНаСервере(?(ВыбранныйЭлемент.Значение = ОбщиеПеречисления().ВсеКолонки, Неопределено, ВыбранныйЭлемент.Значение), ДополнительныеПараметры.Данные);
			ОбработкаДействияВыгрузитьВПараметрНаСервере(?(ВыбранныйЭлемент.Значение = ОбщиеПеречисления().ВсеКолонки, Неопределено, ВыбранныйЭлемент.Значение), ""ИзБуфера"", ДополнительныеПараметры.Данные);
		ИначеЕсли ДополнительныеПараметры.Действие = ""ВыгрузитьТаблицуРезультатаВПараметр"" Тогда 
			ОбработкаДействияВыгрузитьВПараметрНаСервере(?(ВыбранныйЭлемент.Значение = ОбщиеПеречисления().ВсеКолонки, Неопределено, ВыбранныйЭлемент.Значение), ""ИзТаблицыРезультата"");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗавершениеВыборКолонкиВыгрузитьВПараметр()

&НаКлиенте
Процедура ПослеЗакрытияВопросаСоздатьНовыйФайл(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;
КонецПроцедуры // ПослеЗакрытияВопросаСоздатьНовыйФайл()

#КонецОбласти

#Область КонтекстнаяПодсказка

&НаСервере
Функция ПродолжитьФормироватьКПНаСервере(Режим, ВыбранноеЗначение)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПродолжитьФормироватьКП(Режим, ВыбранноеЗначение)
КонецФункции

&НаКлиенте
Функция ПолучитьУстановитьТекущийТекстЗапроса(НовыйТекстЗапроса = Неопределено)
	
	лЭлементФормы = Элементы.ТекстТекущегоЗапроса;
	
	Если НовыйТекстЗапроса = Неопределено Тогда 
		Возврат Новый Структура(""ЭлементФормы, ТекстЗапроса"", лЭлементФормы, ТекстТекущегоЗапроса);
	КонецЕсли;
	
	лЭлементФормы.УстановитьГраницыВыделения(1,СтрДлина(ТекстТекущегоЗапроса) + 1);
	лЭлементФормы.ВыделенныйТекст = НовыйТекстЗапроса;
	
	Возврат Неопределено
	
КонецФункции // ПолучитьУстановитьТекущийТекстЗапроса()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция гПолучитьГраницыВыделенияПоляФормы(ПолеФормы)
	
	НачалоСтрока = 1;
	КолонкаНач	= 1;              
	СтрокаКон   = 1;
	КолонкаКон	= 1;
	ПолеФормы.ПолучитьГраницыВыделения(НачалоСтрока, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Возврат Новый Структура(""НачалоСтрока, КолонкаНач, СтрокаКон, КолонкаКон"", НачалоСтрока, КолонкаНач, СтрокаКон, КолонкаКон)
	
КонецФункции // гПолучитьГраницыВыделенияПоляФормы()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция ПолучитьПозициюКурсораВТексте(ПолеФормыСТекстом, СтруктураКоординат)
	
	// выделяем текст от начала, до текущего
	ПолеФормыСТекстом.УстановитьГраницыВыделения(1, 1, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Результат = СтрДлина(ПолеФормыСТекстом.ВыделенныйТекст);

	// возвращаем исходное выделение
	ПолеФормыСТекстом.УстановитьГраницыВыделения(СтруктураКоординат.НачалоСтрока, СтруктураКоординат.КолонкаНач, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Возврат Результат
	
КонецФункции // ПолучитьПозициюКурсораВТексте()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Процедура ОткрытьМенюIntelliSense(ПолеТекстаЗапроса)
	
	Если ПолеТекстаЗапроса.ВыделенныйТекст <> """" тогда
		Возврат
	Конецесли;
	
	Если Не гИнициализацияVBScript() тогда
		Возврат;	
	КонецЕсли;
	
	//Запоминаем текущие координаты курсора 
	лСтруктураКоординат = гПолучитьГраницыВыделенияПоляФормы(ПолеТекстаЗапроса);
	
	лТекстЗапроса   = ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса;
	лТекстЗапросаТД = Новый ТекстовыйДокумент;
	лТекстЗапросаТД.УстановитьТекст(лТекстЗапроса);

	//Если позиция курсора больше длины текущей строки, то перемещаем курсор в конец строки
	лТекущаяСтрока = лТекстЗапросаТД.ПолучитьСтроку(лСтруктураКоординат.НачалоСтрока);
	Если СтрДлина(лТекущаяСтрока) < лСтруктураКоординат.КолонкаКон тогда
		лСтруктураКоординат.КолонкаНач = СтрДлина(лТекущаяСтрока)+1;
		лСтруктураКоординат.КолонкаКон = лСтруктураКоординат.КолонкаНач;
	КонецЕсли;
	
	лПозицияКурсораВТексте = ПолучитьПозициюКурсораВТексте(ПолеТекстаЗапроса, лСтруктураКоординат);
	
	лДанныеДляПодбораКП = ПолучитьДанныеДляПодбораКПНаСервере(лТекстЗапроса, лПозицияКурсораВТексте);
	
	Если лДанныеДляПодбораКП <> Неопределено Тогда 
		
		// выбираем значения контекстной подсказки
		Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 0 Тогда 
			Возврат;
		Иначе
			лПараметрыОповещения = Новый Структура(""ДанныеДляПодбораКП, СтруктураКоординат, ПолеТекстаЗапроса"", лДанныеДляПодбораКП, лСтруктураКоординат, ПолеТекстаЗапроса);
			Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 1 Тогда 
				ПослеВыбораЭлементаИзСпискаЗначений(лДанныеДляПодбораКП.ЗначенияДляВыбора[0], лПараметрыОповещения)
			Иначе
				лОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения(""ПослеВыбораЭлементаИзСпискаЗначений"", Вычислить(ЭтотОбъектФорма), лПараметрыОповещения);
				Если лДанныеДляПодбораКП.МножественныйВыбор Тогда 
					лДанныеДляПодбораКП.ЗначенияДляВыбора.ПоказатьОтметкуЭлементов(лОповещениеПослеВыбораЭлемента);
				Иначе
					лДанныеДляПодбораКП.ЗначенияДляВыбора.ПоказатьВыборЭлемента(лОповещениеПослеВыбораЭлемента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОткрытьМенюIntelliSense()

//ПРОЦЕДУРА ДУБЛЬ(!!!)
&НаКлиенте
Функция гИнициализацияVBScript()
	
	Если RegExp <> Неопределено Тогда 
		Возврат Истина
	КонецЕсли;
	
	Попытка
		RegExp = Новый COMОбъект(""VBScript.RegExp"");
	Исключение
		RegExp = Неопределено;
		Сообщить(""Ошибка инициализации VBScript.RegExp."", СтатусСообщения.Важное);
		Возврат False;
	КонецПопытки;
	
	RegExp.Multiline=False;
	RegExp.Global=True;
	RegExp.IgnoreCase=True;
	
	Возврат True;
	
КонецФункции // гИнициализацияVBScript

&НаСервере
Функция ПолучитьДанныеДляПодбораКПНаСервере(ТекстЗапроса, лПозицияКурсораВТексте)
	
	Результат = ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьДанныеДляПодбораКП(ТекстЗапроса, лПозицияКурсораВТексте);
	
	Возврат Результат
	
КонецФункции


#КонецОбласти

#Область РаботаСПараметрамиЗапроса

&НаСервереБезконтекста
Функция ПолучитьПараметрыЗапросаНаСервере(ТекстЗапроса, ТекстОшибки)

	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		лПараметры = Запрос.НайтиПараметры();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	лРезультат = Новый Массив;
	Для Каждого лПараметр Из лПараметры Цикл
		Если лПараметр.ТипЗначения.Типы().Количество() > 0 Тогда 
			лТипЗначения = лПараметр.ТипЗначения;
		Иначе
			лТипЗначения = Новый ОписаниеТипов(""Строка"");
		КонецЕсли;
			
		лРезультат.Добавить(Новый Структура(""Имя, ТипЗначения, ИмяXML"", лПараметр.Имя, лТипЗначения, XMLТип(лТипЗначения.Типы()[0]).ИмяТипа));
	КонецЦикла;
	
	Возврат лРезультат

КонецФункции // ПолучитьПараметрыЗапросаНаСервере()
 
&НаКлиенте
Функция ЗаполнитьПараметрыЗапросовНаСервере(ТекстЗапроса, ТекстОшибки)
	
	лПараметры = ПолучитьПараметрыЗапросаНаСервере(ТекстЗапроса, ТекстОшибки);
	
	Если лПараметры = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	//#заполнениепараметровзапроса 2
	Для Каждого Параметр Из лПараметры Цикл
		лИмяПараметра      = Параметр.Имя;
		лСтрокаСПараметром = НайтиЗначениеБезУчетаРегистра(лИмяПараметра, ПараметрыТекущегоЗапроса, ""Имя"");
		Если лСтрокаСПараметром = Неопределено Тогда 
			лСтрокаСПараметром     = ПараметрыТекущегоЗапроса.Добавить();
			лСтрокаСПараметром.Имя = лИмяПараметра;
		КонецЕсли;                                                    
		
		Если Параметр.ТипЗначения.Типы().Количество() > 0 Тогда 
			ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Строка(Параметр.ТипЗначения.Типы()[0]));             // простые типы
			Если ДанныеПоТипу = Неопределено Тогда
				ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Параметр.ИмяXML); // сложные типы
			КонецЕсли;
			ИнициализацияТипаИЗначенияПараметра(лСтрокаСПараметром.ПолучитьИдентификатор(), ДанныеПоТипу.Значение, ДанныеПоТипу.Представление, ДанныеПоТипу.Картинка);
		Иначе
			ИнициализацияТипаИЗначенияПараметра(лСтрокаСПараметром.ПолучитьИдентификатор(), ТипЗнч(""""), ""Строка"", );
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПараметрыЗапросовНаСервере()

&НаСервере
Функция ПолучитьСледующееУникальноеИмяПараметра(Знач ИсходноеИмя)
	
	ТекущийЗапрос    = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	СписокПараметров = ДанныеФормыВЗначение(ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ТекущийЗапрос.Идентификатор)), Тип(""ТаблицаЗначений""));
	
	Возврат ПолучитьСледующееУникальноеИмя(ИсходноеИмя, СписокПараметров, ""Имя"")
	
КонецФункции

&НаКлиенте
Процедура ОбработкаДействийЗаполнитьПараметрыИзЗапроса()
	
	Перем лТекстОшибки;
	
	лТекстЗапроса = ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса;
	
	Если Не ПустаяСтрока(лТекстЗапроса) Тогда
		
		Если Не ЗаполнитьПараметрыЗапросовНаСервере(лТекстЗапроса, лТекстОшибки) Тогда 
			ПоказатьСообщениеПользователю(лТекстОшибки, ""Объект"");
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		лТекстПредупреждения = НСтр(""ru = 'Текст запроса пустой.'"");
		ПоказатьПредупреждение(, лТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаДействийЗаполнитьПараметрыИзЗапроса()

&НаКлиенте
Функция ПараметрыВСоответствие()
	
	лПараметрыСоответствие = Новый Соответствие;
	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
		лПараметрыСоответствие.Вставить(лПараметр.Имя, Новый Структура(""Значение"", лПараметр.Значение));
	КонецЦикла; 
	
	Возврат лПараметрыСоответствие;
КонецФункции

#КонецОбласти

#Область РаботаСИнтерфейсом

&НаКлиенте
Процедура ВывестиПозициюКурсора()
	
	Если АвтоопределениеПозицииКурсора Тогда 
		СтруктураВыделенногоТекста = ПолучитьСтруктуруВыделенногоТекста();
		лНовыйЗаголовок = ""Строка: "" + СтруктураВыделенногоТекста.КонецСтроки + "" Кол: "" + СтруктураВыделенногоТекста.КонецКолонки;
		ПодключитьОбработчикОжидания(""ВывестиПозициюКурсора"", 1);
	Иначе
		лНовыйЗаголовок = ""Определять позицию курсора"";
		ОтключитьОбработчикОжидания(""ВывестиПозициюКурсора"");
	КонецЕсли;
	
	Если Элементы.ФормаКнопкаПозицияКурсора.Заголовок <> лНовыйЗаголовок Тогда 
		Элементы.ФормаКнопкаПозицияКурсора.Заголовок = лНовыйЗаголовок;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура КомментированиеВыделенногоТекста(УстановитьКомментарий)

	лИзменяемыйТекст                = Новый ТекстовыйДокумент;
	лСтруктураТекущегоТекстаЗапроса = ПолучитьУстановитьТекущийТекстЗапроса();
	лЭлементформыСТекстомЗапроса    = лСтруктураТекущегоТекстаЗапроса.Элементформы;
	
	лИзменяемыйТекст.УстановитьТекст(лСтруктураТекущегоТекстаЗапроса.ТекстЗапроса);
	
	СтруктураВыделенногоТекста = ПолучитьСтруктуруВыделенногоТекста();
	
	Для Сч = СтруктураВыделенногоТекста.НачалоСтрокиКомментария По СтруктураВыделенногоТекста.КонецСтрокиКомментария-1 Цикл
		
		Если УстановитьКомментарий Тогда
			лИзменяемыйТекст.ЗаменитьСтроку(Сч, ""//"" + лИзменяемыйТекст.ПолучитьСтроку(Сч));
		Иначе
			лТекущаяСтрока = лИзменяемыйТекст.ПолучитьСтроку(Сч);
			Если Найти(СокрЛ(лТекущаяСтрока), ""//"") = 1 Тогда 
				лИзменяемыйТекст.ЗаменитьСтроку(Сч, Сред(лТекущаяСтрока, Найти(лТекущаяСтрока, ""//"") + 2));			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	лЭлементформыСТекстомЗапроса.УстановитьГраницыВыделения(1, 1, лИзменяемыйТекст.КоличествоСтрок() + 1, 1);
	лЭлементформыСТекстомЗапроса.ВыделенныйТекст = лИзменяемыйТекст.ПолучитьТекст();
	лЭлементформыСТекстомЗапроса.УстановитьГраницыВыделения(СтруктураВыделенногоТекста.НачалоСтрокиКомментария, 
		СтруктураВыделенногоТекста.НачалоКолонкиКомментария, 
		СтруктураВыделенногоТекста.КонецСтрокиКомментария, 
		СтруктураВыделенногоТекста.КонецКолонкиКомментария);
	
	Модифицированность = Истина;                                        
	
КонецПроцедуры // КомментированиеВыделенногоТекста()

&НаКлиенте
Функция ПолучитьСтруктуруВыделенногоТекста()

	Перем НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки;
	
	ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	НачалоСтрокиКомментария = НачалоСтроки;
	
	Если КонецСтроки > НачалоСтроки И КонецКолонки = 1 Тогда 
		КонецСтрокиКомментария = КонецСтроки;
	Иначе
		КонецСтрокиКомментария = КонецСтроки + 1;
	КонецЕсли;
	
	НачалоКолонкиКомментария = 1;
	КонецКолонкиКомментария  = 1;
	
	Возврат Новый Структура(""НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, НачалоСтрокиКомментария, НачалоКолонкиКомментария, КонецСтрокиКомментария, КонецКолонкиКомментария"", 
		НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, НачалоСтрокиКомментария, НачалоКолонкиКомментария, КонецСтрокиКомментария, КонецКолонкиКомментария);

КонецФункции // ПолучитьСтруктуруВыделенногоТекста()

&НаКлиенте
Процедура ОтобразитьДеревоЗапросов(НоваяВидимость, Страница = Неопределено)
	
	ОформитьНажатиеКнопки(""ПоказатьДеревоЗапросов"", НоваяВидимость);
	
	Если НоваяВидимость <> мДеревоЗапросовВидимость Тогда 
		
		//СинхронизироватьДанныеЗапросаВЭлементахФормы();
		
		Элементы.ДеревоЗапросов.Видимость = НоваяВидимость;
		мДеревоЗапросовВидимость = НоваяВидимость;
	КонецЕсли;
	
	Если мДеревоЗапросовВидимость Тогда 
		Элементы.ПоказатьДеревоЗапросов.РасширеннаяПодсказка.Заголовок = ""Скрыть дерево запросов"";
	Иначе
		Элементы.ПоказатьДеревоЗапросов.РасширеннаяПодсказка.Заголовок = ""Показать дерево запросов"";
	КонецЕсли;
	
	Если Элементы.ДеревоЗапросов.ТекущаяСтрока = Неопределено Тогда
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьДеревоЗапросов()

&НаКлиенте
Процедура РасшифроватьСпецПоле(ИмяПоля, ИдентификаторСтроки, ТипПоля)

	ПараметрыФормы = Новый Структура(""РежимОткрытияФормы, ИдентификаторСтроки, ИмяПоля, АдресТаблицыЗначений"", гРежимыОткрытияФормы(ТипОбработка, СеансовыеДанные).Расшифровка, ИдентификаторСтроки, ИмяПоля, АдресРезультата); 
	Если ТипПоля = ""Таблица значений"" Тогда 
		ОткрытьФорму(СтрЗаменить(ИмяФормы, "".ФормаУпр"", """") + "".ФормаУпрПустая"", ПараметрыФормы, ЭтаФорма);			
	Иначе
		ПоказатьПредупреждение(, ""Для типа """""" + ТипПоля + """""" расшифровка на текущий момент не реализована."", , ""Информация"");
	КонецЕсли;
	
КонецПроцедуры // РасшифроватьСпецПоле()

//&НаКлиенте
//Процедура СинхронизироватьДанныеЗапросаВЭлементахФормы()

//	лСтараяСтрока  = мТекущаяСтрокаДереваЗапросов;
//	лТекущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;
//	
//	// обновляем параметры запроса в дереве из предыдущей ветки
//	Если лСтараяСтрока <> Неопределено Тогда 

//		лСтараяСтрокаСЗапросом = ДеревоЗапросов.НайтиПоИдентификатору(лСтараяСтрока);
//		
//		лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", """"));		
//		Для каждого лПараметрЗапроса Из лПараметрыТекущегоЗапроса Цикл
//			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
//		КонецЦикла; 
//		
//		лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", лСтараяСтрокаСЗапросом.Идентификатор));
//		Для каждого лПараметрЗапроса Из лПараметрыТекущегоЗапроса Цикл
//			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
//		КонецЦикла; 
//		
//		Для каждого лПараметрЗапроса Из ПараметрыТекущегоЗапроса Цикл
//			лНоваяСтрока = ПараметрыЗапросов.Добавить();
//			ЗаполнитьЗначенияСвойств(лНоваяСтрока, лПараметрЗапроса);
//			Если лПараметрЗапроса.ГлобальныйПараметр Тогда 
//				лНоваяСтрока.ИдентификаторЗапроса = """";
//			Иначе
//				лНоваяСтрока.ИдентификаторЗапроса = лСтараяСтрокаСЗапросом.Идентификатор;
//			КонецЕсли;
//		КонецЦикла; 
//		
//		лСтрокаСЗапросом              = ДеревоЗапросов.НайтиПоИдентификатору(лСтараяСтрока);
//		лСтрокаСЗапросом.ТекстЗапроса = ТекстТекущегоЗапроса;
//		
//	КонецЕсли;

//	// загружаем параметры из дерева запросов в элемент формы при смене строки
//	Если лСтараяСтрока <> лТекущаяСтрока Тогда 
//		
//		//Если мВыполняетсяКопированиеСтрокиЗапроса = Истина Тогда 
//		//	лСтрокаСЗапросом = ДеревоЗапросов.НайтиПоИдентификатору(лСтараяСтрока);
//		//	
//		//	//// копируем код для старого запроса
//		//	//КодДляКопирования = ПолучитьКодДляЗапроса(лСтрокаСЗапросом.Идентификатор);
//		//	//Для каждого СтрокаСКодом Из КодДляКопирования Цикл
//		//	//	НоваяСтрокаСКодом = ИсполняемыйКод.Добавить();
//		//	//	НоваяСтрокаСКодом.Текст = СтрокаСКодом.Текст;
//		//	//	НоваяСтрокаСКодом.ИдентификаторСтроки = ДеревоЗапросов.НайтиПоИдентификатору(лТекущаяСтрока).Идентификатор;
//		//	//КонецЦикла; 
//		//	
//		//	мВыполняетсяКопированиеСтрокиЗапроса = Ложь;
//		//Иначе
//		//	лСтрокаСЗапросом = ДеревоЗапросов.НайтиПоИдентификатору(лТекущаяСтрока);
//		//КонецЕсли;
//		
//		ТекстТекущегоЗапроса = лСтрокаСЗапросом.ТекстЗапроса;
//		
//		ПараметрыТекущегоЗапроса.Очистить();
//		
//		лЕстьПараметрыБезТипов = Ложь;
//		
//		лМассивИдЗапросов = Новый СписокЗначений;
//		лМассивИдЗапросов.Добавить(Истина, """");
//		лМассивИдЗапросов.Добавить(Ложь  , лСтрокаСЗапросом.Идентификатор);
//		Для каждого идЗапроса Из лМассивИдЗапросов Цикл
//			лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", идЗапроса.Представление));		
//			Для каждого лПараметрЗапроса Из лПараметрыТекущегоЗапроса Цикл
//				лНоваяСтрока = ПараметрыТекущегоЗапроса.Добавить();
//				ЗаполнитьЗначенияСвойств(лНоваяСтрока, лПараметрЗапроса);
//				лНоваяСтрока.ГлобальныйПараметр = идЗапроса.Значение;
//				лНоваяСтрока.ЗначениеВФорме = ФормированиеПредставленияЗначения(лНоваяСтрока.Значение);
//				Если ПустаяСтрока(лНоваяСтрока.Тип) Тогда 
//					лЕстьПараметрыБезТипов = Истина;
//				КонецЕсли;
//			КонецЦикла; 
//		КонецЦикла; 
//		
//		Если лЕстьПараметрыБезТипов Тогда 
//			ЗаполнитьТипыУПараметров();
//		КонецЕсли;		
//		
//	КонецЕсли;
//	
//КонецПроцедуры // СинхронизироватьДанныеЗапросаВЭлементахФормы()

&НаКлиенте
Процедура ОформитьНажатиеКнопки(ИмяРеквизитаКнопки, Нажата)
	
	//Если Нажата Тогда 
	//	Элементы[ИмяРеквизитаКнопки].ЦветРамки = Новый Цвет(0,0,255);
	//	Элементы.ДекорацияПоказатьДеревоЗапросов.Картинка = ПолучитьКартинкуНаСервере(""МенюСкрыть"", ТипОбработка, СеансовыеДанные);
	//Иначе
	//	Элементы[ИмяРеквизитаКнопки].ЦветРамки = мЦветСтиляЦветРамки;
	//	Элементы.ДекорацияПоказатьДеревоЗапросов.Картинка = ПолучитьКартинкуНаСервере(""МенюПоказать"", ТипОбработка, СеансовыеДанные);
	//КонецЕсли;

КонецПроцедуры // ОформитьНажатиеКнопки()

&НаСервере
Процедура СоздатьРеквизитCРезультатомЗапроса(АдресРезультата)
	// ПРОЦЕДУРА ДУБЛЬ(!!!)
	
	лОбработкаОбъект          = ОбъектОбработки(ТипОбработка, СеансовыеДанные);
	лРеквизитыТаблицы         = лОбработкаОбъект.гПолучитьМассивРеквизитовДляДобавленияТаблицыНаФорму(УникальныйИдентификатор, АдресРезультата, АдресСпискаСпецПолей);
	
	// изменяем структуру реквизитов формы
	Попытка
		ИзменитьРеквизиты(, лРеквизитыТаблицы.МассивРеквизитовУдаления);
	Исключение
	КонецПопытки; 
	
	// раздельно добавляем и удаляем, потомучто при удалении отсутствующего реквизита происходит исключение
	Попытка
		ИзменитьРеквизиты(лРеквизитыТаблицы.МассивРеквизитов, );
	Исключение
		лОбработкаОбъект.гПоказатьОшибкуНаСервере(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	лРезультат = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Скопировать();
	
	//ЭтаФорма.РезультатЗапроса = 
	ЭтаФорма[РеквизитыТаблицыРезультата.ИмяРеквизита].Загрузить(лРезультат);
	
	лОбработкаОбъект.гВывестиТаблицуНаФорму(Элементы, АдресРезультата, АдресСпискаСпецПолей, УсловноеОформление);
	
КонецПроцедуры // СоздатьРеквизитCРезультатомЗапроса()

&НаКлиенте
Процедура ОбновитьЗаголовок()

	ЗаголовокФормы     = НСтр(""ru = '%гНазваниеОбработки% (%ИмяФайлаСЗапросом%)'"");
	ЗаголовокФормы     = СтрЗаменить(ЗаголовокФормы, ""%гНазваниеОбработки%"", гНазваниеОбработки(ТипОбработка, СеансовыеДанные));
	ЗаголовокФормы     = СтрЗаменить(ЗаголовокФормы, ""%ИмяФайлаСЗапросом%"", ?(ЗначениеЗаполнено(ИмяФайлаСЗапросом), ИмяФайлаСЗапросом, ""<не записан>""));
	ЭтаФорма.Заголовок = ЗаголовокФормы;

КонецПроцедуры // ОбновитьЗаголовок()

&НаКлиенте
Процедура ОбновитьСостояниеРезультатаЗапроса()
	Попытка
		Элементы.КнопкаКоличествоСтрокРезультатаЗапроса.Заголовок = ""Строк: "" + Вычислить(РеквизитыТаблицыРезультата.ИмяРеквизита + "".Количество()"");
	Исключение
		Элементы.КнопкаКоличествоСтрокРезультатаЗапроса.Заголовок = ""Строк: 0"";
	КонецПопытки; 
КонецПроцедуры // ОбновитьСостояниеРезультатаЗапроса()
 
&НаКлиенте
Процедура ОформитьКнопкуПоказатьСекциюСЗапросами(Видимость)
	//Элементы.ПоказатьСекциюСЗапросами.Заголовок = ?(Видимость, ""Скрыть секцию с запросами"", ""Показать секцию с запросами"");
	Элементы.ПоказатьСекциюСЗапросами.РасширеннаяПодсказка.Заголовок = ?(Видимость, ""Скрыть секцию с запросами"", ""Показать секцию с запросами"");
	Элементы.ПоказатьСекциюСЗапросами.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкуПоказатьРезультат(Видимость)
	Элементы.ПоказатьРезультат.РасширеннаяПодсказка.Заголовок = ?(Видимость, ""Скрыть секцию с результатом запроса"", ""Показать секцию с результатом запроса"");
	Элементы.ПоказатьРезультат.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкуПоказатьПараметры(Видимость)
	//Элементы.ПоказатьПараметры.Заголовок = ?(Видимость, ""Скрыть параметры запроса"", ""Показать параметры запроса"");
	Элементы.ПоказатьПараметры.РасширеннаяПодсказка.Заголовок = ?(Видимость, ""Скрыть параметры запроса"", ""Показать параметры запроса"");
	Элементы.ПоказатьПараметры.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайлаОбщий(Операция)

	Диалог = Новый ДиалогВыбораФайла(ПолучитьРежимДиалогаПоОперацииРаботыСФайлами(Операция));
	Диалог.Заголовок					= НСтр(""ru = 'Выберите файл запросов'"");
	Диалог.ПредварительныйПросмотр  	= Ложь;
	Диалог.Фильтр   					= НСтр(""ru = 'Файл запросов (*.sel)|*.sel'"");
	Диалог.Расширение   				= ""sеl"";
	Диалог.ПроверятьСуществованиеФайла  = Истина;
	Диалог.МножественныйВыбор			= Ложь;
	
	Если Операция = РежимДиалогаВыбораФайла.Открытие Тогда 
		ТекущийФайл = Новый Файл(ИмяФайлаСЗапросом);
		
		Диалог.ПолноеИмяФайла = ТекущийФайл.Имя;
		Диалог.Каталог = ТекущийФайл.Путь;
	Иначе
		Диалог.ПолноеИмяФайла = ""Запросы от "" + Формат(ТекущаяДата(), ""ДФ=yyyyMMdd"");
	КонецЕсли;
	
	Диалог.Показать(Новый ОписаниеОповещения(""ДиалогВыбораФайлаЗавершение"", Вычислить(ЭтотОбъектФорма), Новый Структура(""Диалог, Операция"", Диалог, Операция)));

КонецПроцедуры // ДиалогВыбораФайлаОбщий()

// Показывает сообщение или предупреждение пользователю
//
// Параметры:
//	ТекстСообщения - текст передаваемого сообщения.
//	ПутьКДанным - путь к данным для сообщения.
//
&НаКлиенте
Процедура ПоказатьСообщениеПользователю(ТекстСообщения, ПутьКДанным = Неопределено)
	//ОчиститьСообщения();
	Сообщение 				= Новый СообщениеПользователю(); 
    Сообщение.Текст 		= ТекстСообщения;
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда 
		Сообщение.ПутьКДанным 	= ПутьКДанным;
	КонецЕсли;
	Сообщение.УстановитьДанные(Объект); 
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	Сообщение.Сообщить();
КонецПроцедуры // ПоказатьСообщениеПользователю

#Область Меню

&НаСервереБезКонтекста
Функция ПолучитьМенюНаСервереСписком(ИмяМеню, ТипОбработка, СеансовыеДанные)
	
	лМенюСписком = ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьМеню(ИмяМеню,Истина,Истина);
	
	Результат = Новый СписокЗначений;
	Для каждого ПунктМеню Из лМенюСписком Цикл
		
		Если ПунктМеню.Значение.Действие = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ПунктМеню.Значение.Имя, ПунктМеню.Значение.Название,,ПунктМеню.Значение.Картинка);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьМенюНаСервереСписком()

&НаСервере
Процедура ЗаполнитьМенюПоДеревуНаСервере(Родитель, ДеревоМенюКнопки, КореньЭтоПодменю = Истина)
	
	лТекущийРодитель = Родитель;
	
	Для каждого ТекСтрока Из ДеревоМенюКнопки.Строки Цикл
		
		лИмяЭлемента = ТекСтрока.Имя;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Действие) Тогда			
			Если ТекСтрока.Строки.Количество() > 0 Тогда
				лГруппаКнопок = Элементы.Добавить(лИмяЭлемента, Тип(""ГруппаФормы""), Родитель);
				лГруппаКнопок.Вид = ?(КореньЭтоПодменю, ВидГруппыФормы.Подменю, ВидГруппыФормы.ГруппаКнопок);
				лГруппаКнопок.Заголовок = ТекСтрока.Название;
				ЗаполнитьМенюПоДеревуНаСервере(лГруппаКнопок, ТекСтрока, Истина)
			Иначе
				лГруппаКнопок = Элементы.Добавить(лИмяЭлемента, Тип(""ГруппаФормы""), Родитель);
				лГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
				
				лТекущийРодитель = лГруппаКнопок;
			КонецЕсли;	
		Иначе
			
			лИмяКоманды = ТекСтрока.Имя;
			КомандаФормы  = Команды.Найти(лИмяКоманды);
			
			Если КомандаФормы = Неопределено Тогда 
				КомандаФормы = Команды.Добавить(лИмяКоманды);
				КомандаФормы.Действие = ТекСтрока.Действие;
			КонецЕсли;
			
			Кнопка            = Элементы.Добавить(лИмяЭлемента, Тип(""КнопкаФормы""), лТекущийРодитель);
			Кнопка.ИмяКоманды = лИмяКоманды;
			Кнопка.Заголовок  = ТекСтрока.Название;
			
			Если ТекСтрока.СочетаниеКлавиш <> Неопределено Тогда
				Кнопка.СочетаниеКлавиш = ТекСтрока.СочетаниеКлавиш;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьМенюПоДеревуНаСервере()
 
#КонецОбласти 

#КонецОбласти 

#Область РаботаСЗапросом

&НаКлиенте
Процедура СкопироватьИсполняемыйКод(идЗапросаИсточника, идЗапросаПриемника)
	
	лСтрокиСИсполняемымКодомИсточника = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", идЗапросаИсточника));
	
	Для каждого лИсполняемыйКодИсточника Из лСтрокиСИсполняемымКодомИсточника Цикл
		
		лНовыйИсполняемыйКод = ИсполняемыйКод.Добавить();
		ЗаполнитьЗначенияСвойств(лНовыйИсполняемыйКод, лИсполняемыйКодИсточника);
		лНовыйИсполняемыйКод.ИдентификаторЗапроса = идЗапросаПриемника;
		
	КонецЦикла; 
	
КонецПроцедуры // СкопироватьИсполняемыйКод()

&НаКлиенте
Процедура СохранитьТекущиеЗначенияПоЗапросу(идСтрокиСЗапросом)
	
	Если идСтрокиСЗапросом = Неопределено Тогда 
		Возврат;	
    КонецЕсли;

	лСтрокаСЗапросом = ДеревоЗапросов.НайтиПоИдентификатору(идСтрокиСЗапросом);
	
	лСтрокаСЗапросом.ТекстЗапроса = ТекстТекущегоЗапроса;
	
	////////////////////////////////////////////
	// обновляем параметры по текущему запросу
	
	лИдентификаторСохраняемогоЗапроса = лСтрокаСЗапросом.Идентификатор;
	
	// очищаем глобальные параметры
	лИдЗапросыКУдалению = Новый Массив;
	лИдЗапросыКУдалению.Добавить("""");
	лИдЗапросыКУдалению.Добавить(лИдентификаторСохраняемогоЗапроса);
	
	Для каждого идЗапросаДляПараметра Из лИдЗапросыКУдалению Цикл
		лСписокПараметровКудалению = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", идЗапросаДляПараметра));
		Для каждого лПараметрЗапроса Из лСписокПараметровКудалению Цикл
			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
		КонецЦикла; 
	КонецЦикла; 
	
	// добавляем измененные параметры в общий список параметров		
	Для каждого лПараметрЗапроса Из ПараметрыТекущегоЗапроса Цикл
		лНовыйПараметр = ПараметрыЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
		Если лПараметрЗапроса.ГлобальныйПараметр Тогда 
			лНовыйПараметр.ИдентификаторЗапроса = """";
		Иначе
			лНовыйПараметр.ИдентификаторЗапроса = лИдентификаторСохраняемогоЗапроса;
		КонецЕсли;
	КонецЦикла; 
		
КонецПроцедуры // СохранитьТекущиеЗначенияПоЗапросу()

&НаКлиенте
Процедура ОбновитьЭлементыФормыДляТекущегоЗапроса(идСтрокиСЗапросом)

	ПараметрыТекущегоЗапроса.Очистить();
	ТекстТекущегоЗапроса = """";
	
	Если идСтрокиСЗапросом <>  Неопределено Тогда 
		
		лСтрокаСЗапросом = ДеревоЗапросов.НайтиПоИдентификатору(идСтрокиСЗапросом);
		
		ТекстТекущегоЗапроса = лСтрокаСЗапросом.ТекстЗапроса;
		
		//////////////////////////////////////////////////////
		// обновляем элемент с параметрами текущего запроса
		
		ПараметрыТекущегоЗапроса.Очистить();
		
		лИдЗапросыКДобавлению = Новый СписокЗначений;
		лИдЗапросыКДобавлению.Добавить(Истина, """");
		лИдЗапросыКДобавлению.Добавить(Ложь  , лСтрокаСЗапросом.Идентификатор);
		
		лЕстьПараметрыБезТипов = Ложь;
		
		Для Каждого идЗапросаДляПараметра Из лИдЗапросыКДобавлению Цикл
			
			лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", идЗапросаДляПараметра.Представление));		
			
			Для Каждого лПараметрЗапроса Из лПараметрыТекущегоЗапроса Цикл
				
				лНовыйПараметр = ПараметрыТекущегоЗапроса.Добавить();
				ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
				
				лНовыйПараметр.ГлобальныйПараметр = идЗапросаДляПараметра.Значение;
				лНовыйПараметр.ЗначениеВФорме = ФормированиеПредставленияЗначения(лНовыйПараметр.Значение);
				
				Если ПустаяСтрока(лНовыйПараметр.Тип) Тогда 
					лЕстьПараметрыБезТипов = Истина;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЦикла; 
		
		Если лЕстьПараметрыБезТипов Тогда 
			ЗаполнитьТипыУПараметров();
		КонецЕсли;		
    КонецЕсли;
	
КонецПроцедуры // ОбновитьЭлементыФормыДляТекущегоЗапроса()

&НаКлиенте
Процедура ДобавитьНовуюСтрокуСЗапросом()
	НоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Идентификатор  = Новый УникальныйИдентификатор;
	НоваяСтрока.Имя            = НСтр(""ru = 'Запрос'"");
КонецПроцедуры // ДобавитьНовуюСтрокуСЗапросом()

&НаКлиенте
Процедура ОчиститьДанныеПоЗапросам()
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	
	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	ПараметрыЗапросов.Очистить();
	ИсполняемыйКод.Очистить();
	
КонецПроцедуры // ОчиститьДанныеПоЗапросам()
 
&НаКлиенте
Процедура ЗагрузитьЗапросы(ИмяФайла, Операция, ВыводитьСообщение = Ложь)
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда 
		
		Ошибка = Ложь;	
		
		Если Не мДлительнаяОперацияЗапущена И Ложь Тогда
			лДлительнаяОперацияЗапущена = Истина;
			мДлительнаяОперацияЗапущена = Истина;
			ОповещениеОЗавершении = Новый ОписаниеОповещения(""ВыполнитьДействиеЗавершение"", Вычислить(ЭтотОбъектФорма));
			ПараметрыФормыДлительнойОперации = ПараметрыОжидания(Неопределено);
			ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ДлительнаяОперация"", ПараметрыФормыДлительнойОперации, Вычислить(ЭтотОбъектФорма),,,,ОповещениеОЗавершении);
		Иначе
			лДлительнаяОперацияЗапущена = Ложь
		КонецЕсли;
		
		ОчиститьДанныеПоЗапросам();
		
		Если Операция = мОперацииСЗапросами.ЗагрузитьИзСтарогоФормата Тогда 
			// открытие старой версии файла с запросами (не JSON)
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			Попытка
				ТекстовыйДокумент.Прочитать(ИмяФайла);
				ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(ТекстовыйДокумент.ПолучитьТекст());
			Исключение
				ПоказатьСообщениеПользователю(ОписаниеОшибки(), ""Объект"");		
				Ошибка = Истина;	
			КонецПопытки; 
			ИмяФайлаСЗапросом = """";
		Иначе
			// открытие новых версий файла с запросами (JSON)
			лТекстОшибки = """";
			лРезультатЧтения = ПрочитатьФайлСЗапросомJSON(ИмяФайла, лТекстОшибки);
			Если лТекстОшибки <> """" Тогда ПоказатьСообщениеПользователю(лТекстОшибки, ""Объект"") КонецЕсли;
			Если лРезультатЧтения > 0  Тогда 
				ИмяФайлаСЗапросом = ИмяФайла;
			ИначеЕсли лРезультатЧтения = 0 Тогда 
				лТекстОшибки = ""Ошибка загрузки из файла ("" + лТекстОшибки + "")."" + Символы.ПС + ""Попытка загрузки старого формата... "";
				Если лТекстОшибки <> """" Тогда ПоказатьСообщениеПользователю(лТекстОшибки, ""Объект"") КонецЕсли;
				ЗагрузитьЗапросы(ИмяФайла, мОперацииСЗапросами.ЗагрузитьИзСтарогоФормата, Истина);
			Иначе
				Ошибка = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Если Не Ошибка Тогда 
			ОбновитьЗаголовок();
			Если ВыводитьСообщение Тогда 
				ПоказатьСообщениеПользователю(""Файл """""" + ИмяФайла + """""" загружен"", ""Объект"");
			КонецЕсли;
		Иначе
			НовыйФайлЗапросовДействие();
		КонецЕсли;
		
		Если лДлительнаяОперацияЗапущена Тогда 
			мДлительнаяОперацияЗапущена = Ложь;
			ПоместитьВоВременноеХранилище(Новый Структура(""Статус"", ""Выполнено""), ПараметрыФормыДлительнойОперации.ИдентификаторЗадания);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда 
		ДобавитьНовуюСтрокуСЗапросом();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ЗагрузитьЗапросы()

&НаСервере
Процедура ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(Знач Источник, Знач НовоеДерево = Неопределено, Знач СпецСтрока = Неопределено)
	
	Если НовоеДерево = Неопределено Тогда 
		Источник    = ЗначениеИзСтрокиВнутр(Источник); // на вход в рекурсию передаем дерево в виде строки
		СпецСтрока  = ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПараметрыСпецСтрокиДереваЗапросов().Значение;
		НовоеДерево = РеквизитФормыВЗначение(""ДеревоЗапросов"");
		
		НовоеДерево.Строки.Очистить();
		
		ЭтоПервыйВходВРекурсию = Истина;
	Иначе
		ЭтоПервыйВходВРекурсию = Ложь;
	КонецЕсли;

	Если Источник.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДерева Из Источник.Строки Цикл
		
		Если СтрокаДерева.Запрос = СпецСтрока Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		НоваяСтрока.Имя           = СтрокаДерева.Запрос;
		НоваяСтрока.ТекстЗапроса  = СтрокаДерева.ТекстЗапроса;
		Если ЗначениеЗаполнено(СтрокаДерева.Идентификатор) Тогда 
			НоваяСтрока.Идентификатор = СтрокаДерева.Идентификатор;
		Иначе
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВариантыКода) Тогда 
			// заполнение Вариантов кода
			Для каждого Строка Из СтрокаДерева.ВариантыКода Цикл // #Рефакторинг СтрокаДерева.ИсполняемыйКодСписок
				НоваяСтрока1 = ИсполняемыйКод.Добавить();
				НоваяСтрока1.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				НоваяСтрока1.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
				НоваяСтрока1.Имя                  = Строка.ИмяВарианта;
				НоваяСтрока1.Текст                = Строка.ТекстКода;
			КонецЦикла; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ПараметрыЗапроса) Тогда 
			// заполнение Вариантов кода
			Для каждого Строка Из СтрокаДерева.ПараметрыЗапроса Цикл // #Рефакторинг СтрокаДерева.ПараметрыЗапросов
				НоваяСтрока1 = ПараметрыЗапросов.Добавить();
				НоваяСтрока1.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				НоваяСтрока1.Значение             = ЗначениеВСтрокуВнутр(Строка.Значение);
				НоваяСтрока1.Имя                  = Строка.ИмяПараметра;
				НоваяСтрока1.Тип                  = ТипЗнч(Строка.Значение); // #Рефакторинг
			КонецЦикла; 
		КонецЕсли;
		
		ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(СтрокаДерева, НоваяСтрока, СпецСтрока);
	КонецЦикла;
	
	Если ЭтоПервыйВходВРекурсию Тогда 
		ЗначениеВРеквизитФормы(НовоеДерево, ""ДеревоЗапросов"");
	КонецЕсли;

КонецПроцедуры // ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере()

#Область ЗаписьФайлаСЗапросом

//&НаКлиенте
//Процедура ЗаписатьШапкуФайлаСЗапросом(ЗаписьJSON)
//	
//	ЗаписьJSON.ЗаписатьИмяСвойства(""Версия"");
//	ЗаписьJSON.ЗаписатьЗначение(гНазваниеОбработки(ТипОбработка, СеансовыеДанные));
//	
//	ЗаписьJSON.ЗаписатьИмяСвойства(""Дата"");
//	ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(ТекущаяДата()));
//	
//КонецПроцедуры // ЗаписатьШапкуФайлаСЗапросом()

//&НаКлиенте
//Процедура ЗаписатьЗапросыРекурсивно(ЗаписьJSON, Знач Родитель = Неопределено)
//	
//	Если Родитель = Неопределено Тогда 
//		ЗаписьJSON.ЗаписатьИмяСвойства(""Запросы"");
//		лСтрокиДерева = ДеревоЗапросов.ПолучитьЭлементы();
//		ЗаписьJSON.ЗаписатьНачалоМассива();
//	Иначе
//		лСтрокиДерева = Родитель.ПолучитьЭлементы();
//	КонецЕсли;
//	
//	Для Каждого лСтрокаДерева Из лСтрокиДерева Цикл
//		ЗаписьJSON.ЗаписатьНачалоОбъекта();
//		
//		ЗаписьJSON.ЗаписатьИмяСвойства(""ИдентификаторРодителя"");
//		Если Родитель = Неопределено Тогда 
//			ЗаписьJSON.ЗаписатьЗначение("""");
//		Иначе
//			ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(Родитель.Идентификатор));
//		КонецЕсли;
//		ЗаписьJSON.ЗаписатьИмяСвойства(""Имя"");
//		ЗаписьJSON.ЗаписатьЗначение(лСтрокаДерева.Имя);
//		ЗаписьJSON.ЗаписатьИмяСвойства(""Идентификатор"");
//		Если Не ЗначениеЗаполнено(лСтрокаДерева.Идентификатор) Тогда 
//			лСтрокаДерева.Идентификатор = Новый УникальныйИдентификатор;
//		КонецЕсли;
//		ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(лСтрокаДерева.Идентификатор));
//		ЗаписьJSON.ЗаписатьИмяСвойства(""ТекстЗапроса"");
//		ЗаписьJSON.ЗаписатьЗначение(лСтрокаДерева.ТекстЗапроса);
//		ЗаписьJSON.ЗаписатьКонецОбъекта();
//		
//		ЗаписатьЗапросыРекурсивно(ЗаписьJSON, лСтрокаДерева);		
//	КонецЦикла;
//	
//	Если Родитель = Неопределено Тогда 
//		ЗаписьJSON.ЗаписатьКонецМассива();
//	КонецЕсли;
//	
//КонецПроцедуры // ЗаписатьЗапросыРекурсивно()

&НаКлиенте
Функция ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Знач Корень, МассивИД, СтруктураЗапросов = Неопределено)
	
	Запросы       = Новый Массив;
	лСтрокиДерева = Корень.ПолучитьЭлементы();
	Для Каждого лСтрокаДерева Из лСтрокиДерева Цикл
		
		МассивИД.Добавить(лСтрокаДерева.Идентификатор);
		
		лСтруктураСтрокиЗапроса = Новый Структура(""Идентификатор, Имя, ТекстЗапроса"");
		ЗаполнитьЗначенияСвойств(лСтруктураСтрокиЗапроса, лСтрокаДерева);
		лСтруктураСтрокиЗапроса.Вставить(""Строки"", ПолучитьСтруктуруЗапросовДляJSONРекурсивно(лСтрокаДерева, МассивИД, СтруктураЗапросов));
		
		Запросы.Добавить(лСтруктураСтрокиЗапроса);
		
	КонецЦикла;
	
	Возврат Запросы;
	
КонецФункции // ПолучитьСтруктуруЗапросовДляJSONРекурсивно()

&НаКлиенте
Функция ПолучитьПараметрыЗапросовДляJSON(МассивИдентификаторовЗапросов)

	лМассивПараметров = Новый Массив;
	
	Если МассивИдентификаторовЗапросов.Найти("""") = Неопределено Тогда 
		// Добавляем пустой идентификатор - признак глобального параметра
		МассивИдентификаторовЗапросов.Добавить("""");
	КонецЕсли;
	
	// добавляем локальные параметры
	Для Каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
		Для каждого лПараметрТекущегоЗапроса Из лПараметрыТекущегоЗапроса Цикл
			лМассивПараметров.Добавить(Новый Структура(""ИдентификаторЗапроса, Имя, Значение"", ИдентификаторЗапроса, лПараметрТекущегоЗапроса.Имя, лПараметрТекущегоЗапроса.Значение));
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивПараметров
	
КонецФункции //ПолучитьПараметрыЗапросовДляJSON()

&НаКлиенте
Функция ПолучитьИсполняемыйКодДляJSON(МассивИдентификаторовЗапросов)

	лМассивСтрокКода = Новый Массив;
	
	Для каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лКодТекущегоЗапроса = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
		Для каждого лСтрокаСКодом Из лКодТекущегоЗапроса Цикл
			лМассивСтрокКода.Добавить(Новый Структура(""ИдентификаторЗапроса, Имя, Текст"", ИдентификаторЗапроса, лСтрокаСКодом.Имя, лСтрокаСКодом.Текст));
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивСтрокКода

КонецФункции // ПолучитьИсполняемыйКодДляJSON()

//&НаКлиенте
//Процедура ЗаписатьПараметрыФайлаСЗапросом(ЗаписьJSON)

//	ЗаписьJSON.ЗаписатьИмяСвойства(""Параметры"");
//	ЗаписьJSON.ЗаписатьНачалоМассива();
//	Для каждого ПараметрЗапроса Из ПараметрыЗапросов Цикл
//		ЗаписьJSON.ЗаписатьНачалоОбъекта();
//		
//		ЗаписьJSON.ЗаписатьИмяСвойства(""Имя"");
//		ЗаписьJSON.ЗаписатьЗначение(ПараметрЗапроса.Имя);
//		ЗаписьJSON.ЗаписатьИмяСвойства(""Значение"");
//		ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(ПараметрЗапроса.Значение));
//		ЗаписьJSON.ЗаписатьИмяСвойства(""ИдентификаторЗапроса"");
//		ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(ПараметрЗапроса.ИдентификаторЗапроса));
//		
//		ЗаписьJSON.ЗаписатьКонецОбъекта();
//	КонецЦикла; 
//	ЗаписьJSON.ЗаписатьКонецМассива();
//	
//КонецПроцедуры //ЗаписатьПараметрыФайлаСЗапросом()

//&НаКлиенте
//Процедура ЗаписатьИсполняемыйКодФайлаСЗапросом(ЗаписьJSON)

//	ЗаписьJSON.ЗаписатьИмяСвойства(""ИсполняемыйКод"");
//	ЗаписьJSON.ЗаписатьНачалоМассива();
//	
//	Для каждого СтрокаСКодом Из ИсполняемыйКод Цикл
//		ЗаписьJSON.ЗаписатьНачалоОбъекта();
//		
//		ЗаписьJSON.ЗаписатьИмяСвойства(""Имя"");
//		ЗаписьJSON.ЗаписатьЗначение(СтрокаСКодом.Имя);
//		ЗаписьJSON.ЗаписатьИмяСвойства(""Текст"");
//		ЗаписьJSON.ЗаписатьЗначение(СтрокаСКодом.Текст);
//		ЗаписьJSON.ЗаписатьИмяСвойства(""ИдентификаторЗапроса"");
//		ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(СтрокаСКодом.ИдентификаторЗапроса));
//		
//		ЗаписьJSON.ЗаписатьКонецОбъекта();		
//	КонецЦикла; 
//	
//	ЗаписьJSON.ЗаписатьКонецМассива();

//КонецПроцедуры // ЗаписатьИсполняемыйКодФайлаСЗапросом()

#КонецОбласти 

#Область ЧтениеФайлаСЗапросом

&НаКлиенте
Функция ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) 
	Попытка
		Результат = ЧтениеJSON.Прочитать();
		Возврат Результат;		
	Исключение
		ТекстОшибки = ОписаниеОшибки();	
		Возврат Ложь;		
	КонецПопытки; 
КонецФункции // ПрочитатьJSONСОбработкойОшибки()

&НаКлиенте
//#дубль функции из обычной формы
Функция ПрочитатьФайлСЗапросомJSON(ИмяФайла, ТекстОшибки)
	
	Перем лВерсияФайла, лДата, лНоваяСтрока;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат - 1
	КонецПопытки; 

	Попытка
		лДанные = ПрочитатьJSON(ЧтениеJSON);
		
		// читаем запросы
		ПрочитатьЗапросыизФайлаJSONРекурсивно(лДанные.querys);
		
		// читаем параметры
		Для каждого лПараметр Из лДанные.parameters Цикл
			лНоваяСтрока = ПараметрыЗапросов.Добавить();
			ЗаполнитьЗначенияСвойств(лНоваяСтрока, лПараметр);
		КонецЦикла; 
		
		// читаем исполняемый код
		Для каждого лСтрокаСкодом Из лДанные.codes Цикл
			лНоваяСтрока = ИсполняемыйКод.Добавить();
			ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтрокаСкодом);
		КонецЦикла; 
				
		Возврат 1;
	Исключение
		ЧтениеJSON.Закрыть();
	КонецПопытки; 
	
	//#рефакторинг +++чтение промежуточного формата файла. В будущем необходимо удалить
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		лТипыСНачальнымБлоком = Новый Массив;
		лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоМассива);
		лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоОбъекта);
		
		лСтэкБлоков = Новый Массив;
		
		лМассивТиповJSONБезЗначений = ПолучитьТипыJSONБЕзЗначений();

		лИдентификаторыСтрокДерева = Новый Соответствие;
		
		Пока ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) Цикл
			
			ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
			
			лЭлементСтэка = Новый Структура(""ТекущаяПозиция,ТекущаяСтрока"", ЧтениеJSON.ТекущаяПозиция, ЧтениеJSON.ТекущаяСтрока);
			
			Если лМассивТиповJSONБезЗначений.Найти(ЧтениеJSON.ТипТекущегоЗначения) = Неопределено Тогда 
				лЭлементСтэка.Вставить(""ТекущееЗначение""    , ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
			лЭлементСтэка.Вставить(""ТипТекущегоЗначения"", ТипJSON);
			
			лСтэкБлоков.Вставить(0, лЭлементСтэка);
			Если лСтэкБлоков.Количество() = 2 Тогда 
				Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
					лОчищатьСтэк = Истина;
					Если лСтэкБлоков[1].ТекущееЗначение = ""Версия"" Тогда 
						лВерсияФайла = лСтэкБлоков[0].ТекущееЗначение;
					ИначеЕсли лСтэкБлоков[1].ТекущееЗначение = ""Дата"" Тогда 
						лДата = СериализаторXDTO.XMLЗначение(Тип(""Дата""), лСтэкБлоков[0].ТекущееЗначение);
					Иначе
						лОчищатьСтэк = Ложь;
					КонецЕсли;
					Если лОчищатьСтэк Тогда 
						лСтэкБлоков.Удалить(0); // удаляем текущее значение
						лСтэкБлоков.Удалить(0); // удаляем имя свойства
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли лСтэкБлоков.Количество() = 3 Тогда 
				Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
					Если лСтэкБлоков[2].ТекущееЗначение = ""Параметры"" Тогда 
						лНоваяСтрока = ПараметрыЗапросов.Добавить();//#добавлениепараметразапроса 3
					ИначеЕсли лСтэкБлоков[2].ТекущееЗначение = ""ИсполняемыйКод"" Тогда 
						лНоваяСтрока = ИсполняемыйКод.Добавить();			
						лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
					КонецЕсли;
				ИначеЕсли лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
					лСтэкБлоков.Удалить(0); // удаляем конец тэга
					лСтэкБлоков.Удалить(0); // удаляем начало тэга
					лСтэкБлоков.Удалить(0); // удаляем начало тэга табличного блока (в каждом блоке только один массив!)
				КонецЕсли;
			ИначеЕсли лСтэкБлоков.Количество() = 4 Тогда 
				Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда 
					лСтэкБлоков.Удалить(0); // удаляем конец тэга
					лСтэкБлоков.Удалить(0); // удаляем начало тэга
				КонецЕсли;
			ИначеЕсли лСтэкБлоков.Количество() = 5 Тогда 
				Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
					лТекущееЗначение = лСтэкБлоков[0].ТекущееЗначение;
					Если лСтэкБлоков[1].ТекущееЗначение = ""ИдентификаторРодителя"" Тогда 
						Если ЗначениеЗаполнено(лТекущееЗначение) Тогда 
							лНоваяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(лИдентификаторыСтрокДерева[лТекущееЗначение]).ПолучитьЭлементы().Добавить();			
						Иначе
							мПрограммноеДобавлениеСтрокиЗапроса = Истина; //#рефакторинг проверить необходимость данной переменной
							лНоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();			
						КонецЕсли;
					Иначе
						лНоваяСтрока[лСтэкБлоков[1].ТекущееЗначение] = лТекущееЗначение;
						Если лСтэкБлоков[1].ТекущееЗначение = ""Идентификатор"" Тогда 
							лИдентификаторыСтрокДерева.Вставить(лТекущееЗначение, лНоваяСтрока.ПолучитьИдентификатор());
						КонецЕсли;
					КонецЕсли;
					
					лСтэкБлоков.Удалить(0); // удаляем текущее значение
					лСтэкБлоков.Удалить(0); // удаляем имя свойства
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	Исключение
		ТекстОшибки = ""Ошибка формата файла: "" + ОписаниеОшибки();	
		Возврат -1
	КонецПопытки; 
	//#рефакторинг ---чтение промежуточного формата файла. В будущем необходимо удалить
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат 0
	Иначе
		Возврат 1
	КонецЕсли;
	
КонецФункции // ПрочитатьФайлСЗапросомJSON()

&НаКлиенте
Функция ПрочитатьЗапросыИзФайлаJSONРекурсивно(Корень, ВеткаДерева = Неопределено)
	
	Если ВеткаДерева = Неопределено Тогда 
		ВеткаДерева = ДеревоЗапросов;
	КонецЕсли;
	
	Для каждого лСтруктураЗапроса Из Корень Цикл
		лНоваяСтрока = ВеткаДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтруктураЗапроса);
		Если лНоваяСтрока.Идентификатор = """" Тогда 
			лНоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
			ПоказатьСообщениеПользователю(""Ошибка загрузки запроса """""" + лНоваяСтрока.Имя + """""" (пустой идентификатор). 
				|Возможна потеря выполняемого кода, связанного с данным запроса. 
				|Параметры данного запроса могут отображаться как """"Глобальные"""". 
				|Не сохраняйте запрос, скопируйте файл с запросами в другой файл и обратитесь к разработчику. 
				|Ситуация может быть исправлена."", ""Объект"");
		КонецЕсли;
		ПрочитатьЗапросыИзФайлаJSONРекурсивно(лСтруктураЗапроса.Строки, лНоваяСтрока);
	КонецЦикла; 
КонецФункции // ПрочитатьЗапросыИзФайлаJSONРекурсивно()

#КонецОбласти 

#КонецОбласти 

#Область РаботаСПараметрами

&НаКлиенте
Процедура ИнициализацияТипаИЗначенияПараметра(ИдентификаторСтрокиПараметра, ТекущийТипЗначение, ТекущийТипПредставление, ТекущийТипКартинка, НеИнициироватьЗначение = Ложь)
	
	ТекущийПараметр  = ПараметрыТекущегоЗапроса.НайтиПоИдентификатору(ИдентификаторСтрокиПараметра);
	
	//лСписокТиповИсключений = Новый Массив;
	//лСписокТиповИсключений.Добавить(Тип(""СписокЗначений""));
	//лСписокТиповИсключений.Добавить(Тип(""ТаблицаЗначений""));
	//лСписокТиповИсключений.Добавить(Тип(""МоментВремени""));
	//лСписокТиповИсключений.Добавить(Тип(""Граница""));
	
	ТипСтрока = ТипСтрока(ТекущийТипЗначение, ТипОбработка, СеансовыеДанные, Объект.ДоступныеТипыДанных.Типы());
	
	Если ТекущийТипЗначение = ""ТаблицаЗначений""
		Или ТекущийТипЗначение = ""МоментВремени"" 
		Или ТекущийТипЗначение = ""Граница"" Тогда 
	
		ТекущийПараметр.Тип            = ТипСтрока;
		ТекущийПараметр.ТипВФорме      = ТекущийТипПредставление;
		ТекущийПараметр.КартинкаТипа   = ТекущийТипКартинка;
		
		Если Не НеИнициироватьЗначение Тогда 
			ТекущийПараметр.Значение       = ПолучитьПустоеЗначениеТипаНаСервере(ТекущийТипЗначение);
			ТекущийПараметр.ЗначениеВФорме = ФормированиеПредставленияЗначения(ТекущийПараметр.Значение); 
		КонецЕсли;
	Иначе
		// Тип в табличной части.
		ТекущийПараметр.Тип = ТипСтрока;
		
		// Тип в форме.
		Массив = Новый Массив;
		Массив.Добавить(Тип(ТекущийТипЗначение));
		Описание = Новый ОписаниеТипов(Массив);
		
		ТекущийПараметр.ТипВФорме = ТекущийТипПредставление;
		ТекущийПараметр.КартинкаТипа    = ТекущийТипКартинка;
		
		Если Не НеИнициироватьЗначение Тогда 
			лЗначение = Описание.ПривестиЗначение(ТекущийПараметр.ЗначениеВФорме);
			Если ТипЗнч(лЗначение) = Тип(""СписокЗначений"") Тогда 
				лЗначение.ТипЗначения = Объект.ДоступныеТипыДанных;
				лЗначение.Добавить(ТекущийПараметр.ЗначениеВФорме);
			КонецЕсли;
			
			ТекущийПараметр.ЗначениеВФорме	= лЗначение;
			ТекущийПараметр.Значение		= ЗначениеВСтрокуСервер(лЗначение);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ИнициализацияТипаИЗначенияПараметра()

//&НаСервере
//Процедура ЗаполнитьТипыУПараметровНаСервере()
//	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
//		Если ПустаяСтрока(лПараметр.Тип) И лПараметр.Значение <> """" Тогда 
//			лТипЗначения       = ТипЗнч(ЗначениеИзСтрокиВнутр(лПараметр.Значение));
//			лТипЗначенияСтрока = ПолучитьТипСтрокой(лТипЗначения);
//			лДанныеПоТипу      = СписокТипов.НайтиПоЗначению(лТипЗначенияСтрока);              // простые типы
//			Если лТипЗначенияСтрока <> ""Не определено"" Тогда 
//				Если лДанныеПоТипу = Неопределено Тогда
//					лДанныеПоТипу = СписокТипов.НайтиПоЗначению(XMLТип(лТипЗначения).ИмяТипа); // сложные типы
//				КонецЕсли;
//				ИнициализацияТипаИЗначенияПараметра(лПараметр.ПолучитьИдентификатор(), лДанныеПоТипу.Значение, лДанныеПоТипу.Представление, лДанныеПоТипу.Картинка, Истина);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла; 	
//КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметраНаСервере(Значение, СписокТипов)
	
	лТипЗначения = ТипЗнч(ЗначениеИзСтрокиВнутр(Значение));
	лТипЗначенияСтрока = ПолучитьТипСтрокой(лТипЗначения);
	Если лТипЗначенияСтрока <> ""Не определено"" Тогда 
		лДанныеПоТипу = СписокТипов.НайтиПоЗначению(лТипЗначенияСтрока);              // простые типы
		Если лДанныеПоТипу = Неопределено Тогда
			лДанныеПоТипу = СписокТипов.НайтиПоЗначению(XMLТип(лТипЗначения).ИмяТипа); // сложные типы
		КонецЕсли;
		Возврат Новый Структура(""Значение, Представление, Картинка"", лДанныеПоТипу.Значение, лДанныеПоТипу.Представление, лДанныеПоТипу.Картинка);
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции // ПолучитьСтруктуруПараметраНаСервере()
 
&НаКлиенте
Процедура ЗаполнитьТипыУПараметров()
	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
		Если ПустаяСтрока(лПараметр.Тип) И лПараметр.Значение <> """" Тогда 
			лДанныеПоТипу = ПолучитьСтруктуруПараметраНаСервере(лПараметр.Значение, СписокТипов);
			Если лДанныеПоТипу <> Неопределено Тогда 
				ИнициализацияТипаИЗначенияПараметра(лПараметр.ПолучитьИдентификатор(), лДанныеПоТипу.Значение, лДанныеПоТипу.Представление, лДанныеПоТипу.Картинка, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры

#КонецОбласти 

#Область СервисныеФункции

&НаКлиенте
Процедура ВыполнитьДействияПриЗакрытииформы()

	мВыполняетсяЗакрытие = Истина;
	
	//+++ из процедуры ПриЗакрытии
	СохранитьНастройки();
	Если ЗначениеЗаполнено(СеансовыеДанные.ПутьККартинкам) Тогда 
		Попытка
			УдалитьФайлы(СеансовыеДанные.ПутьККартинкам);
		Исключение
		КонецПопытки; 
		Попытка
			УдалитьФайлыНаСервере(СеансовыеДанные.ПутьККартинкам);
		Исключение
		КонецПопытки; 
	КонецЕсли;
	//--- из процедуры ПриЗакрытии

	Закрыть();
	
КонецПроцедуры // ВыполнитьДействияПриЗакрытииформы()
 
&НаСервереБезКонтекста
Функция ОбъектОбработки(ТипОбработка, СеансовыеДанные)
	Результат = Новый (ЗначениеИзСтрокиВнутр(ТипОбработка));
	Результат.гСеансовыеДанные = СеансовыеДанные;
	Возврат Результат;
КонецФункции

// Функция ДУБЛЬ модуля. Для оптимизации  перенсена в текущий модуль

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение """" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  гРазложитьСтрокуВМассивПодстрок("",один,,два,"", "","") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  гРазложитьСтрокуВМассивПодстрок("",один,,два,"", "","", Истина) - возвратит массив из двух элементов;
//  гРазложитьСтрокуВМассивПодстрок("" один   два  "", "" "") - возвратит массив из двух элементов;
//  гРазложитьСтрокуВМассивПодстрок("""") - возвратит пустой массив;
//  гРазложитьСтрокуВМассивПодстрок("""",,Ложь) - возвратит массив с одним элементом """" (пустой строкой);
//  гРазложитьСтрокуВМассивПодстрок("""", "" "") - возвратит массив с одним элементом """" (пустой строкой);
//
Функция мРазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  // мРазложитьСтрокуВМассивПодстрок()

//&НаСервереБезКонтекста
//Функция ПолучитьКартинкуНаСервере(ИмяКартинки, ТипОбработка, СеансовыеДанные)
//	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).ПолучитьКартинку(ИмяКартинки);
//КонецФункции // ПолучитьКартинкуНаСервере()

&НаКлиенте
Функция ПроверитьМодифицированностьНеАсинхронно(Операция)
	Если Модифицированность Тогда 
		ТекстВопроса = НСтр(""ru = 'Сохранить изменения?'"");
		ПоказатьВопрос(Новый ОписаниеОповещения(""СохранитьИзмененияЗавершение"", Вычислить(ЭтотОбъектФорма), Операция), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,, Операция);		
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина 
КонецФункции

&НаКлиенте
Функция ПроверитьМодифицированность(Операция)
	
	лОповещение = Новый ОписаниеОповещения(""ПослеВопросаСохранитьИзмененияПродолжение"", ЭтаФорма, Новый Структура(""Операция"", Операция));
	
	Если Модифицированность Тогда
		ПоказатьВопрос(лОповещение, НСтр(""ru = 'Сохранить изменения?'""), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе		
		ВыполнитьОбработкуОповещения(лОповещение, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецФункции // ПроверитьМодифицированность()

&НаКлиенте
Функция ПолучитьРежимДиалогаПоОперацииРаботыСФайлами(Операция)
	Если Операция = мОперацииСЗапросами.Открыть Тогда 
		Возврат РежимДиалогаВыбораФайла.Открытие
	Иначе
		Возврат РежимДиалогаВыбораФайла.Сохранение
	КонецЕсли;
КонецФункции // ПолучитьРежимДиалогаПоОперацииРаботыСФайлами()

&НаСервереБезКонтекста
Функция ПолучитьПустоеЗначениеТипаНаСервере(Тип)
	
	Если НРег(Тип) = ""граница"" ИЛИ НРег(Тип) = ""моментвремени"" Тогда 
		лПараметры    = Новый Массив(1);
		лПараметры[0] = ТекущаяДата();
	Иначе
		лПараметры = Неопределено
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Вычислить(""Новый (Тип("""""" + Тип + """""")"" + ?(лПараметры = Неопределено, """", "", лПараметры"")+ "")""));
	
КонецФункции // ПолучитьПустоеЗначениеТипаНаСервере()

// Возвращает строковое представление типа.
// Например, для ссылки справочника возвращает ""CatalogRef.ИмяСправочника"".
//
&НаСервереБезКонтекста
Функция ТипСтрока(Значение, ТипОбработка, СеансовыеДанные, Типы)
	//#рефакторинг: перенести в модуль обработки
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСформироватьСписокТипов(Типы, СписокДобавленныхТипов);
	
	НайденныйТип = СписокДобавленныхТипов.НайтиПоЗначению(Значение);
	
	Если НайденныйТип = Неопределено Тогда 
		Возврат XMLТип(Тип(Значение)).ИмяТипа;
	Иначе
		Возврат НайденныйТип.Представление
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветСтиляНаСервере(ИмяЦвета)
	Возврат ЦветаСтиля[ИмяЦвета]
КонецФункции

&НаСервере
Функция гНажатиеНаКнопкуВыборМенюИнформацияНаСервере(ИмяКнопки, ТолькоВернутьКоманду)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гНажатиеНаКнопкуВыборМенюИнформация(ИмяКнопки, ТолькоВернутьКоманду);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуРезультатаНаСервере(АдресРезультата)
	Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
КонецФункции // ПолучитьТаблицуРезультатаНаСервере()
 
&НаСервереБезКонтекста
Функция ПолучитьКоличествоКолонокРезультатаНаСервере(АдресРезультата)
	Возврат ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Колонки.Количество();
КонецФункции // ПолучитьКоличествоКолонокРезультатаНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьКолонкиРезультатаНаСервере(АдресРезультата)
	
	лКолонки = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Колонки;
	
	лСписокКолонок = Новый СписокЗначений;
	Для каждого лКолонка Из лКолонки Цикл
		лСписокКолонок.Добавить(лКолонка.Имя, ?(лКолонка.Заголовок = """", лКолонка.Имя, лКолонка.Заголовок));
	КонецЦикла; 
	
	Возврат лСписокКолонок;	
	
КонецФункции // ПолучитьКолонкиРезультатаНаСервере()

&НаСервере
Функция ТекстВТаблицуНаСервере(МассивКолонокСтрокиТаблицы, Текст, ДобавлятьКолонки, Разделитель, ЗагружатьВТаблицуРезультата = Истина)
	
	Если ЗагружатьВТаблицуРезультата Тогда 
		ТаблицаЗначений = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата);
	Иначе
		ТаблицаЗначений = Новый ТаблицаЗначений;
	КонецЕсли;
	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();	
	
	Если ДобавлятьКолонки Тогда 
		Для Сч = лКоличествоКолонокЭлементаТЗ По МассивКолонокСтрокиТаблицы.Количество() - 1 Цикл
			НоваяКолонка     = ТаблицаЗначений.Колонки.Добавить();
			НоваяКолонка.Имя = ""НоваяКолонка__"" + Формат(Сч, ""ЧН=; ЧГ=0"");
		КонецЦикла; 
	КонецЕсли;

	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();
	
	Для сч = 1 По Текст.КоличествоСтрок() Цикл
		лМассивКолонокСтрокиТаблицы = мРазложитьСтрокуВМассивПодстрок(Текст.ПолучитьСтроку(сч), Разделитель);
		лКоличествоЗаполняемыхКолонок = Мин(лКоличествоКолонокЭлементаТЗ, лМассивКолонокСтрокиТаблицы.Количество());
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Сч1 = 0 По лКоличествоЗаполняемыхКолонок - 1 Цикл
			НоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1];
		КонецЦикла; 
	КонецЦикла; 
	
	лАдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);
	Если ЗагружатьВТаблицуРезультата Тогда 
		АдресРезультата = лАдресТаблицы;
		СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);	
	Иначе
		Возврат лАдресТаблицы;
	КонецЕсли;
	
КонецФункции // ТекстВТаблицуНаСервере()

&НаСервере
Функция ПоместитьРезультатВХранилищеНаСервере(ИмяРеквизита)
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение(ИмяРеквизита), УникальныйИдентификатор);
КонецФункции // ПоместитьРезультатВХранилищеНаСервере()

#КонецОбласти 

#Область Настройки

// Процедура - Восстанавливает настройки из хранилища общих настроек
&НаСервереБезКонтекста
Функция ВосстановитьНастройкиНаСервере()

	ключОбъекта      = ""Обработка.ИмяОбработки"";
	ключНастроек     = ""Обработка.ИмяОбработки.ЗначенияПоУмолчанию"";
	описаниеНастроек = ""Описание настройки"";
	имяПользователя  = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	Результат = ХранилищеОбщихНастроек.Загрузить(ключОбъекта, ключНастроек, описаниеНастроек, имяПользователя);
	Если ТипЗнч(Результат) = Тип(""Структура"") Тогда 
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ВосстановитьНастройкиНаСервере()

// Процедура - Сохраняет настройки в хранилище общих настроек
&НаСервере
Процедура СохранитьНастройки()
	
	ключОбъекта      = ""Обработка.ИмяОбработки"";
	ключНастроек     = ""Обработка.ИмяОбработки.ЗначенияПоУмолчанию"";
	описаниеНастроек = ""Описание настройки"";
	имяПользователя  = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	настройки = Новый Структура;
	настройки.Вставить(""ДеревоЗапросовВидимость""     , Элементы.ДеревоЗапросов.Видимость);
	настройки.Вставить(""ГруппаРезультатЗапроса""      , Элементы.ГруппаРезультатЗапроса.Видимость);
	настройки.Вставить(""ГруппаПараметрыЗапросов""     , Элементы.ГруппаПараметрыЗапросов.Видимость);
	настройки.Вставить(""ГруппаДанныеЗапроса""         , Элементы.ГруппаДанныеЗапроса.Видимость);
	настройки.Вставить(""ИдентификаторТекущегоЗапроса"", Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ИмяФайлаСЗапросом) Тогда 
		настройки.Вставить(""ИмяФайлаСЗапросом"", ИмяФайлаСЗапросом);
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить(ключОбъекта, ключНастроек, настройки, описаниеНастроек, имяПользователя);
	
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти

#Область Прочие

&НаСервереБезКонтекста
Функция ПолучитьТипСтрокой(ТипЗначения)
	
	Если ТипЗначения = Тип(""ТаблицаЗначений"") Тогда 
		Возврат Строка(""ТаблицаЗначений"")
	ИначеЕсли ТипЗначения = Тип(""МоментВремени"") Тогда 
		Возврат Строка(""МоментВремени"")
	ИначеЕсли ТипЗначения = Тип(""СписокЗначений"") Тогда 
		Возврат Строка(""СписокЗначений"")
	Иначе
		Возврат Строка(ТипЗначения)
	КонецЕсли;

КонецФункции // ПолучитьТипСтрокой()
 
&НаСервереБезКонтекста
Функция гПреобразоватьВПравильноеНазваниеНаСервере(ТипОбработка, СеансовыеДанные, ИсходноеНазвание)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПреобразоватьВПравильноеНазвание(ИсходноеНазвание);
КонецФункции // гПреобразоватьВПравильноеНазвание()

&НаКлиенте
Функция ПодготовитьДанныеИзБуфера()

	лДанныеИзБуфера = Новый Структура();
	лДанныеИзБуфера.Вставить(""Текст""            , Неопределено);
	лДанныеИзБуфера.Вставить(""КоличествоКолонок"", 0);
	лДанныеИзБуфера.Вставить(""МассивКолонок""    , 0);	
	лДанныеИзБуфера.Вставить(""Разделитель""      , Символы.Таб);
	
	лhtmlfile = Новый COMОбъект(""htmlfile""); лСтрокаБуфера = лhtmlfile.parentWindow.clipboardData.getData(""text"");
	
	лТекст =  Новый ТекстовыйДокумент;	
	лТекст.УстановитьТекст(лСтрокаБуфера);
	
	лКоличествоСтрок = лТекст.КоличествоСтрок();
	Если лКоличествоСтрок = 0 Тогда 
		ПоказатьПредупреждение(,""Буфер пуст."");
	Иначе
		лДанныеИзБуфера.Текст = лТекст;
		
		лМассивКолонокИзБуфера = мРазложитьСтрокуВМассивПодстрок(лТекст.ПолучитьСтроку(1), лДанныеИзБуфера.Разделитель);
		
		лДанныеИзБуфера.КоличествоКолонок = лМассивКолонокИзБуфера.Количество();
		
		лМассивКолонок = Новый Массив;
		Для Сч = 0 По лДанныеИзБуфера.КоличествоКолонок - 1 Цикл
			//лМассивКолонок.Добавить(""НоваяКолонка__"" + Формат(Сч, ""ЧН=; ЧГ=0""));
			лМассивКолонок.Добавить(гПреобразоватьВПравильноеНазваниеНаСервере(ТипОбработка, СеансовыеДанные, лМассивКолонокИзБуфера[Сч]));
			//лМассивКолонок.Добавить(лМассивКолонокИзБуфера[Сч]);
			
		КонецЦикла; 
		лДанныеИзБуфера.МассивКолонок = лМассивКолонок;
	КонецЕсли;
	
	Возврат лДанныеИзБуфера;

КонецФункции // ПодготовитьДанныеИзБуфера()

&НаКлиенте
Процедура ОбработкаДействияСоздатьПараметрИзБуфера()

	лДанныеИзБуфера = ПодготовитьДанныеИзБуфера();
	Если лДанныеИзБуфера.КоличествоКолонок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	лСписокКолонок = Новый СписокЗначений;
	лСписокКолонок.ЗагрузитьЗначения(лДанныеИзБуфера.МассивКолонок);
	лСписокКолонок.Вставить(0, ОбщиеПеречисления().ВсеКолонки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(""Действие"", ""СоздатьПараметрИзБуфера"");
	ДополнительныеПараметры.Вставить(""Данные""  , лДанныеИзБуфера);
	
	лСписокКолонок.ПоказатьВыборЭлемента(Новый ОписаниеОповещения(""ЗавершениеВыборКолонкиВыгрузитьВПараметр"", Вычислить(ЭтотОбъектФорма), ДополнительныеПараметры));
	
КонецПроцедуры // ОбработкаДействияСоздатьПараметрИзБуфера()

&НаКлиенте
Процедура ОбработкаДействияВыгрузитьВПараметр()

	АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РеквизитыТаблицыРезультата.ИмяРеквизита);
	
	лСписокКолонок = ПолучитьКолонкиРезультатаНаСервере(АдресРезультата);
	лСписокКолонок.Вставить(0, ОбщиеПеречисления().ВсеКолонки);
	
	лСписокКолонок.ПоказатьВыборЭлемента(Новый ОписаниеОповещения(""ЗавершениеВыборКолонкиВыгрузитьВПараметр"", Вычислить(ЭтотОбъектФорма), Новый Структура(""Действие"", ""ВыгрузитьТаблицуРезультатаВПараметр"")));
	
КонецПроцедуры // ОбработкаДействияВыгрузитьВПараметр()

&НаСервере
Процедура ОбработкаДействияВыгрузитьВПараметрНаСервере(ИмяКолонки, Режим, ДополнительныеПараметры = Неопределено)

	//#заполнениепараметровзапроса 4
	лСтрокаСПараметром                = ПараметрыТекущегоЗапроса.Добавить();
	лСтрокаСПараметром.Имя            = ""ДанныеИзБуфера_"" + Формат(ТекущаяДата(), ""ДФ=ггММддЧЧммсс"");
	
	Если ИмяКолонки = Неопределено Тогда 
		лСтрокаСПараметром.Тип = ""ТаблицаЗначений"";
	Иначе
		лСтрокаСПараметром.Тип = ""СписокЗначений"";
		лЗначение = Новый СписокЗначений;
	КонецЕсли;
	
	Если Режим = ""ИзТаблицыРезультата"" Тогда 
		Если ИмяКолонки = Неопределено Тогда 
			лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(ПолучитьТаблицуРезультатаНаСервере(АдресРезультата));
		Иначе
			Для каждого СтрокаРезультата Из ПолучитьТаблицуРезультатаНаСервере(АдресРезультата) Цикл
				лЗначение.Добавить(СтрокаРезультата[ИмяКолонки]);
			КонецЦикла; 
			лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(лЗначение);
		КонецЕсли;
	ИначеЕсли Режим = ""ИзБуфера"" Тогда 
		Если ИмяКолонки = Неопределено Тогда 
			лЗначение = Новый ТаблицаЗначений;
			Для каждого лКолонкаТаблицыИзБуфера Из ДополнительныеПараметры.МассивКолонок Цикл
				лЗначение.Колонки.Добавить(лКолонкаТаблицыИзБуфера);
			КонецЦикла; 
		Иначе
			лНомерКолонки = ДополнительныеПараметры.МассивКолонок.Найти(ИмяКолонки);
		КонецЕсли;
		
		Для сч = 1 По ДополнительныеПараметры.Текст.КоличествоСтрок() Цикл
			лМассивКолонокСтрокиТаблицы = мРазложитьСтрокуВМассивПодстрок(ДополнительныеПараметры.Текст.ПолучитьСтроку(сч), ДополнительныеПараметры.Разделитель);
			Если ИмяКолонки = Неопределено Тогда 
				лНоваяСтрока = лЗначение.Добавить();
				Сч1 = 0;
				лМассивКолонокСтрокиТаблицы = мРазложитьСтрокуВМассивПодстрок(ДополнительныеПараметры.Текст.ПолучитьСтроку(сч), ДополнительныеПараметры.Разделитель);
				Пока Сч1 < Мин(лМассивКолонокСтрокиТаблицы.Количество(), ДополнительныеПараметры.МассивКолонок.Количество()) Цикл
					лНоваяСтрока[ДополнительныеПараметры.МассивКолонок[Сч1]] = лМассивКолонокСтрокиТаблицы[Сч1];
					Сч1 = Сч1 + 1;
				КонецЦикла; 
			Иначе
				лЗначение.Добавить(лМассивКолонокСтрокиТаблицы[лНомерКолонки]);
			КонецЕсли;
		КонецЦикла; 
		
		лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(лЗначение);
	КонецЕсли;
	
	лСтрокаСПараметром.ЗначениеВФорме = ФормированиеПредставленияЗначения(лСтрокаСПараметром.Значение);
	
	ДанныеПоТипу = СписокТипов.НайтиПоЗначению(лСтрокаСПараметром.Тип); // простые типы
	
	лСтрокаСПараметром.ТипВФорме    = ДанныеПоТипу.Представление;
	лСтрокаСПараметром.КартинкаТипа = ДанныеПоТипу.Картинка;
	
КонецПроцедуры // ОбработкаДействияВыгрузитьВПараметрНаСервере()

&НаКлиенте
Процедура ОбработкаДействияВыполнитьКод(ИдентификаторКода = Неопределено) Экспорт
 	
	лИдентификаторТекущегоЗапроса = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока).Идентификатор;
	
	АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РеквизитыТаблицыРезультата.ИмяРеквизита);
	
	ПараметрыОткрытияформы = Новый Структура();
	ПараметрыОткрытияформы.Вставить(""АдресРезультата""          , АдресРезультата);
	ПараметрыОткрытияформы.Вставить(""ИсполняемыйКод""           , ПолучитьКодДляЗапроса(лИдентификаторТекущегоЗапроса));
	ПараметрыОткрытияформы.Вставить(""СвойстваТаблицыРезультата"", РеквизитыТаблицыРезультата);
	ПараметрыОткрытияформы.Вставить(""ИдентификаторЗапроса""     , лИдентификаторТекущегоЗапроса);
	ПараметрыОткрытияформы.Вставить(""ТекущаяСтрокаПриОткрытии"" , ИдентификаторКода);
	ПараметрыОткрытияформы.Вставить(""ЭтотОбъектФорма""          , ЭтотОбъектФорма);
	ПараметрыОткрытияформы.Вставить(""ТекстТекущегоЗапроса""     , ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса);
	
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрИсполняемыйКод"", 
		ПараметрыОткрытияформы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения(""ОбработкаВыполненияКода"", Вычислить(ЭтотОбъектФорма)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ОбработкаДействияВыполнитьКод()

&НаКлиенте
Процедура ОбработкаДействияКодЗапросПолучитьЗапрос(ПростаяОбработкаТекста)
	
	лhtmlfile = Новый COMОбъект(""htmlfile""); лСтрокаБуфера = лhtmlfile.parentWindow.clipboardData.getData(""text"");
	
	Если СокрЛП(лСтрокаБуфера) = """" Тогда 
		ПоказатьПредупреждение(,""Буфер пуст."");
		Возврат;
	КонецЕсли;
	
	ПолучитьУстановитьТекущийТекстЗапроса(ЗаполнитьПараметрыНаФормеИПолучитьТекстЗапросаИзКода1сНаСервере(ТипОбработка, СеансовыеДанные, лСтрокаБуфера, ПростаяОбработкаТекста));
	
КонецПроцедуры // ОбработкаДействияКодЗапросПолучитьЗапрос()

&НаКлиенте
Процедура ОбработкаДействияПоказатьСекциюСЗапросами(Видимость)
	Элементы.ГруппаДанныеЗапроса.Видимость = Видимость;
	Элементы.ПоказатьПараметры.Доступность = Видимость;
	ОформитьКнопкуПоказатьСекциюСЗапросами(Видимость);
КонецПроцедуры // ОбработкаДействияПоказатьСекциюСЗапросами()

&НаКлиенте
Функция ПолучитьКодДляЗапроса(ИдентификаторЗапроса)
	лСтрокиСИсполняемымКодом = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
	лРезультат = Новый Массив;
	Для каждого лСтрокСИсполняемымКодом Из лСтрокиСИсполняемымКодом Цикл
		лРезультат.Добавить(Новый Структура(""Имя, Текст, Идентификатор"", лСтрокСИсполняемымКодом.Имя, лСтрокСИсполняемымКодом.Текст, лСтрокСИсполняемымКодом.ИдентификаторСтроки));
	КонецЦикла; 
	
	Возврат лРезультат
КонецФункции // ПолучитьКодДляЗапроса()

// Возвращает представление значения.
//
// Параметры:
//	Значение - передаваемое значение.
//
&НаСервереБезКонтекста
Функция ФормированиеПредставленияЗначения(Знач ЗначениеИсходное) Экспорт
	
	ВозврЗнач = """";
	
	Если ТипЗнч(ЗначениеИсходное) = Тип(""Строка"") Тогда 
		
		Если ЗначениеИсходное = """" Тогда 
			Возврат ЗначениеИсходное
		Иначе
			Попытка
				Значение = ЗначениеИзСтрокиВнутр(ЗначениеИсходное);
			Исключение
				Возврат """"
			КонецПопытки; 
		КонецЕсли;
	Иначе
		Значение = ЗначениеИсходное
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип(""ТаблицаЗначений"") Тогда 
		ВыводнаяСтрока = ""Таблица: строк = %КоличествоСтрок%, колонок = %КоличествоКолонок%"";
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, ""%КоличествоСтрок%"", Строка(Значение.Количество()));
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, ""%КоличествоКолонок%"", Строка(Значение.Колонки.Количество()));
		ВозврЗнач = ВыводнаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда 
		ВыводнаяСтрока = ""Массив: размер = %КоличествоСтрок%"";
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, ""%КоличествоСтрок%"", Строка(Значение.Количество()));
		ВозврЗнач = ВыводнаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип(""МоментВремени"") Тогда 
		ВозврЗнач = Строка(Значение.Дата) + ""; "" + Строка(Значение.Ссылка);
	ИначеЕсли ТипЗнч(Значение) = Тип(""Граница"") Тогда 
		ВозврЗнач = Строка(Значение.Значение) + ""; "" + Строка(Значение.ВидГраницы);
	Иначе
		ВозврЗнач = Значение
	КонецЕсли;	
	
	Возврат ВозврЗнач;
КонецФункции	

&НаКлиенте
Функция СохранитьФайлСЗапросом(Знач ИмяФайла)
	
	СохранитьТекущиеЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
	//СинхронизироватьДанныеЗапросаВЭлементахФормы();
	
	Если ПустаяСтрока(ИмяФайла) Тогда 
		ДиалогВыбораФайлаОбщий(мОперацииСЗапросами.СохранитьКАК);
		Возврат Ложь;
	Иначе
		
		ТекстОшибки = """";
		Ошибка      = Ложь;
		
		лМассивИДЗапросов = Новый Массив;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		Попытка
			ЗаписьJSON.ОткрытьФайл(ИмяФайла);
		Исключение
			ТекстОшибки = ""Ошибка открытия файла: <"" + ИмяФайла + "">"" + ОписаниеОшибки();
			Ошибка = Истина;
		КонецПопытки; 
		
		Если Не Ошибка Тогда 
			Данные = Новый Структура();
			
			Данные.Вставить(""header""    , Новый Структура(""version, date"", гНазваниеОбработки(ТипОбработка, СеансовыеДанные), ТекущаяДата()));
			Данные.Вставить(""querys""    , ПолучитьСтруктуруЗапросовДляJSONРекурсивно(ДеревоЗапросов, лМассивИДЗапросов));
			Данные.Вставить(""parameters"", ПолучитьПараметрыЗапросовДляJSON(лМассивИДЗапросов));
			Данные.Вставить(""codes""     , ПолучитьИсполняемыйКодДляJSON(лМассивИДЗапросов));
			
			НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
			//НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
			//НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;
			
			Попытка
				ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON);
			Исключение
				ТекстОшибки = ""Ошибка записи файла: <"" + ИмяФайла + "">"" + ОписаниеОшибки();
				Ошибка = Истина;
			КонецПопытки; 
			ЗаписьJSON.Закрыть();
		КонецЕсли;
		
		Если Не Ошибка Тогда 
			Модифицированность = Ложь;
			Если мВыполняетсяЗакрытие Тогда 
				Закрыть();
			Иначе
				ИмяФайлаСЗапросом = ИмяФайла;
				ОбновитьЗаголовок();
				Возврат Не Ошибка;
			КонецЕсли;
		Иначе
			ПоказатьСообщениеПользователю(ТекстОшибки, ""Объект"");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // СохранитьФайлСЗапросом()

&НаСервере
Функция ЗначениеВСтрокуСервер(Значение)
	ВозврЗнач = ЗначениеВСтрокуВнутр(Значение);
	Возврат ВозврЗнач;
КонецФункции	

&НаСервере
Функция ПолучитьСледующееУникальноеИмя(Знач ИсходноеИмя, Коллекция, ИмяПоля)
	Сч = 0;
	Пока НайтиЗначениеБезУчетаРегистра(ИсходноеИмя + ?(Сч = 0, """", Формат(Сч, ""ЧГ=0"")), Коллекция, ИмяПоля) <> Неопределено Цикл
		Сч = Сч + 1;
	КонецЦикла;

	Возврат ИсходноеИмя + ?(Сч = 0, """", Формат(Сч, ""ЧГ=0""));
КонецФункции // ПолучитьСледующееУникальноеИмя()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЗначениеБезУчетаРегистра(Значение, Коллекция, Поле)
	Для каждого СтрокаКоллекции Из Коллекция Цикл
		Если НРЕГ(СтрокаКоллекции[Поле]) = НРЕГ(Значение) тогда
			Возврат СтрокаКоллекции
		Конецесли;
	КонецЦикла; 
	Возврат Неопределено
КонецФункции

&НаСервере
Функция ВыполнитьНаСервере(КодДляВыполнения)
	Попытка
		Выполнить(КодДляВыполнения);
		Возврат Истина;
	Исключение
		лТекстОшибки = ОписаниеОшибки();
		гВывестиОшибкуВыполнениякода(ТипОбработка, СеансовыеДанные, лТекстОшибки, КодДляВыполнения);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область ВыполнениеЗапроса

// Запускает выполнение запроса.
//
&НаКлиенте
Процедура ЗапуститьВыполнениеЗапроса()
	
	СохранитьТекущиеЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);

	//СинхронизироватьДанныеЗапросаВЭлементахФормы();
	
	ТекущийЗапрос = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	Если ПустаяСтрока(ТекущийЗапрос.ТекстЗапроса) Тогда 
		ТекстПредупреждения = НСтр(""ru = 'Введите текст запроса.'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущийЗапрос.ТекстЗапроса = СтрЗаменить(ТекущийЗапрос.ТекстЗапроса, ""|"", """");
	
	// Определение текста запроса.
	ВыделенныйТекст = ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы.ВыделенныйТекст;
	Если Не ПустаяСтрока(ВыделенныйТекст) Тогда 
		ТекстЗапроса = ВыделенныйТекст;
	Иначе
		ТекстЗапроса = ТекущийЗапрос.ТекстЗапроса;
	КонецЕсли;	
	
	// Очистка табличного документа ""РезультатЗапроса"" в форме.
	ТекстСообщения   = """";
	
	ОчиститьСообщения();
	
	Ошибка = Ложь;
	ВыполнитьЗапросСервер(ТекстЗапроса, ТекущийЗапрос.Идентификатор, ТекстСообщения, Ошибка);
	ОбновитьСостояниеРезультатаЗапроса();
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда 
		ПоказатьСообщениеПользователю(ТекстСообщения, ""Объект"");
	КонецЕсли;	
	
	Если Не Ошибка Тогда 
		
		лИмяРодителяЭлементаРезультатЗапроса = РеквизитыТаблицыРезультата.ИмяЭлементаРодителя;

		Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость = Истина;
		ОформитьКнопкуПоказатьРезультат(Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость);
		ТекущийЭлемент = Элементы[РеквизитыТаблицыРезультата.ИмяРеквизита].ПодчиненныеЭлементы[0];		
	КонецЕсли;
	
КонецПроцедуры //ЗапуститьВыполнениеЗапроса()

&НаСервере
// Загружает параметры в запрос.
// Если строковое представление значения - пустая строка, тогда значение параметра является Неопределено.
//
// Параметры:
//	Запрос - передаваемый запрос.
//	ПараметрыЗапросов - передаваемые параметры для запроса.
//
Процедура ЗагрузитьПараметрыЗапросов(Запрос, ИдентификаторЗапроса)
	
	// добавляем локальные параметры текущего запроса
	лМассивПараметровЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
	Для каждого ЭлементПараметр из лМассивПараметровЗапроса Цикл 
		Если ЭлементПараметр.Значение <> """" Тогда 
			Запрос.УстановитьПараметр(ЭлементПараметр.Имя, ЗначениеИзСтрокиВнутр(ЭлементПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
	// добавляем глобальные параметры
	лМассивПараметровЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", """"));
	Для каждого ЭлементПараметр из лМассивПараметровЗапроса Цикл 
		Если ЭлементПараметр.Значение <> """" Тогда 
			Запрос.УстановитьПараметр(ЭлементПараметр.Имя, ЗначениеИзСтрокиВнутр(ЭлементПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	// ЗагрузитьПараметрыЗапросов()

// Загружает в результат запроса возвращаемый из Временного хранилища табличный документ.
//
// Параметры:
//	РезультатЗапроса - Результат запроса.
//	АдресРезультата - адрес временного хранилища, хранящийся.
//
&НаСервере
Процедура ВыполнитьЗапросСервер(ТекстЗапроса, ИдентификаторЗапроса, ТекстСообщения, Ошибка) Экспорт
	
	лПараметрыДляДобавленияВоВременнуюТаблицу = ПараметрыТекущегоЗапроса.НайтиСтроки(Новый Структура(""ДобавлятьВоВременнуюТаблицу"", Истина));
	
	Если лПараметрыДляДобавленияВоВременнуюТаблицу.Количество() > 0 Тогда 
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Для каждого лПараметрДляДобавленияВоВременнуюТаблицу Из лПараметрыДляДобавленияВоВременнуюТаблицу Цикл
			Запрос.Текст = ""Выбрать * Поместить "" + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + "" из &"" + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + "" КАК Выборка"";

			ТЗПараметры = ЗначениеИзСтрокиВнутр(лПараметрДляДобавленияВоВременнуюТаблицу.Значение);
			
			Если ТипЗнч(ТЗПараметры) <> Тип(""ТаблицаЗначений"") Тогда 
				ВызватьИсключение(""Параметр "" + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + "" должен иметь тип """"ТаблицаЗначений"""""");
			КонецЕсли;
			
			ТЗПараметрыНовая = Новый ТаблицаЗначений;

			Массив = Новый Массив;
			Массив.Добавить(Тип(""Строка""));
			КС = Новый КвалификаторыСтроки(500);
			ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

			Для Каждого Колонка Из ТЗПараметры.Колонки Цикл
				Если ЗначениеЗаполнено(Колонка.ТипЗначения) Тогда 
					ТЗПараметрыНовая.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
				Иначе
					ТЗПараметрыНовая.Колонки.Добавить(Колонка.Имя, ОписаниеТиповС);
				КонецЕсли;
			КонецЦикла;

			Для Каждого Строка Из ТЗПараметры Цикл
				НоваяСтрока = ТЗПараметрыНовая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;

			Запрос.УстановитьПараметр(лПараметрДляДобавленияВоВременнуюТаблицу.Имя, ТЗПараметрыНовая);
			Запрос.Выполнить();
		КонецЦикла; 
		
	Иначе
		Запрос = Новый Запрос();	
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ЗагрузитьПараметрыЗапросов(Запрос, ИдентификаторЗапроса);
	
	Попытка
		лРезультат = Запрос.Выполнить();
	Исключение
		ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПоказатьОшибкуНаСервере(ОписаниеОшибки());
		Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(лРезультат.Выгрузить(), УникальныйИдентификатор);
	
	СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);
	
КонецПроцедуры // ВыполнитьЗапросСервер()

&НаКлиенте
Процедура ДеревоЗапросовПараметрыЗапросовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЗапросовПараметрыЗапросов.ТекущиеДанные;	
	
	Если ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ВыбиратьТип = Истина;
	Иначе
		Элемент.ВыбиратьТип = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСекциюСЗапросами(Команда)
	ОбработкаДействияПоказатьСекциюСЗапросами(Не Элементы.ГруппаДанныеЗапроса.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультат(Команда)
	лИмяРодителяЭлементаРезультатЗапроса = РеквизитыТаблицыРезультата.ИмяЭлементаРодителя;
	лЭлементРезультатЗапроса             = Элементы[лИмяРодителяЭлементаРезультатЗапроса];
	лЭлементРезультатЗапроса.Видимость   = Не лЭлементРезультатЗапроса.Видимость;
	ОформитьКнопкуПоказатьРезультат(лЭлементРезультатЗапроса.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПараметры(Команда)
	Элементы.ГруппаПараметрыЗапросов.Видимость = Не Элементы.ГруппаПараметрыЗапросов.Видимость;
	ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПозицияКурсора(Команда)
	Элементы.ФормаКнопкаПозицияКурсора.Пометка = Не Элементы.ФормаКнопкаПозицияКурсора.Пометка;
	АвтоопределениеПозицииКурсора = Элементы.ФормаКнопкаПозицияКурсора.Пометка;	
	ВывестиПозициюКурсора();
КонецПроцедуры

#КонецОбласти

мВыполняетсяЗакрытие              = Ложь;
мКэшЗначений                      = Новый Структура;
мДлительнаяОперацияЗапущена       = Ложь;
мОперацияПослеСохраненияИзменений = Неопределено;",
{4,21,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",e9687fdc-7755-439c-8c4c-c2e3ff7dc837}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,1,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"ИмяФайлаСЗапросом",
{1,1,
{"ru","Имя файла с запросом"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ДеревоЗапросов",
{1,1,
{"ru","Дерево запросов"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,1,0,5,
{5,1,0,"ТекстЗапроса",
{1,1,
{"ru","Текст запроса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"СпособВыгрузки",
{1,1,
{"ru","Способ выгрузки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ПараметрыИБ",
{1,1,
{"ru","Параметры ИБ"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Идентификатор",
{1,1,
{"ru","Идентификатор"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{14},0,"РежимОтладки",
{1,1,
{"ru","Режим отладки"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{17},0,"ПутьКФайлуСОбработкой",
{1,1,
{"ru","Путь к файлу с обработкой"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{19},0,"АдресРезультата",
{1,1,
{"ru","Адрес результата"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{20},0,"АдресСпискаСпецПолей",
{1,1,
{"ru","Адрес списка спец полей"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{21},0,"ТекстТекущегоЗапроса",
{1,1,
{"ru","Текст текущего запроса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,1,0,0,
{0,0},
{0,0}
},
{9,
{24},0,"ПараметрыТекущегоЗапроса",
{1,1,
{"ru","Параметры текущего запроса"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,1,0,8,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Тип",
{1,1,
{"ru","Тип"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ТипВФорме",
{1,1,
{"ru","Тип в форме"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ЗначениеВФорме",
{1,1,
{"ru","Значение"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"КартинкаТипа",
{1,1,
{"ru","Картинка типа"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ГлобальныйПараметр",
{1,1,
{"ru","Глобальный параметр"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ДобавлятьВоВременнуюТаблицу",
{1,1,
{"ru","Добавлять во временную таблицу"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{25},0,"СписокТипов",
{1,1,
{"ru","Список типов"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,1,"ElementType",
{"#",f5c65050-3bbb-11d5-b988-0050bae0a95d,
{"Pattern",
{"#",280f5f0e-9c8a-49cc-bf6d-4d296cc17a63},
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3},
{"B"},
{"S"},
{"D"},
{"N",10,0,0},
{"#",dcfc3784-a14f-4786-ac7b-c82db5ba275f},
{"#",f5c65050-3bbb-11d5-b988-0050bae0a95d}
}
}
},
{0,0}
},
{9,
{26},0,"ИсполняемыйКод",
{1,1,
{"ru","Исполняемый код"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,4,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Текст",
{1,1,
{"ru","Текст"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ИдентификаторЗапроса",
{1,1,
{"ru","Идентификатор запроса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ИдентификаторСтроки",
{1,1,
{"ru","Идентификатор строки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{27},0,"ПараметрыЗапросов",
{1,1,
{"ru","Параметры запросов"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,9,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Тип",
{1,1,
{"ru","Тип"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ТипВФорме",
{1,1,
{"ru","Тип в форме"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ЗначениеВФорме",
{1,1,
{"ru","Значение"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"КартинкаТипа",
{1,1,
{"ru","Картинка типа"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"ИдентификаторЗапроса",
{1,1,
{"ru","Идентификатор запроса"}
},
{"Pattern",
{"S",40,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ИдентификаторСтроки",
{1,1,
{"ru","Идентификатор строки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ДобавлятьВоВременнуюТаблицу",
{1,1,
{"ru","Добавлять во временную таблицу"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{29},0,"ТипОбработка",
{1,1,
{"ru","Тип обработка"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{30},0,"ПлатформаАктуальна",
{1,1,
{"ru","Платформа актуальна"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{31},0,"РежимСовместимости",
{1,1,
{"ru","Режим совместимости"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{32},0,"ВерсияПлатформы",
{1,1,
{"ru","Версия платформы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{33},0,"ЗначенияПоУмолчанию",
{1,1,
{"ru","Значения по умолчанию"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{34},0,"ЭтотОбъектФорма",
{1,1,
{"ru","Этот объект форма"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{36},0,"СеансовыеДанные",
{1,1,
{"ru","Сеансовые данные"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{37},0,"АвтоопределениеПозицииКурсора",
{1,1,
{"ru","Автоопределение позиции курсора"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{39},0,"РеквизитыТаблицыРезультата",
{1,1,
{"ru","Реквизиты таблицы результата"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,1,"ПараметрыТекущегоЗапроса.ГлобальныйПараметр","ПараметрыТекущегоЗапроса.ГлобальныйПараметр",
{2,
{24},
{8}
},
{1,
{24}
},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCf0LDRgNCw0LzQtdGC0YDRi9CX0LDQv9GA0L7R
gdC+0LLQmNC80Y88L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCTwvc2VsZWN0aW9u
Pg0KCQkJPGZpbHRlcj4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNv
bXBhcmlzb24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7Q
n9Cw0YDQsNC80LXRgtGA0YvQotC10LrRg9GJ0LXQs9C+0JfQsNC/0YDQvtGB0LAu
0JPQu9C+0LHQsNC70YzQvdGL0LnQn9Cw0YDQsNC80LXRgtGAPC9sZWZ0Pg0KCQkJ
CQk8Y29tcGFyaXNvblR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0KCQkJCQk8
cmlnaHQgeHNpOnR5cGU9InhzOmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0KCQkJCTwv
aXRlbT4NCgkJCTwvZmlsdGVyPg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2Nv
cjppdGVtIHhzaTp0eXBlPSJTZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJ
PGRjc2NvcjpwYXJhbWV0ZXI+0KbQstC10YLQpNC+0L3QsDwvZGNzY29yOnBhcmFt
ZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0idjh1aTpDb2xvciI+
d2ViOlJlZDwvZGNzY29yOnZhbHVlPg0KCQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8
L2FwcGVhcmFuY2U+DQoJCTwvaXRlbT4NCgk8L2NvbmRpdGlvbmFsQXBwZWFyYW5j
ZT4NCgk8b3V0cHV0UGFyYW1ldGVycy8+DQo8L1NldHRpbmdzPg==}
},
{0,4,
{0,"ДействиеВыбора",
{"Pattern"},1},
{0,"РежимВыбора",
{"Pattern",
{"B"}
},1},
{0,"ЗакрыватьПриВыборе",
{"Pattern",
{"B"}
},1},
{0,"Заголовок",
{"Pattern",
{"S"}
},1}
},
{0,23,
{8,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьПараметрыИзЗапроса",
{1,1,
{"ru","Обновить параметры запроса"}
},
{1,1,
{"ru","Обновить параметры запроса"}
},
{0,
{0,
{"B",1},0}
},
{0,120,0},
{4,1,
{0,8f29e0e2-d5e6-41e8-a34d-9a0288156322},"",-1,-1,1,0,""},"ЗагрузитьПараметрыИзЗапроса",3,0,0,
{0,0},1,0,1,0,0},
{8,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НастроитьДополнительно",
{1,1,
{"ru","Дополнительно"}
},
{1,1,
{"ru","Настроить дополнительно"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,6b909f65-95a4-4697-8ca0-c8f331227b9a},"",-1,-1,1,0,""},"ОткрытьФормуНастроекАвтоСохранения",2,0,0,
{0,0},1,0,1,0,0},
{8,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьЗапрос",
{1,1,
{"ru","Выполнить"}
},
{1,1,
{"ru","Выполнить запрос"}
},
{0,
{0,
{"B",1},0}
},
{0,118,0},
{4,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0,""},"ВыполнитьЗапрос",2,0,0,
{0,0},1,0,1,0,0},
{8,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьЗапросыВФайл",
{1,1,
{"ru","Сохранить запросы в файл"}
},
{1,1,
{"ru","Сохранить запросы в файл"}
},
{0,
{0,
{"B",1},0}
},
{0,83,8},
{4,1,
{0,818ab7d0-4654-4542-bd5e-fd9d1352b5a1},"",-1,-1,1,0,""},"СохранитьЗапросыВФайл",1,0,0,
{0,0},1,0,1,0,0},
{8,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьЗапросыВНовыйФайл",
{1,1,
{"ru","Сохранить запросы в новый файл"}
},
{1,1,
{"ru","Сохранить запросы как"}
},
{0,
{0,
{"B",1},0}
},
{0,83,12},
{4,1,
{0,ed0bec43-4633-416c-8c08-0384ca444e32},"",-1,-1,1,0,""},"СохранитьЗапросыВНовыйФайл",1,0,0,
{0,0},1,0,1,0,0},
{8,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьФайлСЗапросами",
{1,1,
{"ru","Открыть"}
},
{1,1,
{"ru","Открыть файл с запросами"}
},
{0,
{0,
{"B",1},0}
},
{0,79,12},
{4,1,
{0,785362cb-3756-48ed-87d2-292ded17054a},"",-1,-1,1,0,""},"ОткрытьФайлСЗапросами",1,0,0,
{0,0},1,0,1,0,0},
{8,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьКод",
{1,1,
{"ru","Выполнить код"}
},
{1,1,
{"ru","Выполнить код"}
},
{0,
{0,
{"B",1},0}
},
{0,116,0},
{4,1,
{0,a6cbfd77-fcf0-40f4-a8de-ee0d3e580fe6},"",-1,-1,1,0,""},"ВыполнитьКод",1,0,0,
{0,0},1,0,1,0,0},
{8,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьДеревоЗапросов",
{1,1,
{"ru","Показать/скрыть дерево запросов"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,72,16},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьДеревоЗапросов",3,0,0,
{0,0},1,0,1,0,0},
{8,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Intellisense",
{1,1,
{"ru","Intellisense"}
},
{1,1,
{"ru","Intellisense"}
},
{0,
{0,
{"B",1},0}
},
{0,32,8},
{4,1,
{0,affb1617-24bc-4170-9c84-0902cc3ef206},"",-1,-1,1,0,""},"КнопкаДействияКнопкаМенюIntellisense",1,0,0,
{0,0},1,0,1,0,0},
{8,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьКомментарий",
{1,1,
{"ru","Добавить комментарий"}
},
{1,1,
{"ru","Добавить комментарий"}
},
{0,
{0,
{"B",1},0}
},
{0,111,8},
{4,0,
{0},"",-1,-1,1,0,""},"ДобавитьКомментарий",3,1,0,
{0,0},1,0,1,0,0},
{8,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"УдалитьКомментарий",
{1,1,
{"ru","Удалить комментарии"}
},
{1,1,
{"ru","Удалить комментарий"}
},
{0,
{0,
{"B",1},0}
},
{0,111,12},
{4,0,
{0},"",-1,-1,1,0,""},"УдалитьКомментарий",3,1,0,
{0,0},1,0,1,0,0},
{8,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КонструкторЗапроса",
{1,1,
{"ru","Конструктор запроса"}
},
{1,1,
{"ru","Конструктор запроса"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,1f046bc2-d6c5-46a3-a459-b2c0508f86fb},"",-1,-1,1,0,""},"КонструкторЗапроса",2,0,0,
{0,0},1,0,1,0,0},
{8,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СкопироватьОбработкуДляОтладки",
{1,1,
{"ru","Скопировать обработку для отладки"}
},
{1,1,
{"ru","Скопировать обработку для отладки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,f62488ee-f90c-47f7-929d-f42ec11a1e63},"",-1,-1,1,0,""},"СкопироватьОбработкуДляОтладки",1,0,0,
{0,0},1,0,1,0,0},
{8,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьЗапросыДляОтладки",
{1,1,
{"ru","Загрузить запросы для отладки"}
},
{1,1,
{"ru","Загрузить запросы для отладки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,83c8f18d-8701-41f3-bef4-53f88adbb868},"",-1,-1,1,0,""},"ЗагрузитьЗапросыДляОтладки",1,0,0,
{0,0},1,0,1,0,0},
{8,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьРезультат",
{1,1,
{"ru","Показать результат"}
},
{1,1,
{"ru","Показать результат"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьРезультат",3,0,0,
{0,0},1,0,1,0,0},
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСекциюСЗапросами",
{1,1,
{"ru","Показать секцию с запросами"}
},
{1,1,
{"ru","Показать секцию с запросами"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСекциюСЗапросами",3,0,0,
{0,0},1,0,1,0,0},
{8,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьПараметры",
{1,1,
{"ru","Показать параметры"}
},
{1,1,
{"ru","Показать параметры"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьПараметры",3,0,0,
{0,0},1,0,1,0,0},
{8,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"МенюИнформация",
{1,1,
{"ru","..."}
},
{1,1,
{"ru","Меню информация"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"МенюИнформация",0,0,0,
{0,0},1,0,1,0,0},
{8,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НовыйФайлЗапросов",
{1,1,
{"ru","Новый файл запросов"}
},
{1,1,
{"ru","Новый файл запросов"}
},
{0,
{0,
{"B",1},0}
},
{0,78,8},
{4,1,
{0,894afc03-9904-465d-b671-f555ffb9b21c},"",-1,-1,1,0,""},"НовыйФайлЗапросов",1,0,0,
{0,0},1,0,1,0,0},
{8,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"МенюДополнительно",
{1,1,
{"ru","..."}
},
{1,1,
{"ru","Меню информация"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,258a0e41-255f-4239-8457-8b0e1983786c},"",-1,-1,1,0,""},"МенюДополнительно",0,0,0,
{0,0},1,0,1,0,0},
{8,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СоздатьПараметрИзБуфера",
{1,1,
{"ru","Создать параметр из буфера"}
},
{1,1,
{"ru","Создать параметр из буфера"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СоздатьПараметрИзБуфера",3,0,0,
{0,0},1,0,1,0,0},
{8,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПозицияКурсора",
{1,1,
{"ru","Позиция курсора"}
},
{1,1,
{"ru","Позиция курсора"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПозицияКурсора",3,0,0,
{0,0},1,0,1,0,0},
{8,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НоваяСтрокаНаТомЖеУровне",
{1,1,
{"ru","Новая строка на том же уровне"}
},
{1,1,
{"ru","Новая строка на том же уровне"}
},
{0,
{0,
{"B",1},0}
},
{0,78,12},
{4,0,
{0},"",-1,-1,1,0,""},"НоваяСтрокаНаТомЖеУровне",3,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}