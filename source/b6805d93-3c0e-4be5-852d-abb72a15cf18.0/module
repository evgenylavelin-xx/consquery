//Консоль запросов (с)Евгений Лавелин
//e-mail:work@lavelin.ru
//http: www.lavelin.ru

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
 
Перем мФормаПараметров Экспорт;         // форма параметров
Перем мФормаИсполняемыйКод Экспорт;		// форма вариантов кода
Перем мФормаПоиска Экспорт;				// форма поиска
Перем мФормаПараметрыИБ Экспорт;		// форма параметров ИБ
Перем мТаблицаЗагружена;                // признак того, что рез - т запроса загружен в табличное поле
Перем мСводнаяТаблицаЗагружена;         // признак того, что рез - т запроса загружен в сводную таблицу

Перем мВыполняетсяКопированиеСтроки, мСохранитьЗапросТекущейСтроки, мОтменаРедактирования, мЭтотОбъектФорма;

Перем мДатаНачалаВыполнения Экспорт;
Перем мДатаОкончанияЗапроса Экспорт;

Перем РежимВыбораВеткиДерева Экспорт;

Перем АгрегатнаяФункция;

Перем ЗапросДляОтладки Экспорт; 		//Сюда перед открытием формы необходимо передать значение типа Запрос

Перем мПутьККартинкам Экспорт, мИдентификаторСеанса Экспорт;

Перем мИмяФайла;                        // имя файла запросов 
Перем мИмяПути;                         // путь к файлу запорсов

Перем мЗаголовокФормы;                  // заголовок формы

Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.

Перем мИмяРеквизитаТаблицы;

/////////////////////////////////////////
// КонтекстнаяПодсказка

//ПРОЦЕДУРА ДУБЛЬ(!!!)
Процедура ОткрытьМенюIntelliSense(ПолеТекстаЗапроса)

	Если ПолеТекстаЗапроса.ВыделенныйТекст <> "" тогда
		Возврат
	Конецесли;
	
	Если Не гИнициализацияVBScript() тогда
		Возврат;	
	КонецЕсли;
	
	//Запоминаем текущие координаты курсора 
	лСтруктураКоординат = гПолучитьГраницыВыделенияПоляФормы(ПолеТекстаЗапроса);
	
	//Если позиция курсора больше длины текущей строки, то перемещаем курсор в конец строки
	лТекущаяСтрока = ПолеТекстаЗапроса.ПолучитьСтроку(лСтруктураКоординат.СтрокаНач);
	Если СтрДлина(лТекущаяСтрока) < лСтруктураКоординат.КолонкаКон тогда
		лСтруктураКоординат.КолонкаНач = СтрДлина(лТекущаяСтрока)+1;
		лСтруктураКоординат.КолонкаКон = лСтруктураКоординат.КолонкаНач;
	КонецЕсли;
	
	лПозицияКурсораВТексте = ПолучитьПозициюКурсораВТексте(ПолеТекстаЗапроса, лСтруктураКоординат);
	лДанныеДляПодбораКП    = гПолучитьДанныеДляПодбораКП(ПолеТекстаЗапроса.ПолучитьТекст(), лПозицияКурсораВТексте);
	мПутьККартинкам        = гСеансовыеДанные.ПутьККартинкам;
	мИдентификаторСеанса   = гСеансовыеДанные.ИдентификаторСеанса; 
	
	лРезультатКП = Неопределено;
	
	Если лДанныеДляПодбораКП <> Неопределено Тогда 
		
		// выбираем значения контекстной подсказки
		Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 0 Тогда 
			Возврат;
		Иначе
			Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 1 Тогда 
				лВыбранноеЗначение = лДанныеДляПодбораКП.ЗначенияДляВыбора[0];
			Иначе
				Если лДанныеДляПодбораКП.МножественныйВыбор Тогда 
					Если Не лДанныеДляПодбораКП.ЗначенияДляВыбора.ОтметитьЭлементы() Тогда 
						Возврат 
					КонецЕсли;
					
					лВыбранноеЗначение = Новый СписокЗначений;
					Для каждого лВыбранныйЭлемент Из лДанныеДляПодбораКП.ЗначенияДляВыбора Цикл 
						Если Не лВыбранныйЭлемент.Пометка Тогда 
							Продолжить;
						КонецЕсли;
						лВыбранноеЗначение.Добавить(лВыбранныйЭлемент.Значение);
					КонецЦикла; 
				Иначе
					лВыбранноеЗначение = лДанныеДляПодбораКП.ЗначенияДляВыбора.ВыбратьЭлемент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если лВыбранноеЗначение <> Неопределено Тогда 
		лВременныйТД = Новый ТекстовыйДокумент;
		Если ТипЗнч(лВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
			лРезультатПодстановкиКП = "";
			Для каждого ЭлементСписка Из лВыбранноеЗначение Цикл
				лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = "", "", ", ") + ЭлементСписка.Значение;
			КонецЦикла; 
		Иначе
			лРезультатПодстановкиКП = лВыбранноеЗначение.Значение
		КонецЕсли;
		лВременныйТД.УстановитьТекст(лРезультатПодстановкиКП);
		
		лТекстЗапроса = Лев(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора, СтрДлина(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора) - СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)) + 
			лРезультатПодстановкиКП + Сред(лДанныеДляПодбораКП.ТекстЗапросаПослеКурсора, СтрДлина(лДанныеДляПодбораКП.СловоПослеКурсора) + 1);
			
		лРезультатКП = Новый Структура("ТекстЗапроса, Режим, дельта_x, дельта_y, дельта_x1, дельта_y1", 
			лТекстЗапроса, 
			лДанныеДляПодбораКП.РежимКП.Режим,
			СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора), 
			0, 
			СтрДлина(лВременныйТД.ПолучитьСтроку(лВременныйТД.КоличествоСтрок())) - ?(лВременныйТД.КоличествоСтрок() > 1, 0, СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)), 
			лВременныйТД.КоличествоСтрок() - 1
			);
	КонецЕсли;
	
	Если лРезультатКП <> Неопределено Тогда 
		
		ПолеТекстаЗапроса.УстановитьТекст(лРезультатКП.ТекстЗапроса);
		
		Если гПродолжитьФормироватьКП(лРезультатКП.Режим, лРезультатПодстановкиКП) Тогда
			ПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.СтрокаНач + лРезультатКП.дельта_y1, лСтруктураКоординат.КолонкаНач + лРезультатКП.дельта_x1,
				лСтруктураКоординат.СтрокаНач + лРезультатКП.дельта_y1, лСтруктураКоординат.КолонкаНач + лРезультатКП.дельта_x1);			
			ОткрытьМенюIntelliSense(ПолеТекстаЗапроса)
		Иначе
			ПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.СтрокаНач - лРезультатКП.дельта_y, лСтруктураКоординат.КолонкаНач - лРезультатКП.дельта_x, 
				лСтруктураКоординат.СтрокаНач + лРезультатКП.дельта_y1, лСтруктураКоординат.КолонкаНач + лРезультатКП.дельта_x1);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ОткрытьМенюIntelliSense()

//ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция ПолучитьПозициюКурсораВТексте(ПолеФормыСТекстом, СтруктураКоординат)
	
	// выделяем текст от начала, до текущего
	ПолеФормыСТекстом.УстановитьГраницыВыделения(1, 1, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Результат = СтрДлина(ПолеФормыСТекстом.ВыделенныйТекст);

	// возвращаем исходное выделение
	ПолеФормыСТекстом.УстановитьГраницыВыделения(СтруктураКоординат.СтрокаНач, СтруктураКоординат.КолонкаНач, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Возврат Результат
	
КонецФункции // ПолучитьПозициюКурсораВТексте()

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ИнициализацияДанных()
	
	мСохранитьЗапросТекущейСтроки = Истина;
	
	лСистемнаяИнформация = Новый СистемнаяИнформация();
	лВерсияПлатформы     = лСистемнаяИнформация.ВерсияПриложения;
	лПлатформаАктуальна  = (гСравнитьВерсии(лВерсияПлатформы, гМинимальныйРелизПлатформы()) >= 0);
	
	Если лПлатформаАктуальна Тогда 
		мЭтотОбъектФорма = "ЭтотОбъект"
	Иначе
		мЭтотОбъектФорма = "ЭтаФорма"
	КонецЕсли;
	
	ПараметрыПодключенияFTP = Новый Структура();
	ПараметрыПодключенияFTP.Вставить("Адрес");
	ПараметрыПодключенияFTP.Вставить("Пользователь");
	ПараметрыПодключенияFTP.Вставить("Пароль");
	ПараметрыПодключенияFTP.Вставить("Порт");
	
	// Создадим структуру дерева запросов
	ДеревоЗапросов.Колонки.Добавить("ТекстЗапроса");
	ДеревоЗапросов.Колонки.Добавить("СпособВыгрузки");
	ДеревоЗапросов.Колонки.Добавить("ПараметрыИБ");
	ДеревоЗапросов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

	ПараметрыЗапросов.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка"));
	ПараметрыЗапросов.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ПараметрыЗапросов.Колонки.Добавить("Значение");
	ПараметрыЗапросов.Колонки.Добавить("Имя");
	ПараметрыЗапросов.Колонки.Добавить("Тип");
	
	ИсполняемыйКод.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка"));
	ИсполняемыйКод.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ИсполняемыйКод.Колонки.Добавить("Текст");
	ИсполняемыйКод.Колонки.Добавить("Имя");
	
	ПараметрыИБ.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка"));
	ПараметрыИБ.Колонки.Добавить("Использовать");
	ПараметрыИБ.Колонки.Добавить("Установить");
	ПараметрыИБ.Колонки.Добавить("Версия");
	ПараметрыИБ.Колонки.Добавить("КаталогБазы");
	ПараметрыИБ.Колонки.Добавить("SQL_Сервер");
	ПараметрыИБ.Колонки.Добавить("SQL_БазаДанных");
	ПараметрыИБ.Колонки.Добавить("ТипБазы");
	ПараметрыИБ.Колонки.Добавить("ИмяПользователя");
	ПараметрыИБ.Колонки.Добавить("Пароль");
	ПараметрыИБ.Колонки.Добавить("ВыводитьСообщение");
	
КонецПроцедуры // ИнициализацияДанных()
 
Функция ПолучитьТаблицуНайденныхСсылок(КолонкаССылками)

	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	Если лТаблицаРезультата.Количество() = 0 Тогда
		Предупреждение("Таблица результатов запроса пуста.", 10);
		Возврат Новый ТаблицаЗначений
	КонецЕсли;
	
	КолонкаССылками = кзВыбратьКолонку(ЭлементыФормы);
	Если КолонкаССылками = Неопределено Тогда
		Возврат Новый ТаблицаЗначений
	КонецЕсли;
	
	Сообщить("Поиск ссылок на объекты (колонка """ + КолонкаССылками + """) начато в " + ТекущаяДата());
	
	лПараметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		лПараметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		лПараметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	лТаблицаНайденныхСсылок = НайтиПоСсылкам(лТаблицаРезультата.ВыгрузитьКолонку(КолонкаССылками));
	//Ссылка	Данные	Метаданные
	лТаблицаНайденныхСсылок.Колонки.Добавить("ПутьКРасположениюСсылкиВОбъекте",, "Путь к расположению ссылки в объекте");
	
	Для каждого СтрокаТаблицы Из лТаблицаНайденныхСсылок Цикл
		
		Ссылка = СтрокаТаблицы.Ссылка;
		Объект = СтрокаТаблицы.Данные;
		СписокПутей = Новый СписокЗначений;
		
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			 
			//Справочники
			Если Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
				Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Объект.Владелец = Ссылка Тогда
					СписокПутей.Добавить("Владелец");
				КонецЕсли;
				
				Если СтрокаТаблицы.Метаданные.Иерархический И Объект.Родитель = Ссылка Тогда
					СписокПутей.Добавить("Родитель");
				КонецЕсли;
				
				
			//Документы
			ИначеЕсли Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные)  Тогда
				
				Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
					
					ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
					ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и лПараметры[Движение.Имя + "Корреспонденция"];
					
					НаборЗаписей  = Объект.ПолучитьОбъект().Движения[Движение.Имя];
					НаборЗаписей.Прочитать();
					ТаблицаНабора = НаборЗаписей.Выгрузить();
					
					Если ТаблицаНабора.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					масИменКолонок = Новый Массив;
					
					// Получим имена измерений, которые могут содержать ссылку
					Для Каждого Измерение ИЗ Движение.Измерения Цикл
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							Если (Измерение.Имя = "Валюта") И ЕстьКорреспонденция Тогда
								масИменКолонок.Добавить("ВалютаДт");
								масИменКолонок.Добавить("ВалютаКт");
							Иначе
								масИменКолонок.Добавить(Измерение.Имя);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
							
					// Получим имена ресурсов, которые могут содержать ссылку
					Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
						Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
							Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
								масИменКолонок.Добавить(Ресурс.Имя);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
							
					// Получим имена ресурсов, которые могут содержать ссылку
					Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							масИменКолонок.Добавить(Реквизит.Имя);
						КонецЕсли;
					КонецЦикла;
					
					// Произведем замены в таблице
					Для Каждого ИмяКолонки Из масИменКолонок Цикл
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
						Пока СтрокаТабЧасти <> Неопределено Цикл

							СтрокаТабЧасти[ИмяКолонки] = Неопределено;//затираем значение в строке, чтобы строка не попалась на следующей итерации поиска
							СписокПутей.Добавить("Движение_" + Движение.Имя + "_" + ИмяКолонки + "[" + СтрокаТабЧасти.НомерСтроки + "]");
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
							
						КонецЦикла;
					КонецЦикла;
					
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						
						Для ИндексСубконто = 1 по лПараметры[Движение.Имя + "Субконто"] Цикл
							Если ЕстьКорреспонденция Тогда
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = Неопределено;//затираем значение в строке, чтобы строка не попалась на следующей итерации поиска
									СписокПутей.Добавить("Движение_" + Движение.Имя + "_СубконтоДт"+ИндексСубконто + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								КонецЦикла;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = Неопределено;
									СписокПутей.Добавить("Движение_" + Движение.Имя + "_СубконтоКт"+ИндексСубконто + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								КонецЦикла;								
							Иначе							
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["Субконто"+ИндексСубконто] = Неопределено;
									СписокПутей.Добавить("Движение_" + Движение.Имя + "_Субконто"+ИндексСубконто + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								КонецЦикла;							
							КонецЕсли;						
						КонецЦикла;
						
						Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
							Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
								Если ЕстьКорреспонденция Тогда
									Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
										СписокПутей.Добавить("Движение_" + Движение.Имя + "_СчетДт" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									КонецЕсли;
									Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
										СписокПутей.Добавить("Движение_" + Движение.Имя + "_СчетКт" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									КонецЕсли;
								Иначе
									Если СтрокаТабЧасти.Счет = Ссылка Тогда
										СписокПутей.Добавить("Движение_" + Движение.Имя + "_Счет" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти["ВидРасчета"] = Неопределено;
							СписокПутей.Добавить("Движение_" + Движение.Имя + "_ВидРасчета" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				
				Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
						НадоЗаписывать = Ложь;
						НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
						НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
						НаборЗаписи.Прочитать();
						ТаблицаНабора = НаборЗаписей.Выгрузить();
						
						Если ТаблицаНабора.Количество() > 0 Тогда
							Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
								Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И ТаблицаНабора[0][Измерение.Имя]=Ссылка Тогда
									ТаблицаНабора[0][Измерение.Имя] = Неопределено;
									СписокПутей.Добавить("Последовательность_" + Последовательность.Имя + "_Измерение_" + Измерение.Имя);
								КонецЕсли;
							КонецЦикла;					
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Объект[Реквизит.Имя] = Ссылка Тогда
					СписокПутей.Добавить("Реквизит_" + Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						ОбъектТЧ = Объект[ТЧ.Имя];
						СтрокаТабЧасти = ОбъектТЧ.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = Неопределено;//затираем значение в строке, чтобы строка не попалась на следующей итерации поиска
							СписокПутей.Добавить("ТЧ_" + ТЧ.Имя + "_Реквизит_" + Реквизит.Имя + "[" + СтрокаТабЧасти.НомерСтроки + "]");
							СтрокаТабЧасти = ОбъектТЧ.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(Объект[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(Объект.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			
			Попытка
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						СписокПутей.Добавить(?(СтруктураИзмерений.Свойство(Колонка.Имя), "Измерение_", "") + Колонка.Имя);
					КонецЕсли;
				КонецЦикла;
				
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;

		СтрокаТаблицы.ПутьКРасположениюСсылкиВОбъекте = СписокПутей;
		
	КонецЦикла; 
	
	Возврат лТаблицаНайденныхСсылок

КонецФункции // ПолучитьТаблицуНайденныхСсылок()
 
Процедура кзУстановитьШиринуКолонок(ЭлементыФормы,СтруктураСРазмерами)
	
	ТекКолонки = Вычислить("ЭлементыФормы." + мИмяРеквизитаТаблицы + ".Колонки");
	Для каждого Колонка Из ТекКолонки Цикл
		Если СтруктураСРазмерами.Свойство(Колонка.Имя) Тогда
			Колонка.Ширина = СтруктураСРазмерами[Колонка.Имя]
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапросИзФормы(ОбъектЗапрос = Неопределено, ЭлементТаблицаРезультата = Неопределено, ВыполнитьПакет = Ложь)

	Если ФлажокСохранитьПередВыполнением И Модифицированность Тогда
		Если Не СохранитьЗапросы(мИмяФайла) Тогда
			Если Вопрос("Запрос не сохранился, продолжить выполнение?" + Символы.ПС + 
				"Чтобы не выводился данный вопрос снимите галочку ""Сохранить запрос перед выполнением"".", 
					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Модифицированность Тогда 
		СохранитьЗапросТекущейСтроки();
	КонецЕсли;
		
	//если переменная объектзапрос неопределена (т.е. это не вызов обработки извне), то определяем ее
	Если ОбъектЗапрос = Неопределено Тогда 
		ОбъектЗапрос = Новый Запрос;
		ОбъектЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;

	ОбъектЗапрос.Текст = СтрЗаменить(ПолучитьТекстЗапроса(Истина), "|", "");

	Если ПустаяСтрока(ОбъектЗапрос.Текст) Тогда
		Предупреждение("Не заполнен текст запроса!", 10);
		Возврат;
	КонецЕсли;
	
	СписокПараметров = ОбъектЗапрос.НайтиПараметры();
	
	Для каждого СтрокаПараметров Из мФормаПараметров.ПараметрыСписок Цикл
		
		Если СписокПараметров.Найти(СтрокаПараметров.Имя) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПараметров.Тип = гТипыЗначенийПараметров().ТаблицаЗначений Тогда 
			лИдентификаторПараметра = гПреобразоватьВПравильноеНазвание(СтрокаПараметров.ИдентификаторСтроки);
			Если гСтруктураТЗДляВременныхТаблиц.Свойство(лИдентификаторПараметра) Тогда 
				ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.Имя, гСтруктураТЗДляВременныхТаблиц[лИдентификаторПараметра]);
			Иначе
				Сообщить("Параметр " + СтрокаПараметров.Имя + " не простого типа. 
					|Значение данного параметра берется из структуры гСтруктураТЗДляВременныхТаблиц с ключем """ + лИдентификаторПараметра + """.
					|Код для вставки значения параметра через форму выполнения произвольного кода:                              
					|	гСтруктураТЗДляВременныхТаблиц.Вставить(""" + лИдентификаторПараметра + """, %ПеременнаяСоЗначениемПараметра%)", СтатусСообщения.Важное);
			КонецЕсли;
		Иначе
			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.Имя, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;

	мДатаНачалаВыполнения = ТекущаяДата();
	
	Если ВыполнитьПакет Тогда 
		мРезЗапроса = ОбъектЗапрос.ВыполнитьПакет();
	Иначе
		мРезЗапроса = ОбъектЗапрос.Выполнить();
	КонецЕсли;

	мДатаОкончанияЗапроса = ТекущаяДата();

	мТаблицаЗагружена = Ложь;
	мСводнаяТаблицаЗагружена = Ложь;

	
	//сформируем список временных таблиц
	Если ТипЗнч(ОбъектЗапрос) <> Тип("COMОбъект") Тогда 
		
		Если гПодменюВременныеТаблицыКнопки.ИспользоватьМенеджерВременныхТаблиц.Пометка Тогда 
			
			// Проанализируем использование временных таблиц
			Если гИнициализацияVBScript() тогда
				
				// паттерн, позволяющий получить строку с названием виртуальной таблицы
				RegExp.Pattern	= "^(//){0,}.*ПОМЕСТИТЬ(\s){0,}(//){0,}(.){0,}[^\s; ]{1,}";//Ищем имена создаваемых таблиц
				Matches			= RegExp.Execute(ОбъектЗапрос.Текст);
				ЧислоВхождений	= Matches.Count();
				
				НекорректныеИменаТаблиц = Новый Массив;
				
				Если ЧислоВхождений>0 Тогда 
					
					Для Счетчик = 0 По ЧислоВхождений-1 Цикл
						
						Match = Matches.Item(Счетчик);
						Если Найти(Match.Value, "//") = 0 Тогда
							
							RegExp.Pattern = "ПОМЕСТИТЬ(\s){0,}[^\s; ]{1,}";
							SubMatches = RegExp.Execute(Match.Value);
							Если SubMatches.Count > 0 Тогда //В одной строке может быть вписано сразу несколько вхождений
								
								Для СубСчетчик = 0 По SubMatches.Count - 1 Цикл
									
									SubMatch = SubMatches.Item(СубСчетчик);
									ИмяТаблицы = СокрЛП(Сред(СокрЛП(SubMatch.Value), 10));
									
									Если ВременныеТаблицы.Найти(ИмяТаблицы,"Имя") = Неопределено Тогда
										
										ВременныеТаблицы.Добавить().Имя = ИмяТаблицы;
										
									КонецЕсли;
									
								КонецЦикла;
							КонецЕсли;						
						КонецЕсли;					
					КонецЦикла;
				КонецЕсли;
				
				RegExp.Pattern	= "^(//){0,}.*УНИЧТОЖИТЬ(\s){0,}(//){0,}(.){0,}[^\s; ]{1,}";
				Matches			= RegExp.Execute(ОбъектЗапрос.Текст);
				ЧислоВхождений	= Matches.Count();
				
				НекорректныеИменаТаблиц.Очистить();
				
				Если ЧислоВхождений > 0 Тогда 
					Для Счетчик = 0 По ЧислоВхождений-1 Цикл
						
						Match = Matches.Item(Счетчик);
						Если Найти(Match.Value, "//") = 0 Тогда
							
							RegExp.Pattern = "УНИЧТОЖИТЬ(\s){0,}[^\s; ]{1,}";
							SubMatches = RegExp.Execute(Match.Value);
							Если SubMatches.Count > 0 Тогда //В одной строке может быть вписано сразу несколько вхождений
								Для СубСчетчик = 0 По SubMatches.Count-1 Цикл
									
									SubMatch	= SubMatches.Item(СубСчетчик);
									ИмяТаблицы	= СокрЛП(Сред(СокрЛП(SubMatch.Value), 11));
									
									стрВременнойТаблицы = ВременныеТаблицы.Найти(ИмяТаблицы,"Имя");
									Если стрВременнойТаблицы <> Неопределено Тогда
										ВременныеТаблицы.Удалить(стрВременнойТаблицы);
									Иначе
										НекорректныеИменаТаблиц.Добавить(ИмяТаблицы);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Счетчик = 0;
				Пока Счетчик < ВременныеТаблицы.Количество() Цикл
					ИмяТаблицы = ВременныеТаблицы[Счетчик].Имя;
					ВременнаяТаблица = кзДобавитьВременнуюТаблицу(ИмяТаблицы, ОбъектЗапрос.МенеджерВременныхТаблиц);
					Если ВременнаяТаблица = Неопределено Тогда 
						ВременныеТаблицы.Удалить(Счетчик);
						Счетчик = Счетчик - 1;
					Иначе 
						гСоответствиеВременныеТаблицы.Вставить(ИмяТаблицы, ВременнаяТаблица);
					КонецЕсли;
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				Для каждого ВременнаяТаблица Из ВременныеТаблицы Цикл
					ИмяТаблицы = ВременнаяТаблица.Имя;
					гСоответствиеВременныеТаблицы.Вставить(ИмяТаблицы, кзДобавитьВременнуюТаблицу(ИмяТаблицы, ОбъектЗапрос.МенеджерВременныхТаблиц));
				КонецЦикла; 
				
				Если НекорректныеИменаТаблиц.Количество() > 0 Тогда
					ИменаТаблиц = "";
					Для Счетчик = 0 По Мин(НекорректныеИменаТаблиц.Количество() - 1, 9) Цикл
						ИменаТаблиц = ИменаТаблиц + НекорректныеИменаТаблиц[Счетчик] + Символы.ПС;
					КонецЦикла;
					Если НекорректныеИменаТаблиц.Количество() > 10 Тогда
						ИменаТаблиц = ИменаТаблиц + "..."+Символы.ПС;
					КонецЕсли;
					
					Если Вопрос("Некоторые временные таблицы не были найдены в менеджере:"+Символы.ПС+ИменаТаблиц+"Выполнение запроса возможно приведет к ошибке. Продолжить выполнение?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; // гИнициализацияVBScript()
		Иначе
			ВременныеТаблицы.Очистить();
		КонецЕсли; 
		
	КонецЕсли; //ТипЗнч(ОбъектЗапрос) <> Тип("COMОбъект")

	ЗагрузитьРезультат(ЭлементТаблицаРезультата);

	Если гПодменюВременныеТаблицыКнопки.ИспользоватьМенеджерВременныхТаблиц.Пометка Тогда 
		гПерерисоватьСпискиВременныхТаблиц();
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗапросИзФормы()

//СравнитьФайлы() - Сравнивает два файла и выдает рещультат
//Параметры:
//ИмяПервогоФайла,ИмяВторогоФайла - Имена сравниваемых файлов
//СпособСравнения - Способ сравнения текст/табдок
// Получает текст запроса Из текстового поля
//
// Параметры:
//  СВыделением - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция ПолучитьТекстЗапроса(СВыделением) Экспорт

	Если Не СВыделением Тогда
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

    ТекстЗап = ЭлементыФормы.ТекстЗапроса.ПолучитьВыделенныйТекст();
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

КонецФункции // ПолучитьТекстЗапроса()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура ЗадатьТекстЗапроса(Текст)

	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);

КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура ОбновитьЗаголовок()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗаголовок()

Процедура СохранитьЗапросТекущейСтроки()

	Если мОтменаРедактирования = Истина Тогда 
		мОтменаРедактирования = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> Неопределено Тогда

		Если мТекущаяСтрока.ТекстЗапроса <> ПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		     
		мТекущаяСтрока.СпособВыгрузки = СпособВыгрузки;
		мТекущаяСтрока.ТекстЗапроса   = ПолучитьТекстЗапроса(Ложь);
		
		//#добавлениепараметразапроса 1
		лПараметрыЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ""));		
		Для каждого лПараметрЗапроса Из лПараметрыЗапроса Цикл
			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
		КонецЦикла; 
		
		лПараметрыЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", мТекущаяСтрока.Идентификатор));
		Для каждого лПараметрЗапроса Из лПараметрыЗапроса Цикл
			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
		КонецЦикла; 
		
		Для каждого ПараметрЗапроса Из мФормаПараметров.ПараметрыСписок Цикл
			лНоваяСтрока = ПараметрыЗапросов.Добавить();
			ЗаполнитьЗначенияСвойств(лНоваяСтрока, ПараметрЗапроса);
			лНоваяСтрока.Значение = ЗначениеВСтрокуВнутр(ПараметрЗапроса.Значение);
			Если ПараметрЗапроса.ГлобальныйПараметр Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = "";
			Иначе
				лНоваяСтрока.ИдентификаторЗапроса = мТекущаяСтрока.Идентификатор;
			КонецЕсли;
		КонецЦикла; 
		
		// сохраняем исполняемый код
		лИсполняемыйКодМассив = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", мТекущаяСтрока.Идентификатор));
		Для каждого лИсполняемыйКод Из лИсполняемыйКодМассив Цикл
			ИсполняемыйКод.Удалить(лИсполняемыйКод);
		КонецЦикла; 
		
		Для каждого лИсполняемыйКод Из мФормаИсполняемыйКод.ИсполняемыйКодСписок Цикл
			лНоваяСтрока = ИсполняемыйКод.Добавить();
			ЗаполнитьЗначенияСвойств(лНоваяСтрока, лИсполняемыйКод);
			лНоваяСтрока.ИдентификаторЗапроса = мТекущаяСтрока.Идентификатор;
		КонецЦикла;
		
		мТекущаяСтрока.ПараметрыИБ = мФормаПараметрыИБ.ТаблицаПараметров.Скопировать();
		
	КонецЕсли;	

	кзСохранитьШаблоны(ЭтаФорма);

КонецПроцедуры // СохранитьЗапросТекущейСтроки()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура ОчиститьДанныеПоЗапросам()

	ДеревоЗапросов.Строки.Очистить();
	
	ЗадатьТекстЗапроса("");
	
	мТекущаяСтрока = Неопределено;
	мФормаПараметров.ПараметрыСписок.Очистить();
	мФормаИсполняемыйКод.ИсполняемыйКодСписок.Очистить();
	мФормаПараметрыИБ.ТаблицаПараметров.Очистить();
	
	ПараметрыЗапросов.Очистить();
	ИсполняемыйКод.Очистить();
	
КонецПроцедуры // ОчиститьДанныеПоЗапросам()

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()

	СохранитьЗначение("КонсольЗапросов_ИмяФайла", мИмяФайла);
	СохранитьЗначение("КонсольЗапросов_ИмяПути",  мИмяПути);
	
КонецПроцедуры // СохранитьИмяФайла()

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура ВосстановитьИмяФайла()

	мИмяФайла = ВосстановитьЗначение("КонсольЗапросов_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("КонсольЗапросов_ИмяПути");

	Если мИмяФайла = НеОпределено Тогда
		мИмяФайла = "";
	КонецЕсли;

	Если мИмяПути = НеОпределено Тогда
		мИмяПути = "";
	КонецЕсли;
	
	ОбновитьЗаголовок();

КонецПроцедуры // ВосстановитьИмяФайла()

Процедура СкопироватьСтрокуЗапроса(СтрокаДерева, НоваяСтрока, Параметры)

	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	
	лЭтоСтарыйРелиз = (Параметры.Свойство("ЭтоСтарыйРелиз") И Параметры.ЭтоСтарыйРелиз);
	
	Если лЭтоСтарыйРелиз Тогда 
		НоваяСтрока.Имя = СтрокаДерева.Запрос;
	Иначе
		НоваяСтрока.Имя = СтрокаДерева.Имя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Идентификатор) ИЛИ (Параметры.Свойство("ОбновлятьИД") И Параметры.ОбновлятьИД) Тогда 
		НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	НоваяСтрока.ТекстЗапроса  = СтрокаДерева.ТекстЗапроса;
	
	Если лЭтоСтарыйРелиз Тогда 
		//#добавлениепараметразапроса 2
		Если Параметры.ЕстьПараметрыЗапроса И ЗначениеЗаполнено(СтрокаДерева.ПараметрыЗапроса) Тогда 
			Для каждого Строка Из СтрокаДерева.ПараметрыЗапроса Цикл
				лНовыйПараметр = ПараметрыЗапросов.Добавить();
				лНовыйПараметр.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				лНовыйПараметр.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
				лНовыйПараметр.Значение             = ЗначениеВСтрокуВнутр(Строка.ЗначениеПараметра);
				лНовыйПараметр.Имя                  = Строка.ИмяПараметра;
			КонецЦикла; 
		КонецЕсли;
		
		Если Параметры.ЕстьВариантыКода И ЗначениеЗаполнено(СтрокаДерева.ВариантыКода) Тогда 
			Для каждого Строка Из СтрокаДерева.ВариантыКода Цикл
				лНовыйКод = ИсполняемыйКод.Добавить();
				лНовыйКод.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				лНовыйКод.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
				лНовыйКод.Имя                  = Строка.ИмяВарианта;
				лНовыйКод.Текст                = Строка.ТекстКода;
			КонецЦикла; 
		КонецЕсли;
	Иначе
		
		лОбновлятьИДСтрокДанныхЗапроса = Параметры.Свойство("ОбновлятьИДСтрокДанныхЗапроса") И Параметры.ОбновлятьИДСтрокДанныхЗапроса;
		
		лПараметрыЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", СтрокаДерева.Идентификатор));
		Для каждого лПараметрЗапроса Из лПараметрыЗапроса Цикл
			лНовыйПараметр = ПараметрыЗапросов.Добавить();
			ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
			лНовыйПараметр.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
			Если лОбновлятьИДСтрокДанныхЗапроса Тогда 
				лНовыйПараметр.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла; 
		
		лИсполняемыйКодМассив = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", СтрокаДерева.Идентификатор));
		Для каждого лИсполняемыйКод Из лИсполняемыйКодМассив Цикл
			лНовыйКод = ИсполняемыйКод.Добавить();
			ЗаполнитьЗначенияСвойств(лНовыйКод, лИсполняемыйКод);
			лНовыйКод.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
			Если лОбновлятьИДСтрокДанныхЗапроса Тогда 
				лНовыйПараметр.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;

	СкопироватьДеревоЗапросовРекурсивно(СтрокаДерева, НоваяСтрока, Параметры);

КонецПроцедуры // СкопироватьСтрокуЗапроса()
 
// Копирует дерево
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура СкопироватьДеревоЗапросовРекурсивно(ИсходноеДерево, НовоеДерево, ПараметрыРелиза = Неопределено)

	Если Не ПараметрыРелиза.Свойство("НеОпределятьПараметрыРекурсии") Тогда 
		
		ПараметрыРелиза.Вставить("НеОпределятьПараметрыРекурсии", Ложь);
		ПараметрыРелиза.Вставить("ЕстьПараметрыЗапроса"         , ИсходноеДерево.Колонки.Найти("ПараметрыЗапроса") <> Неопределено);
		ПараметрыРелиза.Вставить("ЕстьВариантыКода"             , ИсходноеДерево.Колонки.Найти("ВариантыКода") <> Неопределено);
		
		НазваниеСпециальнойСтроки = ДополнительныеПараметры.Найти("СлужебнаяСтрокаДереваЗапросов", "Параметр");
		
		Если НазваниеСпециальнойСтроки <> Неопределено тогда
			Специальнаястрока = ИсходноеДерево.Строки.Найти(НазваниеСпециальнойСтроки.Значение, "");
			Если СпециальнаяСтрока <> Неопределено тогда
				ЭтаФорма.Шаблоны = СпециальнаяСтрока.ПараметрыЗапроса.Скопировать();
				ИсходноеДерево.Строки.Удалить(СпециальнаяСтрока);
				кзСохранитьШаблоны(ЭтаФорма);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из ИсходноеДерево.Строки Цикл
		СкопироватьСтрокуЗапроса(СтрокаДерева, НовоеДерево.Строки.Добавить(), ПараметрыРелиза);
	КонецЦикла;

КонецПроцедуры // СкопироватьДеревоЗапросовРекурсивно()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура СоздатьНовыйФайлЗапросов()

	мИмяФайла = "";	мИмяПути  = "";
	ОбновитьЗаголовок();
	
	СохранитьИмяФайла();

	ОчиститьДанныеПоЗапросам();

	мПрограммноеДобавлениеСтрокиЗапроса = Истина;	
	мТекущаяСтрока               = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Имя           = "Запросы";
	мТекущаяСтрока.Идентификатор = Новый УникальныйИдентификатор;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

&НаКлиенте
Функция ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) 
	Попытка
		Результат = ЧтениеJSON.Прочитать();
		Возврат Результат;		
	Исключение
		ТекстОшибки = ОписаниеОшибки();	
		Возврат Ложь;		
	КонецПопытки; 
КонецФункции // ПрочитатьJSONСОбработкойОшибки()

// ДУБЛЬ В УПРАВЛЯЕМОЙ ФОРМЕ 
&НаКлиенте
Функция ПолучитьТипыJSONБЕзЗначений() Экспорт
	
	//Null (Null)
	//Булево (Boolean)
	//ИмяСвойства (PropertyName)
	//Комментарий (Comment)
	//КонецМассива (ArrayEnd)
	//КонецОбъекта (ОbjectEnd)
	//НачалоМассива (ArrayStart)
	//НачалоОбъекта (ObjectStart)
	//Ничего (None)
	//Строка (String)
	//Число (Number)
	
	лМассивТиповJSONБезЗначений = Новый Массив;
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоОбъекта);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецОбъекта);
	
	Возврат лМассивТиповJSONБезЗначений;
КонецФункции // ПолучитьТипыJSONБЕзЗначений()

&НаКлиенте
//#дубль функции из управляемой формы
Функция ПрочитатьФайлСЗапросомJSON(ИмяФайла, ТекстОшибки)
	
	Перем лВерсияФайла, лДата, лНоваяСтрока;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);

		лТипыСНачальнымБлоком = Новый Массив;
		лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоМассива);
		лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоОбъекта);
		
		ОчиститьДанныеПоЗапросам();
		
		лСтэкБлоков = Новый Массив;
		
		лМассивТиповJSONБезЗначений = ПолучитьТипыJSONБЕзЗначений();

		Пока ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) Цикл
			
			ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
			
			лЭлементСтэка = Новый Структура("ТекущаяПозиция,ТекущаяСтрока", ЧтениеJSON.ТекущаяПозиция, ЧтениеJSON.ТекущаяСтрока);
			
			Если лМассивТиповJSONБезЗначений.Найти(ЧтениеJSON.ТипТекущегоЗначения) = Неопределено Тогда 
				лЭлементСтэка.Вставить("ТекущееЗначение"    , ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
			лЭлементСтэка.Вставить("ТипТекущегоЗначения", ТипJSON);
			
			лСтэкБлоков.Вставить(0, лЭлементСтэка);
			Если лСтэкБлоков.Количество() = 2 Тогда 
				Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
					лОчищатьСтэк = Истина;
					Если лСтэкБлоков[1].ТекущееЗначение = "Версия" Тогда 
						лВерсияФайла = лСтэкБлоков[0].ТекущееЗначение;
					ИначеЕсли лСтэкБлоков[1].ТекущееЗначение = "Дата" Тогда 
						лДата = СериализаторXDTO.XMLЗначение(Тип("Дата"), лСтэкБлоков[0].ТекущееЗначение);
					Иначе
						лОчищатьСтэк = Ложь;
					КонецЕсли;
					Если лОчищатьСтэк Тогда 
						лСтэкБлоков.Удалить(0); // удаляем текущее значение
						лСтэкБлоков.Удалить(0); // удаляем имя свойства
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли лСтэкБлоков.Количество() = 3 Тогда 
				Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
					Если лСтэкБлоков[2].ТекущееЗначение = "Параметры" Тогда 
						лНоваяСтрока = ПараметрыЗапросов.Добавить();//#добавлениепараметразапроса 3
					ИначеЕсли лСтэкБлоков[2].ТекущееЗначение = "ИсполняемыйКод" Тогда 
						лНоваяСтрока = ИсполняемыйКод.Добавить();			
					КонецЕсли;
				ИначеЕсли лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
					лСтэкБлоков.Удалить(0); // удаляем конец тэга
					лСтэкБлоков.Удалить(0); // удаляем начало тэга
					лСтэкБлоков.Удалить(0); // удаляем начало тэга табличного блока (в каждом блоке только один массив!)
				КонецЕсли;
			ИначеЕсли лСтэкБлоков.Количество() = 4 Тогда 
				Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда 
					лСтэкБлоков.Удалить(0); // удаляем конец тэга
					лСтэкБлоков.Удалить(0); // удаляем начало тэга
				КонецЕсли;
			ИначеЕсли лСтэкБлоков.Количество() = 5 Тогда 
				Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
					Если лСтэкБлоков[1].ТекущееЗначение = "ИдентификаторРодителя" Тогда 
						Если ЗначениеЗаполнено(лСтэкБлоков[0].ТекущееЗначение) Тогда 
							лНоваяСтрока = ДеревоЗапросов.Строки.НайтиСтроки(Новый Структура("Идентификатор", лСтэкБлоков[0].ТекущееЗначение), Истина)[0].Строки.Добавить();			
						Иначе
							мПрограммноеДобавлениеСтрокиЗапроса = Истина; //#рефакторинг проверить необходимость данной переменной
							лНоваяСтрока = ДеревоЗапросов.Строки.Добавить();			
						КонецЕсли;
					Иначе
						лНоваяСтрока[лСтэкБлоков[1].ТекущееЗначение] = лСтэкБлоков[0].ТекущееЗначение;
					КонецЕсли;
					
					лСтэкБлоков.Удалить(0); // удаляем текущее значение
					лСтэкБлоков.Удалить(0); // удаляем имя свойства
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	Исключение
		ТекстОшибки = "Ошибка формата файла: " + ОписаниеОшибки();	
		Возврат -1
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат 0
	Иначе
		Возврат 1
	КонецЕсли;
	
КонецФункции // ПрочитатьФайлСЗапросомJSON()

// Загружает дерево запросов Из файла
//
// Параметры:
//  Нет.
//
Функция ЗагрузитьЗапросыИзФайлаСтараяВерсия() Экспорт

	Ошибка = Ложь;
	
	ОчиститьДанныеПоЗапросам();
	
	ФайлЗначения = Новый Файл(мИмяФайла);
	Если ФайлЗначения.Существует() Тогда 
		Попытка
			ДанныеИзФайла = ЗначениеИзФайла(мИмяФайла);
		Исключение
			Ошибка = Истина;
			Сообщить("Ошибка загрузки запросов из файла: " + ОписаниеОшибки());	
		КонецПопытки; 
	Иначе
		Ошибка = Истина;
		Сообщить("Не найден файл: " + мИмяФайла);	
	КонецЕсли;
	
	Если Не Ошибка Тогда 
		Попытка
			СкопироватьДеревоЗапросовРекурсивно(ДанныеИзФайла, ДеревоЗапросов, Новый Структура("ОбновлятьИД, ЭтоСтарыйРелиз", Истина, Истина));
		Исключение
			Сообщить("Ошибка загрузки файла """ + мИмяФайла + """ (" + ОписаниеОшибки() + ")", СтатусСообщения.Важное);	
		КонецПопытки; 
	КонецЕсли;
	
	мИмяФайла = "";	мИмяПути  = "";
	ОбновитьЗаголовок();

	Модифицированность = Ложь;
	
	Возврат Не Ошибка
	
КонецФункции // ЗагрузитьЗапросыИзФайлаСтараяВерсия()


///////////////////////////////////////////////////////////////////////////////
//+++ ЗАПИСЬфАЙЛАСЗАПРОСОМ

&НаКлиенте
Процедура ЗаписатьШапкуФайлаСЗапросом(ЗаписьJSON)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Версия");
	ЗаписьJSON.ЗаписатьЗначение(гНазваниеОбработки());
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Дата");
	ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(ТекущаяДата()));
	
КонецПроцедуры // ЗаписатьШапкуФайлаСЗапросом()

&НаКлиенте
Функция ВыгрузитьЗапросыРекурсивно(ЗаписьJSON, Знач Родитель, ВходВРекурсию = Истина)
	
	Если ВходВРекурсию  Тогда 
		ЗаписьJSON.ЗаписатьИмяСвойства("Запросы");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Если Родитель = Неопределено Тогда 
			Родитель = ДеревоЗапросов;
		КонецЕсли;
		
	КонецЕсли;
	
	лСтрокиДерева = Родитель.Строки;
	
	лРезультат = Новый Массив;
	Для Каждого лСтрокаДерева Из лСтрокиДерева Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("ИдентификаторРодителя");
		Если лСтрокаДерева.Родитель = Неопределено Тогда 
			ЗаписьJSON.ЗаписатьЗначение("");
		Иначе
			ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(лСтрокаДерева.Родитель.Идентификатор));
		КонецЕсли;
		ЗаписьJSON.ЗаписатьИмяСвойства("Имя");
		ЗаписьJSON.ЗаписатьЗначение(лСтрокаДерева.Имя);
		ЗаписьJSON.ЗаписатьИмяСвойства("Идентификатор");
		Если Не ЗначениеЗаполнено(лСтрокаДерева.Идентификатор) Тогда 
			лСтрокаДерева.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ЗаписьJSON.ЗаписатьЗначение(лСтрокаДерева.Идентификатор);
		ЗаписьJSON.ЗаписатьИмяСвойства("ТекстЗапроса");
		ЗаписьJSON.ЗаписатьЗначение(лСтрокаДерева.ТекстЗапроса);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		лРезультат.Добавить(лСтрокаДерева.Идентификатор);
		
		лМассивИД = ВыгрузитьЗапросыРекурсивно(ЗаписьJSON, лСтрокаДерева, Ложь);		
		Для каждого ИдентификаторЗапроса Из лМассивИД Цикл
			лРезультат.Добавить(ИдентификаторЗапроса);
		КонецЦикла; 
	КонецЦикла;
	
	Если ВходВРекурсию Тогда 
		ЗаписьJSON.ЗаписатьКонецМассива();
	КонецЕсли;
	
	Возврат лРезультат
	
КонецФункции // ВыгрузитьЗапросыРекурсивно()

&НаКлиенте
Процедура ЗаписатьПараметрыЗапросовВJSON(ЗаписьJSON, ПараметрыТекущегоЗапроса)
	Для каждого ПараметрЗапроса Из ПараметрыТекущегоЗапроса Цикл			
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Для каждого КолонкаТаблицы Из ПараметрыЗапросов.Колонки Цикл
			ИмяСвойства = КолонкаТаблицы.Имя;
			ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
			Если НРег(ИмяСвойства) = "значение" Тогда 
				ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(ПараметрЗапроса.Значение));
			Иначе
				ЗаписьJSON.ЗаписатьЗначение(ПараметрЗапроса[ИмяСвойства]);
			КонецЕсли;
		КонецЦикла; 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла; 
КонецПроцедуры // ЗаписатьПараметрыЗапросовВJSON()

&НаКлиенте
Процедура ВыгрузитьПараметрыЗапросов(ЗаписьJSON, МассивИдентификаторовЗапросов)

	ЗаписьJSON.ЗаписатьИмяСвойства("Параметры");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	// добавляем локальные параметры
	Для Каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
		ЗаписатьПараметрыЗапросовВJSON(ЗаписьJSON, лПараметрыТекущегоЗапроса);
	КонецЦикла; 
	
	// добавляем глобальные параметры
	ЗаписатьПараметрыЗапросовВJSON(ЗаписьJSON, ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", "")));
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры //ВыгрузитьПараметрыЗапросов()

&НаКлиенте
Процедура ВыгрузитьИсполняемыйКод(ЗаписьJSON, МассивИдентификаторовЗапросов)

	ЗаписьJSON.ЗаписатьИмяСвойства("ИсполняемыйКод");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лКодТекущегоЗапроса = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
		Для каждого СтрокаСКодом Из лКодТекущегоЗапроса Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			Для каждого КолонкаТаблицы Из ИсполняемыйКод.Колонки Цикл
				ИмяСвойства = КолонкаТаблицы.Имя;
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
				ЗаписьJSON.ЗаписатьЗначение(СтрокаСКодом[ИмяСвойства]);
			КонецЦикла; 
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();		
		КонецЦикла; 
	КонецЦикла; 
	
	ЗаписьJSON.ЗаписатьКонецМассива();

КонецПроцедуры // ВыгрузитьИсполняемыйКод()

//--- ЗАПИСЬфАЙЛАСЗАПРОСОМ
///////////////////////////////////////////////////////////////////////////////

Функция СохранитьФайлСЗапросом(ИмяФайла, Корень = Неопределено)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла);
	
	ЗаписатьШапкуФайлаСЗапросом(ЗаписьJSON);
	лМассивИдентификаторовЗапросов = ВыгрузитьЗапросыРекурсивно(ЗаписьJSON, Корень);
	ВыгрузитьПараметрыЗапросов(ЗаписьJSON, лМассивИдентификаторовЗапросов);
	ВыгрузитьИсполняемыйКод(ЗаписьJSON, лМассивИдентификаторовЗапросов);

	лОшибка = Ложь;
	Попытка
		ЗаписьJSON.Закрыть(); 		
	Исключение
		ТекстОшибки = "Ошибка записи файла """ + ИмяФайла + """: " + ОписаниеОшибки();
		лОшибка = Истина
	КонецПопытки; 
	
	Если Не лОшибка Тогда 
		Модифицированность = Ложь;
	Иначе
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		лОшибка = Истина;
	КонецЕсли;
	
	Возврат Не лОшибка;
		
КонецФункции // СохранитьФайлСЗапросом()

Функция ПроверитьМодифицированность()
	
	лРезультат = Истина;
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru = 'Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена); // !!!!!???? переделать в константы
		Если Ответ = КодВозвратаДиалога.Да Тогда
			лРезультат = СохранитьЗапросы(мИмяФайла);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			лРезультат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция СохранитьЗапросы(ИмяФайла)

	Если Модифицированность Тогда 
		СохранитьЗапросТекущейСтроки();
	КонецЕсли;

	Если ПустаяСтрока(ИмяФайла) Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

		Длг.ПолноеИмяФайла = ИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			ИмяФайла = Длг.ПолноеИмяФайла; мИмяПути  = Длг.Каталог;
			ОбновитьЗаголовок();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СохранитьФайлСЗапросом(ИмяФайла) Тогда 
		Модифицированность = Ложь;
		СохранитьИмяФайла();
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;

КонецФункции // СохранитьЗапросы()

Функция КонвертироватьВнешнююТаблицу(ВнешняяТаблица)
	
	Результат = новый ТаблицаЗначений;
	
	Для каждого КолонкаТаблицы Из ВнешняяТаблица.Колонки Цикл
		Результат.Колонки.Добавить(КолонкаТаблицы.Имя) ;
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ВнешняяТаблица Цикл
		НоваяСтрока = Результат.Добавить();
		Для каждого КолонкаТаблицы Из ВнешняяТаблица.Колонки Цикл
			НоваяСтрока[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Результат
	
КонецФункции

// Загружает результат запроса в таблицу или сводную таблицу
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьРезультат(ЭлементТаблицаРезультата = Неопределено)
	
	Если мРезЗапроса <> Неопределено Тогда
		
		Если ЭлементТаблицаРезультата = Неопределено Тогда
			ЭлементТаблицаРезультата = Вычислить("ЭлементыФормы." + мИмяРеквизитаТаблицы);
		Конецесли;
		
		Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "СводнаяТаблица" Тогда
			Если мСводнаяТаблицаЗагружена = Ложь Тогда
				Попытка
					ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мРезЗапроса;
				Исключение
				КонецПопытки;
				мСводнаяТаблицаЗагружена = Истина;
			КонецЕсли;
		Иначе
			Если мТаблицаЗагружена = Ложь Тогда
				ЭлементТаблицаРезультата.Колонки.Очистить();
				Если СпособВыгрузки = 2 И ТипЗнч(мРезЗапроса) <> Тип("ComОбъект") Тогда // Дерево
					Если ФлажокИтогиВсе Тогда
						РезультатДерево = кзЗаполнитьДеревоСПризнакомВСЕ(ЭтаФорма, мРезЗапроса);
					Иначе
						РезультатДерево = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					КонецЕсли;
					ЭлементТаблицаРезультата.Данные = "РезультатДерево";
					ЭлементТаблицаРезультата.СоздатьКолонки();
				Иначе // Список
					Если ТипЗнч(мРезЗапроса) = Тип("ComОбъект") Тогда
						ТекРезультатЗапроса = мРезЗапроса.Выгрузить();
						
						ТекРезультатТаблица = новый ТаблицаЗначений;
						Для каждого КолонкаТаблицы Из ТекРезультатЗапроса.Колонки Цикл
							ТекРезультатТаблица.Колонки.Добавить(КолонкаТаблицы.Имя) ;
						КонецЦикла; 
						Для каждого СтрокаТаблицы Из ТекРезультатЗапроса Цикл
							НоваяСтрока = ТекРезультатТаблица.Добавить();							
							Для каждого КолонкаТаблицы Из ТекРезультатТаблица.Колонки Цикл
								НоваяСтрока[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
							КонецЦикла; 
						КонецЦикла; 
						//ТаблицаРезультата = КонвертироватьВнешнююТаблицу(мРезЗапроса.Выгрузить());
						ЭлементТаблицаРезультата.Значение = ТекРезультатТаблица.Скопировать();
						ЭлементТаблицаРезультата.СоздатьКолонки();
					Иначе
						Если ТипЗнч(мРезЗапроса) = Тип("Массив") Тогда //пакет запросов
							лРезультатЗапроса = Новый ТаблицаЗначений;
							лРезультатЗапроса.Колонки.Добавить("РезультатЗапроса");
							Для каждого текРезультат Из мРезЗапроса Цикл
								НоваяСтрока = лРезультатЗапроса.Добавить();
								НоваяСтрока.РезультатЗапроса = текРезультат.Выгрузить();
							КонецЦикла; 
						Иначе
							лРезультатЗапроса = мРезЗапроса.Выгрузить();
						КонецЕсли;
						
						Выполнить(мИмяРеквизитаТаблицы + " = лРезультатЗапроса");
						
						ЭлементТаблицаРезультата.Данные = мИмяРеквизитаТаблицы;
						ЭлементТаблицаРезультата.СоздатьКолонки();
					Конецесли;
				КонецЕсли;
				мТаблицаЗагружена = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры // ЗагрузитьРезультат()

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура ОбработкаАвтосохранения()

	Если ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("Сохранить", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("Сохранить");
	КонецЕсли;

КонецПроцедуры // ОбработкаАвтосохранения()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()

	Если ПроверитьМодифицированность() Тогда
		СоздатьНовыйФайлЗапросов();
	КонецЕсли;

КонецПроцедуры // НовыйФайл()

// Обработчик нажатия кнопки командной панели "Открыть файл запросов"
//
Процедура ОткрытьФайл()

	Если ПроверитьМодифицированность() Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог        = мИмяПути;
		Длг.Заголовок      = "Выберите файл со списком запросов";
		Длг.Фильтр         = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение     = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла; мИмяПути  = Длг.Каталог;
			ОбновитьЗаголовок();
			
			Если ЗагрузитьЗапросы() Тогда 
				СохранитьИмяФайла();
			КонецЕсли;
			
			ОбновитьЗаголовок();
			
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры // ОткрытьФайл()

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()
	СохранитьЗапросы(мИмяФайла);
КонецПроцедуры // Сохранить()

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()
	СохранитьЗапросы("");
КонецПроцедуры // СохранитьКак()

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура НастройкаАвтосохранения()

	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройкиАвтосохранения");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();

	ОбработкаАвтосохранения();

КонецПроцедуры // НастройкаАвтосохранения()

// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура ПеренестиСтрокуДерева()

	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;

	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	РежимВыбораВеткиДерева = "ПеренестиВДругуюВетку";
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();

КонецПроцедуры // ПеренестиСтрокуДерева()

Функция кзСвязьСВнешнейБазой(СтруктураПараметров) Экспорт
	
	Результат = Истина;
	
	Установить       = СтруктураПараметров.Установить;
	Версия		 	 = СтруктураПараметров.Версия;
	КаталогБазы		 = СтруктураПараметров.КаталогБазы;
	SQL_Сервер		 = СтруктураПараметров.SQL_Сервер;
	SQL_БазаДанных	 = СтруктураПараметров.SQL_БазаДанных;
	ТипБазы			 = СтруктураПараметров.ТипБазы;
	ИмяПользователя	 = СтруктураПараметров.ИмяПользователя;
	Пароль			 = СтруктураПараметров.Пароль;
	ВыводитьСообщение= СтруктураПараметров.ВыводитьСообщение;
	
	
	Если Установить Тогда					
		
		Если Лев(Версия, 3) = "8.3" Тогда 
			V8COMConnector = Новый COMОбъект("V83.COMConnector");
		ИначеЕсли Лев(Версия, 3) = "8.2" Тогда 
			V8COMConnector = Новый COMОбъект("V82.COMConnector");
		ИначеЕсли Лев(Версия, 3) = "8.1" Тогда 
			V8COMConnector = Новый COMОбъект("V81.COMConnector");
		Иначе
			V8COMConnector = Новый COMОбъект("V8.COMConnector");
		КонецЕсли;
		
		Если ТипБазы = Истина Тогда
			//файловый вариант
			СтрокаСоединения = "File = """ + СокрЛП(КаталогБазы) + """";	
		Иначе
			//серверный вариант
			СтрокаСоединения = "Srvr = " + СокрЛП(SQL_Сервер) + ";Ref = """ + СокрЛП(SQL_БазаДанных) + """";
		КонецЕсли;
		
		Состояние("Соединение с базой: " + СтрокаСоединения);
		
		//добавим имя пользователя и пароль
		СтрокаСоединения = СтрокаСоединения + "; Usr = """ + ИмяПользователя + """; Pwd = """ + Пароль + """;";
		
		Попытка
			Результат = V8COMConnector.Connect(СтрокаСоединения); 
		Исключение
			Если ВыводитьСообщение Тогда
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецЕсли;
			Результат = Неопределено;		
		КонецПопытки;
	Иначе
		Результат = Неопределено;		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Процедура КоманднаяПанельФормыВыполнитьЗапрос(Кнопка)
	
	ВыполнитьЗапросИзФормы();
	кзУстановитьШиринуКолонок(ЭлементыФормы, мСтруктураСРазмерами);

	ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[0]; //позиционируемся на первую страницу
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыполнитьЗапросПоСпискуИБ(Кнопка)
	ТекПараметрыИБ = мФормаПараметрыИБ.ТаблицаПараметров;
	Если ТекПараметрыИБ.Количество() = 0 Тогда
		Предупреждение("Не указаны параметры ИБ", 10);
		Возврат;
	Конецесли;
	
	Если Вопрос("Выполнить запросы по списку информационных баз?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	гФормаПрогрессора.Открыть();
	гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = ТекПараметрыИБ.Количество();
	гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование внешних запросов:";
	гФормаПрогрессора.ЗначениеИндикатора = 0;
	
	//Очищаем панель вывода отчета
	УдалитьСтраницыСВнешниимРезультатами();
	
	Для каждого ТекПараметрИБ Из ТекПараметрыИБ Цикл
		
		ОбработкаПрерыванияПользователя();
			
		гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Формируется запрос по базе: " + ТекПараметрИБ.ИмяБазы;
		
		Если ТекПараметрИБ.Использовать Тогда
			СтруктураПараметров = Новый Структура("Установить, Версия, КаталогБазы, SQL_Сервер, SQL_БазаДанных, ТипБазы, ИмяПользователя, Пароль, ВыводитьСообщение", 
			Истина, ТекПараметрИБ.Версия,ТекПараметрИБ.КаталогБазы, ТекПараметрИБ.SQL_Сервер, ТекПараметрИБ.SQL_БазаДанных, ТекПараметрИБ.ФайловаяБаза, 
			ТекПараметрИБ.ИмяПользователя, ТекПараметрИБ.Пароль, Истина);
			V8COM = кзСвязьСВнешнейБазой(СтруктураПараметров);	
			Если V8COM <> Неопределено Тогда		
				//Добавляем закладку
				ТекИмяСтраницыРезультата = "СтраницаСРезультатом_" + ТекПараметрИБ.ИмяБазы;
				ТекИмяТаблицыРезультата = "ТаблицаСРезультатом_" + ТекПараметрИБ.ИмяБазы;
				ЭлементыФормы.ПанельРезультата.Страницы.Вставить(1,ТекИмяСтраницыРезультата, ТекПараметрИБ.ИмяБазы);
				ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[ТекИмяСтраницыРезультата];
				//Добавить(<Тип > , <Имя > , <Видимость > , <Поместить на > ) 
				Элемент = ЭлементыФормы.Добавить(Тип("Табличноеполе"), ТекИмяТаблицыРезультата,,ЭлементыФормы.ПанельРезультата); 
				Элемент.КонтекстноеМеню = ЭлементыФормы.СпецМеню;
				Элемент.Лево = 6; Элемент.Верх = 6;
				Элемент.Ширина = ЭлементыФормы.ПанельРезультата.Ширина - 12; Элемент.Высота = ЭлементыФормы.ПанельРезультата.Высота - 12;
				Элемент.ТолькоПросмотр = Ложь;
				Элемент.УстановитьДействие("Выбор", Новый Действие("ТаблицаРезультатаВыбор"));
				//УстановитьПривязку(<Граница > , <Первый элемент > , <Граница первого элемента > , <Второй элемент > , <Граница второго элемента > ) 
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ПанельРезультата,ГраницаЭлементаУправления.Верх);
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.НИз,ЭлементыФормы.ПанельРезультата,ГраницаЭлементаУправления.НИз);
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельРезультата,ГраницаЭлементаУправления.Лево);
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ПанельРезультата,ГраницаЭлементаУправления.Право);
				
				//Выполняем запросы во внешних базах
				Попытка
					ВыполнитьЗапросИзФормы(V8COM.NewObject("Запрос"), ЭлементыФормы[ТекИмяТаблицыРезультата]);
					кзУстановитьШиринуКолонок(ЭлементыФормы, мСтруктураСРазмерами);
				Исключение
					Сообщить("Ошибка при формировании запроса для базы: " + ТекПараметрИБ.ИмяБазы, СтатусСообщения.Важное);
					Сообщить(ОписаниеОшибки());
					Сообщить(" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
				КонецПопытки; 
				
				V8COM = Неопределено;
			Иначе	
				Сообщить("Ошибка при формировании запроса для базы: " + ТекПараметрИБ.ИмяБазы, СтатусСообщения.Важное);
				Сообщить(" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
			КонецЕсли;
			
			гФормаПрогрессора.ЗначениеИндикатора = гФормаПрогрессора.ЗначениеИндикатора + 1;
			
		КонецЕсли;
	КонецЦикла; 
	
	гФормаПрогрессора.Закрыть()
КонецПроцедуры

Процедура КоманднаяПанельФормыВыполнитьПакет(Кнопка)
	Если СпособВыгрузки <> 1 Тогда 
		Предупреждение("Функция доступна только в режиме способа выгрузки ""Список"".", 10);
		ТекущийЭлемент = ЭлементыФормы.СпособВыгрузки;
	Иначе
		ВыполнитьЗапросИзФормы(,,Истина);
		кзУстановитьШиринуКолонок(ЭлементыФормы, мСтруктураСРазмерами);
		ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[0]; //позиционируемся на первую страницу
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыОткрытьФормуСпискаМетаданногоИзЗапроса(Кнопка)
	
	//Временный алгоритм. Необходимо сделать универсальный для других объектов метаданных!!!!

	СписокОбъектовМетаданных = гСписокОбъектовМетаданныхИзТекста(Элементыформы.ТекстЗапроса.ПолучитьТекст());
	
	ВыбЗначениеМетаданного = СписокОбъектовМетаданных.ВыбратьЭлемент("Выберите объект для открытия формы списка.");
	Если ВыбЗначениеМетаданного <> Неопределено Тогда 
		ВыбЗначениеМетаданного.Значение.ПолучитьФормуСписка().Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Параметры"
//
Процедура Параметры() Экспорт

	Если мФормаПараметров.Открыта() Тогда
		мФормаПараметров.Активизировать();
	Иначе
		мФормаПараметров.Открыть();
	КонецЕсли;

КонецПроцедуры // Параметры()

// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
//
Процедура СохранитьРезультат()
	
	Перем ЗаголовокКолонки;
	
	Если мРезЗапроса <> Неопределено Тогда
		
		Если ТипЗнч(мРезЗапроса) = Тип("COMОбъект") Тогда 
			
			Предупреждение("Функция печати результата запроса доступна только для запроса по текущей базе.", 10);	
			
		Иначе
			
			Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

			Если Выборка.Количество() = 0 Тогда
				Предупреждение("Выборка пуста.", 10);
				Возврат;
			КонецЕсли;
			
			ТабДок = Новый ТабличныйДокумент;
			КоличествоКолонок = мРезЗапроса.Колонки.Количество();

	        ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
			ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
			ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
			ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
			ОбластьЗаголовка = ТабДок.ПолучитьОбласть(1, , 1, );
			
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ОбластьЗаголовка.Область(1, ТекущееПоле + 1);
				Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
	            Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
			КонецЦикла;
			ТабДок.Вывести(ОбластьЗаголовка);
			ОбластьЗаголовка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
			
			ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина, , ,);
			ОбластьЗаголовка.ЦветФона = Новый Цвет(255, 255, 0);
			ОбластьЗаголовка.ГраницаСнИзу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

			гФормаПрогрессора.Открыть();
			гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = Вычислить(мИмяРеквизитаТаблицы + ".Количество()");
			гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование печатной формы:";
			Инд = 1;
			гФормаПрогрессора.ЗначениеИндикатора = 1;
			
	        ТабДок.НачатьАвтогруппировкуСтрок();
			Пока Выборка.Следующий() Цикл
				
				Инд = Инд + 1;
					
				ОбработкаПрерыванияПользователя();
				
				гФормаПрогрессора.ЗначениеИндикатора = Инд;
				гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Выводится " + Инд + " - я строка";
							
				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
					ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
					ИсходнаяСтрока = ОбластьИерархическихЗаписей;
				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
					ИсходнаяСтрока = ОбластьОбщихИтогов;
				Иначе
					ИсходнаяСтрока = ДетальнаяСтрока;
				КонецЕсли;
					
				Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
					Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
					Область.Текст = Выборка[ТекущееПоле];
					Область.Расшифровка = Выборка[ТекущееПоле];
				КонецЦикла;
				ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
			КонецЦикла;
			ТабДок.ЗакончитьАвтогруппировкуСтрок();

			гФормаПрогрессора.Закрыть();
			
			ТабДок.ОтображатьСетку = True;
			ТабДок.Защита = Ложь;
			ТабДок.ТолькоПросмотр = Истина;
			ТабДок.Показать("Результат запроса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапросИзФормы();
	кзУстановитьШиринуКолонок(ЭлементыФормы, мСтруктураСРазмерами);

КонецПроцедуры // ДеревоЗапросовВыбор()

Процедура ДеревоЗапросовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	лТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если Копирование Тогда
		СохранитьЗапросТекущейСтроки();
		СкопироватьСтрокуЗапроса(мТекущаяСтрока, лТекущаяСтрока, Новый Структура("ОбновлятьИД, ОбновлятьИДСтрокДанныхЗапроса, ЭтоСтарыйРелиз, НеОпределятьПараметрыРекурсии", Истина, Истина, Ложь, Истина));
		мТекущаяСтрока = лТекущаяСтрока;
		мВыполняетсяКопированиеСтроки = Ложь;
	КонецЕсли;
	
	Если (НоваяСтрока ИЛИ Копирование) И мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
		мТекущаяСтрока.СпособВыгрузки = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоЗапросовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда 
		мОтменаРедактирования = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПривестиСпецЗначение(ИсходноеЗначение, ИдентификаторЗначенияВСтруктуреВременныхТаблиц)
	// корректируем специальные значения
	Если ТипЗнч(ИсходноеЗначение) = Тип("Граница") Тогда 
		Возврат ИсходноеЗначение.Значение;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("МоментВремени") Тогда 
		Возврат ИсходноеЗначение.Дата;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда 
		лТемпСписокЗначений = Новый СписокЗначений;
		лТемпСписокЗначений.ЗагрузитьЗначения(ИсходноеЗначение);
		Возврат лТемпСписокЗначений;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("ТаблицаЗначений") Тогда 
		Сообщить("#test" + ИдентификаторЗначенияВСтруктуреВременныхТаблиц);
		гСтруктураТЗДляВременныхТаблиц.Вставить(ИдентификаторЗначенияВСтруктуреВременныхТаблиц, ИсходноеЗначение.Скопировать());		
		Возврат "Таблица значений (Строк = " + ИсходноеЗначение.Количество() + "; Колонок = " + ИсходноеЗначение.Колонки.Количество() + ")"
	Иначе
		Возврат ИсходноеЗначение
	КонецЕсли;
КонецФункции // ПривестиСпецЗначение()

Процедура ДобавитьПараметрВСписокНаФорме(ПараметрыСписок, СтрокаИсходнойТаблицы)
	
	НоваяСтрока = ПараметрыСписок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы, "Тип, Имя, ИдентификаторСтроки");
	
	Если СтрокаИсходнойТаблицы.Тип = гТипыЗначенийПараметров().ТаблицаЗначений Тогда 
		лИсходноеЗначениеПараметра = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(гСтруктураТЗДляВременныхТаблиц.Свойство(гПреобразоватьВПравильноеНазвание(СтрокаИсходнойТаблицы.ИдентификаторСтроки))));
	Иначе		
		лИсходноеЗначениеПараметра = ЗначениеИзСтрокиВнутр(СтрокаИсходнойТаблицы.Значение);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Тип) Тогда 
			НоваяСтрока.Тип = ПолучитьТипПараметраПоЗначению(лИсходноеЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.Значение = ПривестиСпецЗначение(лИсходноеЗначениеПараметра, гПреобразоватьВПравильноеНазвание(НоваяСтрока.ИдентификаторСтроки));
	
КонецПроцедуры // ДобавитьПараметрВСписокНаФорме()
 
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	мВыполняетсяКопированиеСтроки = Истина;
КонецПроцедуры

// Обработчик активации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	Если мВыполняетсяКопированиеСтроки = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Если мСохранитьЗапросТекущейСтроки Тогда
		СохранитьЗапросТекущейСтроки();
	Иначе
		мСохранитьЗапросТекущейСтроки = Истина;
	КонецЕсли;
	
	мТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> Неопределено Тогда

		СпособВыгрузки       = мТекущаяСтрока.СпособВыгрузки;
		СтатусДереваЗапросов = мТекущаяСтрока.Имя;
		
		ЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);
		
		// заполняем параметры для текущей строки запроса
		мФормаПараметров.ПараметрыСписок.Очистить();
		Для каждого СтрокаИсходнойТаблицы Из ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", мТекущаяСтрока.Идентификатор)) Цикл
			ДобавитьПараметрВСписокНаФорме(мФормаПараметров.ПараметрыСписок, СтрокаИсходнойТаблицы);
		КонецЦикла;
		
		// заполняем глобальные параметры для текущей строки запроса
		Для каждого СтрокаИсходнойТаблицы Из ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", "")) Цикл
			ДобавитьПараметрВСписокНаФорме(мФормаПараметров.ПараметрыСписок, СтрокаИсходнойТаблицы);
		КонецЦикла;

		// заполняем исполняемый код для текущей строки запроса
		мФормаИсполняемыйКод.ИсполняемыйКодСписок.Очистить();
		Для каждого СтрокаИсходнойТаблицы Из ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", мТекущаяСтрока.Идентификатор)) Цикл
			НоваяСтрока       = мФормаИсполняемыйКод.ИсполняемыйКодСписок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы, "Имя, ИдентификаторСтроки, Текст");
		КонецЦикла;
		
	Иначе
		ЗадатьТекстЗапроса("");
		мФормаПараметров.ПараметрыСписок.Очистить();
		мФормаИсполняемыйКод.ИсполняемыйКодСписок.Очистить();
		мФормаПараметрыИБ.ТаблицаПараметров.Очистить();
	КонецЕсли;

КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)

	Если ДеревоЗапросов.Строки.Количество() = 1 И ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0] Тогда   
		Отказ = Истина;
		Предупреждение("Список запросов должен содержать хотябы одну строку.", 10);		
		Возврат;
	КонецЕсли;
	мТекущаяСтрока = Неопределено;
	
	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик Изменения способа выгрузки
//
Процедура СпособВыгрузкиПриИзменении(Элемент)

	Если СпособВыгрузки <> 2 Тогда
		ФлажокИтогиВсе	 = Ложь;
	КонецЕсли;

КонецПроцедуры // СпособВыгрузкиПриИзменении()

Процедура ФлажокИтогиВсеПриИзменении(Элемент)
	
	Если Элемент.Значение И СпособВыгрузки <> 2 Тогда
		СпособВыгрузки = 2		
	КонецЕсли;
КонецПроцедуры

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
    СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];

	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки;
		ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
	ИначеЕсли Не ЗначениеЗаполнено(СодержимоеЯчейки) Тогда 
		Предупреждение("[Пустое значение типа: " + ТипЗнч(СодержимоеЯчейки) + "]", 10);
	Иначе
		ОткрытьЗначение(СодержимоеЯчейки);
	КонецЕсли;

КонецПроцедуры // ТаблицаРезультатаВыбор()

Процедура СсылкаНаДокументПриИзменении(Элемент)
	
	ЭлементыФормы.ТабличнаяЧасть.СписокВыбора.Очистить();
	Если ЭлементыФормы.СсылкаНаДокумент.Значение <> Неопределено Тогда
		Если СсылкаНаДокумент.Метаданные().ТабличныеЧасти.Количество() Тогда
			Для Каждого ТЧ Из СсылкаНаДокумент.Метаданные().ТабличныеЧасти Цикл
				ЭлементыФормы.ТабличнаяЧасть.СписокВыбора.Добавить(ТЧ.Имя);
			КонецЦикла;
			ТабличнаяЧасть = ЭлементыФормы.ТабличнаяЧасть.СписокВыбора[0];
			ТабличнаяЧастьПриИзменении(Неопределено);
		Иначе
			Предупреждение("В документе вида """ + СсылкаНаДокумент.Метаданные().Синоним + """ нет табличных частей для выгрузки.");
			СсылкаНаДокумент = Неопределено;
		КонецЕсли;
	КонецЕсли;		
	
	ИнициализацияКнопкиВыгрузки();
	
КонецПроцедуры

Процедура СсылкаНаДокументОчистка(Элемент, СтандартнаяОбработка)
	
		ЭлементыФормы.СтрокТЧ.Значение = "";
		ТабличнаяЧасть = Неопределено;
		
КонецПроцедуры

Процедура ТабличнаяЧастьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
	     ЭлементыФормы.СтрокТЧ.Значение = "Строк ТЧ = " + СсылкаНаДокумент[ТабличнаяЧасть].Количество();
	КонецЕсли;
	
	ИнициализацияКнопкиВыгрузки();

КонецПроцедуры

Процедура ВыгрузитьВДокументНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Предупреждение("Выберите документ для заполнения.", 10);
		ТекущийЭлемент = ЭлементыФормы.СсылкаНаДокумент;
		Возврат;
		//лОбъект = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
		//ТабличнаяЧасть = "Товары";
	Иначе
		лОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	Если ОчищатьТЧПриВыгрузкеВДокумент Тогда
		лОбъект[ТабличнаяЧасть].Загрузить(лТаблицаРезультата);
	Иначе
		Для Каждого Стр Из лТаблицаРезультата Цикл
			СтрТЧ = лОбъект[ТабличнаяЧасть].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);		
		КонецЦикла;
	КонецЕсли;
	
	лОбъект.ПолучитьФорму().Открыть();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	//Инициализация обработки
	
	мИмяФайла = "";	мИмяПути  = "";

	мЗаголовокФормы = гНазваниеОбработки();

	мТекущаяСтрока                   = Неопределено;
	//#рефакторинг 
	//мИдетДобавление                  = Ложь; 
	мАктивизированаДобавляемаяЗапись = Ложь;

	мФормаПараметров = Обработка.ПолучитьФорму("ФормаПараметрыЗапроса", ЭтаФорма);
	мФормаПараметров.РазрешитьСостояниеПрикрепленное = Истина;
	мФормаПараметров.РазрешитьСостояниеПрячущееся    = Ложь;
	мФормаПараметров.РазрешитьСостояниеСвободное     = Истина;

	мФормаИсполняемыйКод = Обработка.ПолучитьФорму("ФормаИсполняемыйКод", ЭтаФорма);
	мФормаПараметрыИБ   = Обработка.ПолучитьФорму("ПараметрыИБ", ЭтаФорма);

	мТаблицаЗагружена        = Ложь;
	мСводнаяТаблицаЗагружена = Ложь;

	АгрегатнаяФункция = "Нет";

	гСоответствиеВременныеТаблицы = Новый Соответствие;

	гСеансовыеДанные = Новый Структура();	
	гСеансовыеДанные.Вставить("ИдентификаторСеанса", Новый УникальныйИдентификатор);
	гСеансовыеДанные.Вставить("КЭШ"                , Новый Структура);
	гСеансовыеДанные.Вставить("ПутьККартинкам"     , гИзвлечьКартинкиОбработкиНаСервере());
	
	// ФОРМИРОВАНИЕ МЕНЮ
	МассивМенюДляДобавления = Новый Массив;
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка", "Информация"   , ЭлементыФормы.КоманднаяПанельФормы     , ПолучитьКартинку("Информация")));
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка", "Дополнительно", ЭлементыФормы.КоманднаяПанельФормы     , Новый Картинка));
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка", "Сервис"       , ЭлементыФормы.КоманднаяПанельРезультата, ПолучитьКартинку("НастроитьСписок")));
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка", "Запросы"      , ЭлементыФормы.КоманднаяПанельРезультата, Новый Картинка));
	
	СформироватьМеню(МассивМенюДляДобавления);
	
	//лКнопка             = "Информация";
	//лДеревоМенюКнопки   = гПолучитьМеню(лКнопка);
	//лКореньМеню = гЗаполнитьМенюПоДереву(ЭлементыФормы.КоманднаяПанельФормы, лДеревоМенюКнопки, 0);
	//лКореньМеню.Картинка = Новый Картинка(ПолучитьМакет("Картинка_Информация"));
	//
	//лКнопка             = "Сервис";
	//лДеревоМенюКнопки   = гПолучитьМеню(лКнопка);
	//лКореньМеню = гЗаполнитьМенюПоДереву(ЭлементыФормы.КоманднаяПанельРезультата, лДеревоМенюКнопки, 0);
	//лКореньМеню.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	//
	//лКнопка             = "Запросы";
	//лДеревоМенюКнопки   = гПолучитьМеню(лКнопка);
	//лКореньМеню = гЗаполнитьМенюПоДереву(ЭлементыФормы.КоманднаяПанельРезультата, лДеревоМенюКнопки, 0);
	
КонецПроцедуры // ПередОткрытием

// Обработчик события при открытии формы
//
Процедура ПриОткрытии()

	гФормаПрогрессора = ПолучитьФорму("ФормаИндикатораЛокально");
	
	гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Заполнение начальных параметров ...";
	гФормаПрогрессора.Открыть();
	гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = 5;
	гФормаПрогрессора.ЗначениеИндикатора = 1;
	
	гПодменюВременныеТаблицыКнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюВременныеТаблицы.Кнопки;
	
	кзНастроитьИнтерфейс(ЭтаФорма);
	кзУстановитьДополнительныеПараметры();	
	
	гФормаПрогрессора.ЗначениеИндикатора = 2;
	
	ИнициализацияДанных();
	
	// Попытаемся загрузить последний открывавшийся файл запросов
	ВосстановитьИмяФайла();
	
	гФормаПрогрессора.ЗначениеИндикатора = 3;
	
	ЗагрузитьЗапросы();

	гФормаПрогрессора.ЗначениеИндикатора = 4;
	
	ИспользоватьАвтосохранение      = ВосстановитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение");
	ИнтервалАвтосохранения          = ВосстановитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения");
	ФлажокИтогиВсе                  = ВосстановитьЗначение("КонсольЗапросов_ФлажокИтогиВсе");
	ФлажокСохранитьПередВыполнением = ВосстановитьЗначение("КонсольЗапросов_ФлажокСохранитьПередВыполнением");

	ОбработкаАвтосохранения();
	
	гФормаПрогрессора.ЗначениеИндикатора = 5;
	
	// Открытие обработки из режима отладки "1С Предприятия"
	Если ЗапросДляОтладки <> Неопределено И ТипЗнч(ЗапросДляОтладки) = Тип("Запрос") Тогда 
		
		мТекущаяСтрока                      = ДеревоЗапросов.Строки.Добавить();
		мТекущаяСтрока.Имя                  = "" + ТекущаяДата();
		мТекущаяСтрока.ТекстЗапроса         = ЗапросДляОтладки.Текст;
		мТекущаяСтрока.Идентификатор        = Новый УникальныйИдентификатор;

		Для каждого ТекПараметр Из ЗапросДляОтладки.Параметры Цикл
			
			//#добавлениепараметразапроса 4
			СтрокаПараметров = ПараметрыЗапросов.Добавить();
			
			СтрокаПараметров.ИдентификаторЗапроса = мТекущаяСтрока.Идентификатор;
			СтрокаПараметров.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
			СтрокаПараметров.Имя                  = ТекПараметр.Ключ;
			СтрокаПараметров.Значение             = ЗначениеВСтрокуВнутр(ТекПараметр.Значение);
			
		КонецЦикла; 		
		
		//ЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);
		мСохранитьЗапросТекущейСтроки = Ложь;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = мТекущаяСтрока;
	КонецЕсли;

	КнопкаПодменю = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюВременныеТаблицы.Кнопки.УдалитьВременнуюТаблицу;
	КнопкаПодменю.Кнопки.Добавить("УничтожитьВсе", ТипКнопкиКоманднойПанели.Действие, "Уничтожить все таблицы", Новый Действие("ПриВыбореУничтожитьВременнуюТаблицу"));
	КнопкаПодменю.Кнопки.Добавить();
	
	гФормаПрогрессора.Закрыть();
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ПроверитьМодифицированность() Тогда
		СохранитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение"     , ИспользоватьАвтосохранение);
		СохранитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения"         , ИнтервалАвтосохранения);
		СохранитьЗначение("КонсольЗапросов_ФлажокИтогиВсе"                 , ФлажокИтогиВсе);
		СохранитьЗначение("КонсольЗапросов_ФлажокСохранитьПередВыполнением", ФлажокСохранитьПередВыполнением);
	Иначе
        СтандартнаяОбработка = Ложь;
		Отказ                = Истина;
	КонецЕсли;
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии()
	мФормаИсполняемыйКод = "";
	мФормаПараметров = "";
	мФормаПараметрыИБ = "";
	
	Если ЗначениеЗаполнено(мПутьККартинкам) Тогда 
		Попытка
			УдалитьФайлы(мПутьККартинкам);
		Исключение
		КонецПопытки; 
	КонецЕсли;
КонецПроцедуры

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если РежимВыбораВеткиДерева = "ПеренестиВДругуюВетку" Тогда
		НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрока);
		СкопироватьДеревоЗапросовРекурсивно(мТекущаяСтрока, НоваяСтрока, Новый Структура("ОбновлятьИД, ЭтоСтарыйРелиз", Истина, Истина));

		РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = Неопределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
		РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
		мТекущаяСтрока = Неопределено;

		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;

		Модифицированность = Истина;
	ИначеЕсли РежимВыбораВеткиДерева = "СравнитьЗапросы" Тогда
		
		ЗаписьФайла = Новый ЗаписьТекста;
		
		ПервыйФайл = ПолучитьИмяВременногоФайла("txt");
		ВторойФайл = ПолучитьИмяВременногоФайла("txt");
		
		ЗаписьФайла.Открыть(ПервыйФайл);
		ЗаписьФайла.ЗаписатьСтроку(мТекущаяСтрока.ТекстЗапроса);
		ЗаписьФайла.Закрыть();
		
		ЗаписьФайла.Открыть(ВторойФайл);
		ЗаписьФайла.ЗаписатьСтроку(ЗначениеВыбора.ТекстЗапроса);
		ЗаписьФайла.Закрыть();
		
		
		Сравнение = Новый СравнениеФайлов;
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
		Сравнение.ИгнорироватьПустоеПространство = Истина;
		
		Сравнение.ПервыйФайл = ПервыйФайл;
		Сравнение.ВторойФайл = ВторойФайл;
		
		Если Сравнение.Сравнить() Тогда
			Предупреждение("Различий нет", 10);
		Иначе
			Сравнение.ПоказатьРазличияМодально();
		КонецЕсли;
		
		УдалитьФайлы(ПервыйФайл);
		УдалитьФайлы(ВторойФайл);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "ВыгрузкаВДокумент" Тогда
		ИнициализацияКнопкиВыгрузки();
	Иначе	
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()

/////////////////////////////////////////
// НЕТИПОВЫЕ_ДОПОЛНЕНИЯ

Процедура кзСохранитьШаблоны(ГлавнаяФорма)
	СтрокаСШаблонами=ДополнительныеПараметры.Найти("Шаблоны","Параметр");
	Если СтрокаСШаблонами=Неопределено тогда
		//создаем эту строку, если не нашли
		СтрокаСШаблонами=ДополнительныеПараметры.Добавить();
		СтрокаСШаблонами.Параметр="Шаблоны";
	Конецесли;
	СтрокаСШаблонами.Значение = ГлавнаяФорма.Шаблоны.Скопировать();
	ГлавнаяФорма.ЭлементыФормы.ТабличноеПолеШаблонов.СоздатьКолонки();	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура МенюАгрегатныеФункции(Кнопка)
	Если ЭлементыФормы[мИмяРеквизитаТаблицы].Данные = мИмяРеквизитаТаблицы Тогда
		АгрегатнаяФункция = Кнопка.Текст;
		ЗаполнитьЗначениеАгрегатнойФункции();
	Иначе
		Предупреждение("Агрегатные функции работают только для способа выгрузки ""Список"".", 10);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьЗначениеАгрегатнойФункции();
	СтатусРезультатаТаблицыАгрФункции = "";
	
	лТаблицаРезультата = ЭлементыФормы[мИмяРеквизитаТаблицы];
	
	ТекКолонка = лТаблицаРезультата.ТекущаяКолонка;
	Если лТаблицаРезультата.Данные = мИмяРеквизитаТаблицы И АгрегатнаяФункция<> "Нет" И ТекКолонка<> Неопределено Тогда
		//Рассчитываем агрегатные функции	
		Если лТаблицаРезультата.ВыделенныеСтроки.Количество() > 0 Тогда
			Результат = Неопределено;
			КоличествоЧисел = 0;
			КоличествоНеЧисел = 0;
			Для каждого ТекЯчейка Из лТаблицаРезультата.ВыделенныеСтроки Цикл
				ТекЗначение = ТекЯчейка[ТекКолонка.Имя];
				Если ТипЗнч(ТекЗначение) = Тип("Число") Тогда
					КоличествоЧисел = КоличествоЧисел + 1;
					Если АгрегатнаяФункция = "Среднее" Тогда					
						Результат = ?(Результат = Неопределено, 0, Результат) + ТекЗначение;
					ИначеЕсли АгрегатнаяФункция = "Минимум" Тогда
						Если Результат = Неопределено ИЛИ Результат > ТекЗначение Тогда
							Результат = ТекЗначение;
						КонецЕсли;
					ИначеЕсли АгрегатнаяФункция = "Максимум" Тогда
						Если Результат = Неопределено ИЛИ Результат<ТекЗначение Тогда
							Результат = ТекЗначение;
						КонецЕсли;
					ИначеЕсли АгрегатнаяФункция = "Сумма" Тогда
						Результат = ?(Результат = Неопределено, 0, Результат) + ТекЗначение;
					КонецЕсли;
				Иначе
					КоличествоНеЧисел = КоличествоНеЧисел + 1;
				КонецЕсли;
			КонецЦикла; 
			Если АгрегатнаяФункция = "Среднее" И КоличествоЧисел <> 0 Тогда					
				Результат = Результат / КоличествоЧисел;
			ИначеЕсли АгрегатнаяФункция = "Количество значений" Тогда
				Результат = КоличествоЧисел + КоличествоНеЧисел;
			ИначеЕсли АгрегатнаяФункция = "Количество чисел" Тогда
				Результат = КоличествоЧисел;
			КонецЕсли;
			Если Результат <> Неопределено Тогда
				СтатусРезультатаТаблицыАгрФункции = АгрегатнаяФункция + " = " + Окр(Результат,4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьЗначениеАгрегатнойФункции()

Процедура кзНастроитьИнтерфейс(ГлавнаяФорма)
	кзВосстановитьШиринуКолонок(ГлавнаяФорма.ЭлементыФормы, мСтруктураСРазмерами);
КонецПроцедуры

Процедура кзУстановитьДополнительныеПараметры()
	ДополнительныеПараметры.Колонки.Добавить("Параметр");
	ДополнительныеПараметры.Колонки.Добавить("Значение");
	НоваяСтрока = ДополнительныеПараметры.Добавить();
	НоваяСтрока.Параметр = гПараметрыСпецСтрокиДереваЗапросов().Параметр;
	НоваяСтрока.Значение = гПараметрыСпецСтрокиДереваЗапросов().Значение;	
КонецПроцедуры

Процедура кзОчиститьЗначениеПоУмолчанию(СтруктураСРазмерами) Экспорт
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_СтруктураСШиринойКолонок", новый Структура);
КонецПроцедуры

Функция кзПолучитьСохраненноеЗначение(Режим) Экспорт
	Результат = Неопределено;
	Если Режим = "СписокТекстовКодов" Тогда
		Результат = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_СписокТекстовКодов");
	Конецесли;
	Возврат Результат
КонецФункции	

Процедура кзЗаписатьСохраненноеЗначение(Режим, Значение, знач ДопЗначение = Неопределено) Экспорт
	Если Режим = "СписокТекстовКодов" Тогда		
		Если ДопЗначение = Неопределено Тогда
			ДопЗначение = новый СписокЗначений;
		КонецЕсли;
		Если ДопЗначение.Количество() > 10 Тогда
			ДопЗначение.Удалить(0);
		КонецЕсли;
		Если не гЗначениеНеЗаполнено(СокрЛп(Значение)) Тогда
			ДопЗначение.Добавить(Значение);
		КонецЕсли;
		СохранитьЗначение("КонсольЗапросов_ОтЛавелина_СписокТекстовКодов", ДопЗначение);
	Конецесли;
КонецПроцедуры

//ДЕЙСТВИЯ НАД РЕЗУЛЬТАТОМ ЗАПРОСА

Процедура кзДокПроведение(Кнопка, ЭлементыФормы, Форма) Экспорт
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	Если лТаблицаРезультата.Количество() = 0 Тогда
		Предупреждение("Таблица результатов запроса пуста.", 10);
		Возврат
	КонецЕсли;
	
	Ответ = Вопрос("Выполнить в транзакции?", РежимДиалогаВопрос.ДаНетОтмена); 
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Если Вопрос("В этом режиме все Изменения будут применяться сразу. " + Символы.ПС + 
			"При прерывании обработки сделаные Изменения не отменятся. " + Символы.ПС + 
			"Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Конецесли;
	Конецесли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьТранзакцию();
	Конецесли;
	
	
	Если Кнопка.Имя = "Провести" Тогда
		
		//Проводим текущий документ
		ТекДанные = ЭлементыФормы[мИмяРеквизитаТаблицы].ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Предупреждение("Выберите документ для проведения", 10);
			Возврат;
		КонецЕсли;

		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Сообщить("Проведение документа (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекДанные[Рез])) Тогда
			Ошибки = Ошибки + 1;
			Сообщить("Ошибка в строке " + ТекДанные[Рез] + "]: " + " значение не является документом");			
		Иначе
			Попытка
				ТекДок = ТекДанные[Рез].ПолучитьОбъект();
				ТекДок.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить(Строка(ТекДок) + " проведен");
			Исключение
				СтандартнаяОшибка = ОписаниеОшибки();
				Сообщить("Ошибка в строке " + ТекДанные[Рез] + "]" + Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
			КонецПопытки;
		КонецЕсли;
		
		Сообщить("Проведение документа (колонка """ + Рез + """) завершено в " + ТекущаяДата());
		
	Иначе
		
		//Проводим все документы		
		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		Сообщить("Проведение документов (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Ошибки = 0;
		
		Форма.гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Заполнение начальных параметров ...";
		Форма.гФормаПрогрессора.Открыть();
		Форма.гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = лТаблицаРезультата.Количество();
		Форма.гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Проводится документ:";
		Инд = 1;
		Форма.гФормаПрогрессора.ЗначениеИндикатора = 1;

		Для каждого СтрокаРезультатовЗапроса Из лТаблицаРезультата Цикл		
			
			Инд = Инд + 1;
			
			ОбработкаПрерыванияПользователя();
			
			Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаРезультатовЗапроса[Рез])) Тогда
				Ошибки = Ошибки + 1;
				Сообщить("Ошибка в строке " + СтрокаРезультатовЗапроса[Рез] + "]: " + " значение не является документом");			
			Иначе
				Попытка
					ТекДок = СтрокаРезультатовЗапроса[Рез].ПолучитьОбъект();
					
					Форма.гФормаПрогрессора.ЗначениеИндикатора = Инд;
					Форма.гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = ТекДок;
					
					ТекДок.Записать(РежимЗаписиДокумента.Проведение);
					Сообщить(Строка(ТекДок) + " проведен");
				Исключение
					СтандартнаяОшибка = ОписаниеОшибки();
					Сообщить("Ошибка в строке " + СтрокаРезультатовЗапроса[Рез] + "]" + Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
					Ошибки = Ошибки + 1;
				КонецПопытки;
			КонецЕсли;
			
			Если Ошибки > 100 Тогда
				Сообщить("Много ошибок. Возможно неправильно указана колонка. Обработка прервана");
				Форма.гФормаПрогрессора.Закрыть();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Сообщить("Проведение документов (колонка """ + Рез + """) завершено в " + ТекущаяДата());
		
		Форма.гФормаПрогрессора.Закрыть();
		
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьТранзакцию();
	Конецесли;
	
КонецПроцедуры // кзДокПроведение()

Процедура кзСнятиеПометкиУдаления(Кнопка, ЭлементыФормы, Форма) Экспорт
	
	Ответ = Вопрос("Выполнить в транзакции?", РежимДиалогаВопрос.ДаНетОтмена); 
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Если Вопрос("В этом режиме все Изменения будут применяться сразу. " + Символы.ПС + 
			"При прерывании обработки сделаные Изменения не отменятся. " + Символы.ПС + 
			"Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Конецесли;
	Конецесли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьТранзакцию();
	Конецесли;
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	Если Кнопка.Имя = "ОтменаПометкиНаУдаления" Тогда
		
		//Обрабатываем текущий документ
		ТекДанные = ЭлементыФормы[мИмяРеквизитаТаблицы].ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Предупреждение("Выберите объект для пометки удаления", 10);
			Возврат;
		КонецЕсли;
		
		Если лТаблицаРезультата.Количество() = 0 Тогда
			Предупреждение("Таблица результатов запроса пуста.", 10);
			Возврат
		КонецЕсли;
		
		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Сообщить("Снятие пометки удаления (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Попытка
			ТекДок = ТекДанные[Рез].ПолучитьОбъект();
			ТекДок.УстановитьПометкуУдаления(False);
			Сообщить(Строка(ТекДок) + " пометка удаления снята");
		Исключение
			СтандартнаяОшибка = ОписаниеОшибки();
			Сообщить("Ошибка в строке " + ТекДанные[Рез] + "]" + Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
			Ошибки = Ошибки + 1;
		КонецПопытки;
	Иначе
		Если лТаблицаРезультата.Количество() = 0 Тогда
			Предупреждение("Таблица результатов запроса пуста.", 10);
			Возврат
		КонецЕсли;
		
		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Сообщить("Снятие пометки удаления (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Ошибки = 0;
		
		Форма.гФормаПрогрессора.Открыть();
		Форма.гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = лТаблицаРезультата.Количество();
		Форма.гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Снятие пометки удаления:";
		Инд = 1;
		Форма.гФормаПрогрессора.ЗначениеИндикатора = 1;

		Для каждого СтрокаРезультатовЗапроса Из лТаблицаРезультата Цикл
			
			Инд = Инд + 1;
			
			ОбработкаПрерыванияПользователя();
			Попытка
				ТекДок = СтрокаРезультатовЗапроса[Рез].ПолучитьОбъект();
					
				Форма.гФормаПрогрессора.ЗначениеИндикатора = Инд;
				Форма.гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = ТекДок;
					
				ТекДок.УстановитьПометкуУдаления(False);
				Сообщить(Строка(ТекДок) + " пометка удаления снята");
			Исключение
				СтандартнаяОшибка = ОписаниеОшибки();
				Сообщить("Ошибка в строке " + СтрокаРезультатовЗапроса[Рез] + "]" + Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
				Ошибки = Ошибки + 1;
				Если Ошибки > 100 Тогда
					Сообщить("Много ошибок. Возможно неправильно указана колонка. Обработка прервана");
					Форма.гФормаПрогрессора.Закрыть();
					Прервать;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Сообщить("Снятие пометки удаления (колонка """ + Рез + """) завершено в " + ТекущаяДата());
		
	Форма.гФормаПрогрессора.Закрыть();
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьТранзакцию();
	Конецесли;
КонецПроцедуры // кзСнятиеПометкиУдаления()

Процедура кзСнятиеПроведения(Кнопка, ЭлементыФормы, Форма) Экспорт
	Ответ = Вопрос("Выполнить в транзакции?", РежимДиалогаВопрос.ДаНетОтмена); 
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Если Вопрос("В этом режиме все изменения будут применяться сразу. " + Символы.ПС + 
			"При прерывании обработки сделаные изменения не отменятся. " + Символы.ПС + 
			"Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Конецесли;
	Конецесли;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьТранзакцию();
	Конецесли;
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	Если лТаблицаРезультата.Количество() = 0 Тогда
		Предупреждение("Таблица результатов запроса пуста.", 10);
		Возврат
	КонецЕсли;
	
	Если Кнопка.Имя = "ОтменаПроведения" Тогда
		ТекДанные = ЭлементыФормы[мИмяРеквизитаТаблицы].ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Предупреждение("Выберите документ для отмены проведения", 10);
			Возврат;
		КонецЕсли;
		
		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Сообщить("Снятие проведения документов (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Ошибки = 0;
		
		Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекДанные[Рез])) Тогда
			Ошибки = Ошибки + 1;
			Сообщить("Ошибка в строке " + ТекДанные[Рез] + "]: " + " значение не является документом");			
		Иначе
			Попытка
				ТекДок = ТекДанные[Рез].ПолучитьОбъект();
				ТекДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(Строка(ТекДок) + " не проведен");
			Исключение
				СтандартнаяОшибка = ОписаниеОшибки();
				Сообщить("Ошибка в строке " + ТекДанные[Рез] + "]" + Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
			КонецПопытки;
		КонецЕсли;
		
		Сообщить("Снятие проведения документов (колонка """ + Рез + """) завершено в " + ТекущаяДата());
	Иначе
		
		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Сообщить("Снятие проведения документов (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Ошибки = 0;
		
		Форма.гФормаПрогрессора.Открыть();
		Форма.гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = лТаблицаРезультата.Количество();
		Форма.гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Снятие с проведения документа:";
		Инд = 1;
		Форма.гФормаПрогрессора.ЗначениеИндикатора = 1;

		Для Каждого СтрокаРезультатовЗапроса Из  лТаблицаРезультата Цикл
			
			Инд = Инд + 1;
			
			ОбработкаПрерыванияПользователя();
			
			Если НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаРезультатовЗапроса[Рез])) Тогда
				Ошибки = Ошибки + 1;
				Сообщить("Ошибка в строке " + СтрокаРезультатовЗапроса[Рез] + "]: " + " значение не является документом");			
			Иначе
				Попытка
					ТекДок = СтрокаРезультатовЗапроса[Рез].ПолучитьОбъект();
					
					Форма.гФормаПрогрессора.ЗначениеИндикатора = Инд;
					Форма.гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = ТекДок;
					
					ТекДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Сообщить(Строка(ТекДок) + " не проведен");
				Исключение
					СтандартнаяОшибка = ОписаниеОшибки();
					Сообщить("Ошибка в строке " + СтрокаРезультатовЗапроса[Рез] + "]" + Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
					
					Форма.гФормаПрогрессора.Закрыть();
					
					Ошибки = Ошибки + 1;					
				КонецПопытки;
			КонецЕсли;
			
			Если Ошибки > 100 Тогда
				Сообщить("Много ошибок. Возможно неправильно указана колонка. Обработка прервана");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Сообщить("Снятие проведения документов (колонка """ + Рез + """) завершено в " + ТекущаяДата());
		
		Форма.гФормаПрогрессора.Закрыть();
		
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьТранзакцию();
	Конецесли;
	
КонецПроцедуры // кзСнятиеПроведения()

Процедура кзПометкаУдаления(Кнопка, ЭлементыФормы, Форма) Экспорт
	
	Ответ = Вопрос("Выполнить в транзакции?", РежимДиалогаВопрос.ДаНетОтмена); 
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Если Вопрос("В этом режиме все Изменения будут применяться сразу. " + Символы.ПС + 
			"При прерывании обработки сделаные Изменения не отменятся. " + Символы.ПС + 
			"Вы уверены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Конецесли;
	Конецесли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьТранзакцию();
	Конецесли;
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	Если лТаблицаРезультата.Количество() = 0 Тогда
		Предупреждение("Таблица результатов запроса пуста.", 10);
		Возврат
	КонецЕсли;
	
	Если Кнопка.Имя = "ПометитьНаУдаление" Тогда
		
		//Обрабатываем текущий документ
		ТекДанные = ЭлементыФормы[лТаблицаРезультата].ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Предупреждение("Выберите объект для пометки удаления", 10);
			Возврат;
		КонецЕсли;
		
		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Сообщить("Пометка на удаление (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Попытка
			ТекОбъект = ТекДанные[Рез].ПолучитьОбъект();
			Если не (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекОбъект.Ссылка)) 
				и ТекОбъект.Предопределенный) Тогда
				ТекОбъект.УстановитьПометкуУдаления(True);
				Сообщить(Строка(ТекОбъект) + " помечен на удаление");
			КонецЕсли;
		Исключение                           
			СтандартнаяОшибка = ОписаниеОшибки();
			Сообщить("Ошибка в строке " + ТекДанные[Рез] + "]" + 
			Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
		КонецПопытки;
		
	Иначе
		
		Рез = кзВыбратьКолонку(ЭлементыФормы);
		Если Рез = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Сообщить("Пометка на удаление (колонка """ + Рез + """) начато в " + ТекущаяДата());
		
		Ошибки = 0;
		
		Форма.гФормаПрогрессора.Открыть();
		Форма.гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = лТаблицаРезультата.Количество();
		Форма.гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Помечается на удаление объект:";
		Инд = 1;
		Форма.гФормаПрогрессора.ЗначениеИндикатора = 1;

		Для каждого СтрокаРезультатовЗапроса Из лТаблицаРезультата Цикл
			
			Инд = Инд + 1;
			
			ОбработкаПрерыванияПользователя();
			Попытка
				ТекОбъект = СтрокаРезультатовЗапроса[Рез].ПолучитьОбъект();
				Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекОбъект.Ссылка)) 
					и ТекОбъект.Предопределенный Тогда
					Продолжить;
				КонецЕсли;
					
				Форма.гФормаПрогрессора.ЗначениеИндикатора = Инд;
				Форма.гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = ТекОбъект;
					
 				ТекОбъект.УстановитьПометкуУдаления(True);
				Сообщить(Строка(ТекОбъект) + " помечен на удаление");
			Исключение
				СтандартнаяОшибка = ОписаниеОшибки();
				Сообщить("Ошибка в строке " + СтрокаРезультатовЗапроса[Рез] + "]" + 
				Прав(СтандартнаяОшибка, СтрДлина(СтандартнаяОшибка) - Найти(СтандартнаяОшибка, "}:")));			
				Ошибки = Ошибки + 1;
				Если Ошибки > 100 Тогда
					Сообщить("Много ошибок. Возможно неправильно указана колонка. Обработка прервана");
					Прервать;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Сообщить("Пометка на удаление (колонка """ + Рез + """) завершено в " + ТекущаяДата());
	
		
	Форма.гФормаПрогрессора.Закрыть();
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьТранзакцию();
	Конецесли;
	
КонецПроцедуры // кзПометкаУдаления()

Процедура кзВыгрузитьВПараметр(Кнопка, Форма) Экспорт
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	//Проводим все документы
	Если лТаблицаРезультата.Количество() = 0 Тогда
		Предупреждение("Таблица результатов запроса пуста.", 10);
		Возврат
	КонецЕсли;

	Рез = кзВыбратьКолонку(Форма.ЭлементыФормы);
	Если Рез = Неопределено Тогда
		Возврат
	КонецЕсли;

	ТаблицаСПараметрами = Форма.мФормаПараметров.ПараметрыСписок;
	НазваниеКолонки = Рез;
	НоваяСтрока = ТаблицаСПараметрами.Найти(НазваниеКолонки, "Имя");
	Если НоваяСтрока <> Неопределено Тогда
		Предупреждение("Такой параметр уже есть", 10);
		Возврат
	Иначе
		НоваяСтрока = ТаблицаСПараметрами.Добавить();
		НоваяСтрока.Имя = НазваниеКолонки;
	Конецесли;
	
	СписокЗначений = Новый СписокЗначений;
	
	Для каждого СтрокаРезультатовЗапроса Из лТаблицаРезультата Цикл		
		ОбработкаПрерыванияПользователя();
		СписокЗначений.Добавить(СтрокаРезультатовЗапроса[Рез]);
	КонецЦикла;
	
	НоваяСтрока.Значение = СписокЗначений;
	НоваяСтрока.Тип      = ПолучитьТипПараметраПоЗначению(НоваяСтрока.Значение);
	
	Предупреждение("Загрузка параметров завершена.", 10);

Конецпроцедуры // кзВыгрузитьВПараметр()

//ДЕЙСТВИЯ НАД ТАБЛИЦЕЙ С РЕЗУЛЬТАТОМ ЗАПРОСА

Процедура кзВосстановитьШиринуКолонок(ЭлементыФормы, СтруктураСРазмерами) Экспорт;
	СтруктураСРазмерами = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_СтруктураСШиринойКолонок");
	Если гЗначениеНеЗаполнено(СтруктураСРазмерами) или ТипЗнч(СтруктураСРазмерами)<> Тип("Структура") Тогда
		СтруктураСРазмерами = Новый Структура
	КонецЕсли;
КонецПроцедуры
            
Процедура кзЗапомнитьШиринуКолонок(ЭлементыФормы, СтруктураСРазмерами) Экспорт
	Для каждого ТекКолонка Из ЭлементыФормы[мИмяРеквизитаТаблицы].Колонки Цикл
		СтруктураСРазмерами.Вставить(ТекКолонка.Имя,ТекКолонка.Ширина);
	КонецЦикла;
КонецПроцедуры

Функция кзСформироватьТаблицуДляПросмотра(Структура) Экспорт	
	ТаблицаДляПросмотра = новый ТаблицаЗначений;
	ТаблицаДляПросмотра.Колонки.Добавить("Ключ");
	ТаблицаДляПросмотра.Колонки.Добавить("Значение");
	Если ТипЗнч(Структура) = Тип("Структура") Тогда
		Для каждого ТекЗначение Из Структура Цикл
			НоваяСтрока = ТаблицаДляПросмотра.Добавить();
			НоваяСтрока.Ключ = ТекЗначение.Ключ;
			НоваяСтрока.Значение = ТекЗначение.Значение;
		КонецЦикла; 
	КонецЕсли;
	Возврат ТаблицаДляПросмотра
КонецФункции

//СОЗДАНИЕ СПЕЦ ЗАПРОСОВ

Процедура кзВсеСправочники(ЭлементФормы) Экспорт
	Если ЭлементыФормы.ТекстЗапроса.ПолучитьТекст()<> "" Тогда
		Если Вопрос("Текущий запрос очистится. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	СписокМетаданных = Новый СписокЗначений;
	
	ПризнакПометкиУдаления = (ЭлементФормы.Имя = "КнопкаМенюВсеСправочники");
	
	Для каждого ТекМетаданное Из Метаданные.Справочники Цикл
		СписокМетаданных.Добавить(ТекМетаданное,ТекМетаданное.Имя,ПризнакПометкиУдаления);
	КонецЦикла;
	
	Если НЕ ПризнакПометкиУдаления Тогда 
		Если не СписокМетаданных.ОтметитьЭлементы("Выберите справочники для формирования отчета") Тогда
			Возврат;		
		КонецЕсли;
	Конецесли;
	
	ТекстЗапроса = "";
	сч = 0;
	
	ФормаВыбораПолейЗапроса = ПолучитьФорму("ФормаВыбораПолейЗапроса");
	
	Поля = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеСправочники");
	Поля = ?(ЗначениеЗаполнено(Поля), Поля, "Ссылка");		
	
	ФормаВыбораПолейЗапроса.ПоляЗапроса    = Поля;
	ФормаВыбораПолейЗапроса.УсловиеЗапроса = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеСправочники");
	ФормаВыбораПолейЗапроса.ИсточникДанных = "Справочники." + ПолучитьОтмеченныеЭлементыСписка(СписокМетаданных)[0].Значение.Имя;
	
	РезультатВыбораПолей = ФормаВыбораПолейЗапроса.ОткрытьМодально();
	Если РезультатВыбораПолей = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Поля = РезультатВыбораПолей.Поля;
	Условие = РезультатВыбораПолей.Условие;
	
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеСправочники",Поля);
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеСправочники",Условие);
	
	Для каждого ТекМетаданное Из СписокМетаданных Цикл
		
		Если НЕ ТекМетаданное.Пометка Тогда
			Продолжить
		КонецЕсли;
		
		//Заменяем шаблонные поля на их значения
		ТекПоля = СтрЗаменить(ВРег(Поля), "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекПоля = СтрЗаменить(ТекПоля, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ТекУсловие = СтрЗаменить(ВРег(Условие), "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекУсловие = СтрЗаменить(ТекУсловие, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ПодЗапрос = "ВЫБРАТЬ " + ТекПоля + " ИЗ Справочник." + ТекМетаданное.Значение.Имя + ?(ТекУсловие = "", "", " ГДЕ " + ТекУсловие);
		
		Запрос = Новый Запрос(Подзапрос);
		Попытка
			ПараметрыЗапросовТекущаяСтрока = Запрос.НайтиПараметры();
		Исключение
			Сообщить("Справочник " + ТекМетаданное.Значение.Имя  + " не попал в запрос (" + ОписаниеОшибки() + ")");
			Продолжить;
		КонецПопытки;
		
		Если сч > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ 
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ПодЗапрос;
		сч = сч + 1;
	КонецЦикла; 
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	
КонецПроцедуры

Процедура кзВсеДокументы(ЭлементФормы) Экспорт
	
	Если ЭлементыФормы.ТекстЗапроса.ПолучитьТекст()<> "" Тогда
		Если Вопрос("Текущий запрос очистится. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	СписокМетаданных = Новый СписокЗначений;
	
	ПризнакПометкиУдаления = (ЭлементФормы.Имя = "КнопкаМенюВсеДокументы");
	
	Для каждого ТекМетаданное Из Метаданные.Документы Цикл
		СписокМетаданных.Добавить(ТекМетаданное,ТекМетаданное.Имя,ПризнакПометкиУдаления);
	КонецЦикла;
	
	Если Не ПризнакПометкиУдаления Тогда 
		Если Не СписокМетаданных.ОтметитьЭлементы("Выберите документы для формирования отчета") Тогда
			Возврат;		
		КонецЕсли;
	Конецесли;
	
	ТекстЗапроса = "";
	сч = 0;
	
	ФормаВыбораПолейЗапроса = ПолучитьФорму("ФормаВыбораПолейЗапроса");
	
	Поля = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеДокументы");
	Поля = ?(ЗначениеЗаполнено(Поля), Поля, "Ссылка");		
	
	ФормаВыбораПолейЗапроса.ПоляЗапроса    = Поля;
	ФормаВыбораПолейЗапроса.УсловиеЗапроса = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеДокументы");
	ФормаВыбораПолейЗапроса.ИсточникДанных = "Документы." + ПолучитьОтмеченныеЭлементыСписка(СписокМетаданных)[0].Значение.Имя;
	
	РезультатВыбораПолей = ФормаВыбораПолейЗапроса.ОткрытьМодально();
	Если РезультатВыбораПолей = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Поля = РезультатВыбораПолей.Поля;
	Условие = РезультатВыбораПолей.Условие;
	
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеДокументы"   , Поля);
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеДокументы", Условие);
	
	Для каждого ТекМетаданное Из СписокМетаданных Цикл
		
		Если НЕ ТекМетаданное.Пометка Тогда
			Продолжить
		КонецЕсли;
		
		ТекПоля = СтрЗаменить(Поля, "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекПоля = СтрЗаменить(ТекПоля, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ТекУсловие = СтрЗаменить(Условие, "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекУсловие = СтрЗаменить(ТекУсловие, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		Подзапрос = "ВЫБРАТЬ " + ТекПоля + " ИЗ Документ." + ТекМетаданное.Значение.Имя + ?(ТекУсловие = "", "", " ГДЕ " + ТекУсловие);
		
		Запрос = Новый Запрос(Подзапрос);
		Попытка
			ПараметрыЗапросовТекущаяСтрока = Запрос.НайтиПараметры();
		Исключение
			Сообщить("Документ " + ТекМетаданное.Значение.Имя  + " не попал в запрос (" + ОписаниеОшибки() + ")");
			Продолжить;
		КонецПопытки;
		
		Если сч > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Подзапрос;
		сч = сч + 1;
	КонецЦикла; 
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
КонецПроцедуры

Процедура кзВыбратьМетаданноеДляЗапроса(ИмяКнопки) Экспорт
	
	Если ЭлементыФормы.ТекстЗапроса.ПолучитьТекст() <> "" Тогда
		Если Вопрос("Текущий запрос очистится. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	СписокКоллекцийМетаданных = Новый СписокЗначений;
	СписокКоллекцийМетаданных.Добавить("Справочник"            , "Справочники"           , Истина,БиблиотекаКартинок.Справочник);
	СписокКоллекцийМетаданных.Добавить("Документ"              ,"Документы"              , Истина,БиблиотекаКартинок.Документ);
	СписокКоллекцийМетаданных.Добавить("Перечисление"          ,"Перечисления"           , Истина,БиблиотекаКартинок.Перечисление);
	СписокКоллекцийМетаданных.Добавить("ПланВидовХарактеристик","ПланыВидовХарактеристик", Истина,БиблиотекаКартинок.ПланВидовХарактеристик);
	СписокКоллекцийМетаданных.Добавить("ПланСчетов"            ,"ПланыСчетов"            , Истина,БиблиотекаКартинок.ПланСчетов);
	СписокКоллекцийМетаданных.Добавить("ПланВидовРасчета"      ,"ПланыВидовРасчета"      , Истина,БиблиотекаКартинок.ПланВидовРасчета);
	СписокКоллекцийМетаданных.Добавить("РегистрСведений"       ,"РегистрыСведений"       , Истина,БиблиотекаКартинок.РегистрСведений);
	СписокКоллекцийМетаданных.Добавить("РегистрНакопления"     ,"РегистрыНакопления"     , Истина,БиблиотекаКартинок.РегистрНакопления);
	СписокКоллекцийМетаданных.Добавить("РегистрБухгалтерии"    ,"РегистрыБухгалтерии"    , Истина,БиблиотекаКартинок.РегистрБухгалтерии);
	СписокКоллекцийМетаданных.Добавить("РегистрРасчета"        ,"РегистрыРасчета"        , Истина,БиблиотекаКартинок.РегистрРасчета);
	СписокКоллекцийМетаданных.Добавить("БизнесПроцесс"         ,"БизнесПроцессы"         , Истина,БиблиотекаКартинок.БизнесПроцесс);
	СписокКоллекцийМетаданных.Добавить("Задача"                ,"Задачи"                 , Истина,БиблиотекаКартинок.Задача);
	
	Сч = 0;
	Пока Сч < СписокКоллекцийМетаданных.Количество() Цикл 
		Если Метаданные[СписокКоллекцийМетаданных[Сч].Представление].Количество() = 0 Тогда 
			СписокКоллекцийМетаданных.Удалить(Сч);
			Сч = Сч - 1;
			КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	ВыбраннаяКоллекция = СписокКоллекцийМетаданных.ВыбратьЭлемент("Выберите коллекцию");
	
	Если ВыбраннаяКоллекция = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Выбрать все элементы из коллекции [" + ВыбраннаяКоллекция.Представление + "]""", РежимДиалогаВопрос.ДаНетОтмена,,,"Вопрос");
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	СписокМетаданных = Новый СписокЗначений;	
	Для каждого ТекМетаданное Из Метаданные[ВыбраннаяКоллекция.Представление] Цикл
		СписокМетаданных.Добавить(ТекМетаданное, ТекМетаданное.Имя, Ответ = КодВозвратаДиалога.Да);
	КонецЦикла;

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Если Не СписокМетаданных.ОтметитьЭлементы("Выберите элементы коллекции [" + ВыбраннаяКоллекция.Представление + "] для формирования отчета") Тогда
			Возврат;		
		КонецЕсли;
	Конецесли;
	
	ТекстЗапроса = "";
	сч = 0;
	
	ФормаВыбораПолейЗапроса = ПолучитьФорму("ФормаВыбораПолейЗапроса");
	
	ПрефиксСохраняемыхЗначений = "ВыбратьМетаданноеДляЗапроса_" + ВыбраннаяКоллекция.Представление;
	
	Поля = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_Поля" + ПрефиксСохраняемыхЗначений);
	
	ФормаВыбораПолейЗапроса.ПоляЗапроса    = Поля;
	ФормаВыбораПолейЗапроса.УсловиеЗапроса = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_Условие" + ПрефиксСохраняемыхЗначений);
	ФормаВыбораПолейЗапроса.ИсточникДанных = ВыбраннаяКоллекция.Представление + "." + ПолучитьОтмеченныеЭлементыСписка(СписокМетаданных)[0].Значение.Имя;
	
	РезультатВыбораПолей = ФормаВыбораПолейЗапроса.ОткрытьМодально();
	Если РезультатВыбораПолей = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Поля = РезультатВыбораПолей.Поля;
	Условие = РезультатВыбораПолей.Условие;
	
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_Поля" + ПрефиксСохраняемыхЗначений   , Поля);
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_Условие" + ПрефиксСохраняемыхЗначений, Условие);
	
	Для каждого ТекМетаданное Из СписокМетаданных Цикл
		
		Если НЕ ТекМетаданное.Пометка Тогда
			Продолжить
		КонецЕсли;
		
		ТекПоля = СтрЗаменить(Поля, "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекПоля = СтрЗаменить(ТекПоля, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ТекУсловие = СтрЗаменить(Условие, "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекУсловие = СтрЗаменить(ТекУсловие, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		Подзапрос = "ВЫБРАТЬ " + ТекПоля + " ИЗ " + ВыбраннаяКоллекция.Значение + "." + ТекМетаданное.Значение.Имя + ?(ТекУсловие = "", "", " ГДЕ " + ТекУсловие);
		
		Запрос = Новый Запрос(Подзапрос);
		Попытка
			ПараметрыЗапросовТекущаяСтрока = Запрос.НайтиПараметры();
		Исключение
			Сообщить("Объект метаданных " + ВыбраннаяКоллекция.Представление + "." + ТекМетаданное.Значение.Имя  + " не попал в запрос (" + ОписаниеОшибки() + ")", СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;
		
		Если сч > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Подзапрос;
		сч = сч + 1;
	КонецЦикла; 
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
КонецПроцедуры // кзВыбратьМетаданноеДляЗапроса


/////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФКНЦИИ

Функция ПолучитьОтмеченныеЭлементыСписка(СписокЗначений, КоличествоВозвращаемыхЭлементов = 0)
	
	Результат = Новый СписокЗначений;
	
	Сч = 0;
	Для каждого ЭлементСписка Из СписокЗначений Цикл
		
		Сч = Сч + 1;
		
		Если КоличествоВозвращаемыхЭлементов > 0 И КоличествоВозвращаемыхЭлементов < Сч Тогда 
			Прервать;
		КонецЕсли;
		
		Если ЭлементСписка.Пометка Тогда 
			Результат.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
		
	КонецЦикла; 

	Возврат Результат

КонецФункции // ПолучитьОтмеченныеЭлементыСписка()
 
Функция кзСвоеДеревоЗапросов(Дерево) Экспорт
	СвоеДерево       = Дерево.Скопировать();
	СтрокаДерева     = СвоеДерево.Строки.Добавить();
	СтрокаСШаблонами = ДополнительныеПараметры.Найти("Шаблоны", "Параметр");
	
	Если СтрокаСШаблонами <> Неопределено Тогда
		СлужебнаяСтрокаДереваЗапросов = ДополнительныеПараметры.Найти("СлужебнаяСтрокаДереваЗапросов", "Параметр");
		СтрокаДерева.ТекстЗапроса     = СлужебнаяСтрокаДереваЗапросов.Значение;
		СтрокаДерева.ПараметрыЗапросов = СтрокаСШаблонами.Значение;
	Конецесли;
	
	Возврат СвоеДерево;
КонецФункции

Функция кзПреобразоватьСекунды(Секунд) Экспорт
	Если Секунд > 0 Тогда
		Час = Цел(Секунд / 60 / 60);
		Мин = Цел((Секунд % 3600) / 60);
		Сек = Цел(Секунд % 60);
		Результат = ?(час > 0, строка(час) + " час ", "") + ?(мин > 0, строка(мин) + " мин ", "") + ?(сек > 0, строка(сек) + " сек", "");
	Иначе
		Результат = "меньше секунды"
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция кзВыбратьКолонку(ЭлементыФормы) Экспорт
	
	лКолонкиТаблицыРезультата = ЭлементыФормы[мИмяРеквизитаТаблицы].Колонки;
	
	Если лКолонкиТаблицыРезультата.Количество() = 0 Тогда
		Рез = Неопределено
	ИначеЕсли лКолонкиТаблицыРезультата.Количество() = 1 Тогда
		Рез = лКолонкиТаблицыРезультата[0].Имя
	Иначе
		СписокКолонок = Новый СписокЗначений;
		Для каждого КолонкаРезультатаЗапроса Из лКолонкиТаблицыРезультата Цикл
			СписокКолонок.Добавить(КолонкаРезультатаЗапроса.Имя);
		КонецЦикла;
		Рез = СписокКолонок.ВыбратьЭлемент("Выберите колонку для указания источника данных");
		Рез = ?(Рез = Неопределено,Неопределено,Рез.Значение);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // кзВыбратьКолонку()     

Функция кзПодставитьПараметр(Параметр)
	
	Результат = Параметр;
	Если Параметр<> Неопределено Тогда
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "Справочники." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "Справочники." + ИмяМетаданного + "." + 
						Справочники[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.Справочники[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "Справочники." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "Справочники." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
            ИмяМетаданного = Параметр.Метаданные().Имя; 
            Если Параметр.Пустая() Тогда
                Результат = "Документы." + ИмяМетаданного + ".ПустаяСсылка()";
            Иначе    
                Результат = "Документы." + ИмяМетаданного + ".НайтиПоНомеру(""" + Параметр.Номер + """)";
            КонецЕсли;
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + "." + 
						ПланыВидовХарактеристик[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.ПланыВидовХарактеристик[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "ПланыВидовХарактеристик." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "ПланыВидовРасчета." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "ПланыВидовРасчета." + ИмяМетаданного + "." + 
						ПланыВидовРасчета[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.ПланыВидовРасчета[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "ПланыВидовРасчета." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "ПланыВидовРасчета." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "Перечисления." + ИмяМетаданного + ".ПустаяСсылка()"
			Иначе    
				Результат = "Перечисления." + ИмяМетаданного + "." + Метаданные.Перечисления[ИмяМетаданного].ЗначенияПеречисления[Перечисления[ИмяМетаданного].Индекс(Параметр)].Имя
			КонецЕсли;
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметр)) Тогда
			ИмяМетаданного = Параметр.Метаданные().Имя; 
			Если Параметр.Пустая() Тогда
				Результат = "ПланыСчетов." + ИмяМетаданного + ".ПустаяСсылка()"
			ИначеЕсли Параметр.Предопределенный Тогда
				Результат = "ПланыСчетов." + ИмяМетаданного + "." + 
						ПланыСчетов[ИмяМетаданного].ПолучитьИмяПредопределенного(Параметр)
			Иначе    
				Если Метаданные.ПланыСчетов[ИмяМетаданного].ДлинаКода > 0 Тогда
					Результат = "ПланыСчетов." + ИмяМетаданного + ".НайтиПоКоду(""" + Параметр.Код + """)"
				Иначе	
					Результат = "ПланыСчетов." + ИмяМетаданного + ".НайтиПоНаименованию(""" + Параметр.Наименование + """, Истина)"
				КонецЕсли
			КонецЕсли;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Дата") Тогда
				Результат = "Дата(""" + Параметр + """)"
        ИначеЕсли ТипЗнч(Параметр) = Тип("МоментВремени") Тогда
            Результат = "Новый МоментВремени(Дата(""" + Параметр.Дата + """), " + кзПодставитьПараметр(Параметр.Ссылка) + ")";   			
		ИначеЕсли ТипЗнч(Параметр) = Тип("ВидДвиженияНакопления") Тогда
				Результат = "ВидДвиженияНакопления." + Параметр
		ИначеЕсли ТипЗнч(Параметр) = Тип("Строка") Тогда
				Результат = """" + Параметр + """"
		ИначеЕсли ТипЗнч(Параметр) = Тип("Число") Тогда
				Результат = Формат(Параметр, "ЧГ = ")
		КонецЕсли;

	КонецЕсли;
		
	Возврат Результат 	
КонецФункции

Функция ПолучитьПараметрыЗапроса(ТекстЗапроса, Безсообщений = False) Экспорт
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Если Безсообщений Тогда
			Возврат Неопределено;
		Иначе
			Предупреждение(ОписаниеОшибки(), 10, "Ошибка в запросе");
			Возврат новый СписокЗначений;
		КонецЕсли;
	КонецПопытки;
	Возврат ПараметрыЗапроса                         
КонецФункции // ПолучитьПараметрыЗапроса()

Процедура кзСкопироватьВБуфер(Форма, Текст) Экспорт
	НазваниеЭлемента = "ПолеHTMLДокумента321432458767";
	Форма.ЭлементыФормы.Добавить(Тип("ПолеHTMLДокумента"), НазваниеЭлемента, Ложь); 
	Окно = Форма.ЭлементыФормы[НазваниеЭлемента].Документ.parentWindow; 
	Окно.ClipboardData.SetData("Text", Текст); 
	Индекс = Форма.ЭлементыФормы.Индекс(Форма.ЭлементыФормы.Найти(НазваниеЭлемента)); 
	Форма.ЭлементыФормы.Удалить(Индекс); 
Конецпроцедуры

Процедура кзВставитьТекстЗапроса(ПолеТекстаЗапроса, Форма, ФормаСПараметрами, Обрабатывать) Экспорт
	
	ТекстЗапроса1С = гПолучитьСодержимоеБуфера(Форма);
	
	СписокПараметров = новый СписокЗначений;
	
	Текст = новый ТекстовыйДокумент;
	
	Инициировалось = Ложь;
	Если Обрабатывать И гИнициализацияVBScript() Тогда
		//\t	 - символ табуляции
		//\n	 - новая строка
		//\r	 - перевод каретки
		RegExp.Pattern = "(^|\s+|\t+|""|\|)[Вв]+[Ыы]+[Бб]+[Рр]+[Аа]+[Тт]+[ь]+[\s\S\t\n\r]*"";";
		Массив = RegExp.Execute(ТекстЗапроса1С);
				
		Если Массив.Count > 0 Тогда
			ТекстВСтроку = СокрЛП(Массив.Item(0).Value);
			ТекстВСтроку = СтрЗаменить(ТекстВСтроку,Символ(13) + Символ(10),Символы.ПС);
			Текст.ДобавитьСтроку(ТекстВСтроку);
			Инициировалось = Истина
		КонецЕсли;
	КонецЕсли;
	
	Если Обрабатывать И Инициировалось Тогда		
		//Заполнение параметров
		RegExp.Pattern = "[Уу]+[Сс]+[Тт]+[Аа]+[Нн]+[Оо]+[Вв]+[Ии]+[Тт]+[Ьь]+[Пп]+[Аа]+[Рр]+[Аа]+[Мм]+[Ее]+[Тт]+[Рр]+\(([^\n]*)\);";
		Массив = RegExp.Execute(ТекстЗапроса1С);
		Если Массив.Count > 0 Тогда
			Для i = 0 по Массив.Count - 1 Цикл
				ТекСтрока = СокрЛП(Массив.Item(i).Value);
				//На имя параметра и значение параметра
				RegExp.Pattern = "\((.*)\)";
				МассивПараметров = RegExp.Execute(ТекСтрока);
				Если МассивПараметров.Count > 0 Тогда
					ТекСтрока = СокрЛП(МассивПараметров.Item(0).Value);
					//Убираем первую и последнюю скобки
					ТекСтрока = Сред(ТекСтрока,2,СтрДлина(ТекСтрока) - 2);
					RegExp.Pattern = "([^,\s\t]*)";
					МассивПараметров = RegExp.Execute(ТекСтрока);
					ИмяПараметра = Истина;
					СтрокаСообщения = "";
					Для j = 0 по МассивПараметров.Count - 1 Цикл
						Если не гЗначениеНеЗаполнено(МассивПараметров.Item(j).Value) Тогда
							Если не ИмяПараметра Тогда
								//добавляем параметр
								ТекСтрока = СокрЛП(МассивПараметров.Item(j).Value);
								СписокПараметров.Добавить(СтрокаСообщения, ТекСтрока);
							Иначе
								ТекСтрока = СтрЗаменить(СокрЛП(МассивПараметров.Item(j).Value), """", "");
								СтрокаСообщения = ТекСтрока;
							КонецЕсли;
							ИмяПараметра = не ИмяПараметра;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Текст.УстановитьТекст(ТекстЗапроса1С)
	КонецЕсли;

	ТекстЗапроса1С = стрЗаменить(Текст.ПолучитьТекст(), "|", "");
	ТекстЗапроса1С = стрЗаменить(ТекстЗапроса1С, """;", "");
	Если ПолеТекстаЗапроса.ВыделенныйТекст = "" Тогда
		//добавляем в конец
		Для СЦ = 1 по СтрЧислоСтрок(ТекстЗапроса1С) цикл
			ТекСтр = СтрЗаменить(СтрПолучитьСтроку(ТекстЗапроса1С,СЦ),Символ(34) + Символ(34), "_БывшаяДвойнаяКавычка_"); 
			ТекСтр = СтрЗаменить(ТекСтр,Символ(34), ""); 
			ТекСтр = СтрЗаменить(ТекСтр, "_БывшаяДвойнаяКавычка_", Символ(34)); 
			ПолеТекстаЗапроса.ДобавитьСтроку(СтрЗаменить(ТекСтр,Символ(13), "")); 
		КонецЦикла;
	Иначе
		//Заменяем выделенную часть
		ПолеТекстаЗапроса.ВыделенныйТекст = ТекстЗапроса1С;
	КонецЕсли;
	
	Если Обрабатывать Тогда
		ОткрыватьПараметрыБызУсловий = ФормаСПараметрами.Открыта();
		гПолучитьПараметрыИзЗапроса(ФормаСПараметрами);
		Если НЕ ОткрыватьПараметрыБызУсловий И 
			(СписокПараметров.Количество() = 0 ИЛИ ФормаСПараметрами.Параметры.Количество() = 0) Тогда
			Если ФормаСПараметрами.Открыта() Тогда 
				ФормаСПараметрами.Закрыть();
			КонецЕсли
		КонецЕсли;
		
		Для каждого ТекПараметр Из СписокПараметров Цикл
			СтрокаПараметров = ФормаСПараметрами.Параметры.Найти(ТекПараметр.Значение, "Имя");
			Если  СтрокаПараметров = Неопределено Тогда
				Сообщить("Параметр " + ТекПараметр.Значение + "(" + ТекПараметр.Представление + ")" + " не используется в запросе. Не добавлен.");
			Иначе
				Попытка
					ЗначениеПараметра = "";
					Выполнить("ЗначениеПараметра = " + ТекПараметр.Представление);
					СтрокаПараметров.Значение = ЗначениеПараметра;
				Исключение
					Сообщить("Неудачная попытка установки параметра " + ТекПараметр.Значение + "(" + ТекПараметр.Представление + ")");
				КонецПопытки; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьСтароеДеревоПоКорнюРекурсивно(Корень, Колонки, НовоеДерево = Неопределено, СтопКран = 0)
	Если СтопКран = 0 Тогда
		СтопКран = 1;
	ИначеЕсли СтопКран > 10000 Тогда
		Сообщить("Ошибка рекурсии.");
		Возврат Неопределено
	КонецЕсли;
	СтопКран = СтопКран + 1;
	
	Если НовоеДерево = Неопределено Тогда
		НовоеДерево = новый ДеревоЗначений;
		Для каждого ТекКолонка Из Колонки Цикл
			НовоеДерево.Колонки.Добавить(ТекКолонка.Имя);
		КонецЦикла; 
	КонецЕсли;
	
	НоваяСтрока = НовоеДерево.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Корень);
	НоваяСтрока.Имя           = Корень.Запрос;
	НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор);
	
	//#добавлениепараметразапроса 5
	Для каждого лПараметрЗапроса Из Корень.ПараметрыЗапроса Цикл
		лНовыйПараметр = ПараметрыЗапросов.Добавить();
		лНовыйПараметр.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
		лНовыйПараметр.Значение             = ЗначениеВСтрокуВнутр(лПараметрЗапроса.Значение);
		лНовыйПараметр.Имя                  = лПараметрЗапроса.ИмяПараметра;
		лНовыйПараметр.Тип                  = ТипЗнч(лПараметрЗапроса.Значение);
	КонецЦикла; 
	
	Для каждого лВариантКода Из Корень.ВариантыКода Цикл
		лНовыйКод = ИсполняемыйКод.Добавить();
		лНовыйКод.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
		лНовыйКод.Имя                  = лВариантКода.ИмяВарианта;
		лНовыйКод.Текст                = лВариантКода.ТекстКода;
	КонецЦикла; 
	
	Для каждого СтрокаДерева Из Корень.Строки Цикл
		ВернутьСтароеДеревоПоКорнюРекурсивно(СтрокаДерева, Колонки, НоваяСтрока, СтопКран);		
	КонецЦикла; 	
	
	Возврат НовоеДерево;
	
КонецФункции // ВернутьСтароеДеревоПоКорнюРекурсивно()

Процедура СохранитьВеткуВФайл(Ветка, Колонки)
	
	Если Ветка = Неопределено Тогда
		Предупреждение("Не выбрана ветка для сохранения.", 10);
		Возврат;
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

	лКаталог = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ПутьКФайлуДляСохраненияВеток");
	
	Если гЗначениеНеЗаполнено(лКаталог) Тогда
		лКаталог = "";
	КонецЕсли;

	лФайлДляВетки = лКаталог + Ветка.Имя;
	
	Длг.ПолноеИмяФайла = лФайлДляВетки;
	Длг.Каталог        = лКаталог;
	Длг.Заголовок      = "Укажите файл для сохранения ветки";
	Длг.Фильтр         = "Файлы веток (*.sl)|*.sl";
	Длг.Расширение     = "sl";
		
	Если Длг.Выбрать() Тогда
		СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ПутьКФайлуДляСохраненияВеток", Длг.Каталог);
		СохранитьФайлСЗапросом(Длг.ПолноеИмяФайла, Ветка);
	КонецЕсли;

КонецПроцедуры // СохранитьВеткуВФайл()

Процедура ЗагрузитьВеткуИзФайла(Ветка, Колонки) Экспорт
	
	Если Ветка = Неопределено Тогда
		Предупреждение("Не выбрана ветка для сохранения.", 10);
		Возврат;
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	мИмяФайлаВетки = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ФайлДляВосстановленияВеток");
	Если гЗначениеНеЗаполнено(мИмяФайлаВетки) Тогда
		мИмяФайлаВетки = "";
	КонецЕсли;

	лФайлСВеткой = Новый Файл(мИмяФайлаВетки);
	
	Длг.ПолноеИмяФайла = мИмяФайлаВетки;
	Длг.Каталог        = лФайлСВеткой.Путь;
	Длг.Заголовок      = "Укажите файл для загрузки ветки";
	Длг.Фильтр         = "Файлы веток (*.sl)|*.sl";
	Длг.Расширение     = "sl";
		
	Если Длг.Выбрать() Тогда
		СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ФайлДляВосстановленияВеток", Длг.ПолноеИмяФайла);
	Иначе
		Возврат;
	КонецЕсли;

	Попытка
		НовоеДерево = ЗначениеИзФайла(Длг.ПолноеИмяФайла);
		ВернутьСтароеДеревоПоКорнюРекурсивно(НовоеДерево.Строки[0], Колонки, Ветка);
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки; 	

КонецПроцедуры // ЗагрузитьВеткуИзФайла()

Функция кзВыполнитьКод() Экспорт
	КодДляВыполнения = мФормаИсполняемыйКод.ОткрытьМодально();
	Если КодДляВыполнения <> Неопределено Тогда
		Попытка
			Выполнить(КодДляВыполнения);
		Исключение
			Сообщить(ОписаниеОшибки());		
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция кзЗаполнитьДеревоСПризнакомВСЕ(Форма, мРезЗапроса) Экспорт
	
	Построитель = новый ПостроительЗапроса;
	Построитель.Текст = Форма.ПолучитьТекстЗапроса(Истина);
	Построитель.ЗаполнитьНастройки();
	
	СписокИзмерений = новый СписокЗначений;
	Для каждого ТекИзмерение Из Построитель.Измерения Цикл
		СписокИзмерений.Добавить(ТекИзмерение.Имя);
	КонецЦИкла;
	
	Если СписокИзмерений.Количество() = 1 Тогда
		Измерения = СписокИзмерений[0].Значение;
	Иначе
		ВыбЭлемент = СписокИзмерений.ВыбратьЭлемент("Веберите группировку для обхода.");
		Если ВыбЭлемент = неопределено Тогда
			Возврат Неопределено;
		Иначе
			Измерения = ВыбЭлемент.Значение;
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой,Измерения, "Все");
					
	РезультатДерево = новый ДеревоЗначений;
	Для каждого Колонка Из мРезЗапроса.Колонки Цикл
		РезультатДерево.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
					
	ТекУровень = 0;
	ТекРодитель = РезультатДерево.Строки;
	Пока РезультатЗапроса.Следующий() Цикл
		Если РезультатЗапроса.Уровень() < ТекУровень Тогда
			ТекУровень = ТекУровень - 1;
			ТекРодитель = ТекРодитель.Родитель.Родитель;
			Если ТекРодитель = Неопределено Тогда
				ТекРодитель = РезультатДерево.Строки;
			Иначе
				ТекРодитель = ТекРодитель.Строки;
			КонецЕсли;
		ИначеЕсли РезультатЗапроса.Уровень() > ТекУровень Тогда
			ТекУровень = ТекУровень + 1;
			ТекРодитель = ТекРодитель[ТекРодитель.Количество() - 1].Строки;
		КонецЕсли;
		НоваяСтрока = ТекРодитель.Добавить();

		Для каждого Колонка Из РезультатДерево.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = РезультатЗапроса[Колонка.Имя];
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатДерево 
	
КонецФункции

Функция ЗагрузитьЗапросы()
	
	лОшибка = Ложь;
	
	Если ЗначениеЗаполнено(мИмяФайла) Тогда 
		лТекстОшибки = "";
		лРезультатЗагрузки = ПрочитатьФайлСЗапросомJSON(мИмяФайла, лТекстОшибки);
		
		Если лРезультатЗагрузки = 0 Тогда 
			лТекстОшибки = "Ошибка загрузки из файла (" + лТекстОшибки + ")." + Символы.ПС + "Попытка загрузки старого формата... ";
			Сообщить(лТекстОшибки, СтатусСообщения.Важное);
			лОшибка = Не ЗагрузитьЗапросыИзФайлаСтараяВерсия();
		ИначеЕсли лРезультатЗагрузки = -1 Тогда 
			Сообщить(лТекстОшибки, СтатусСообщения.Важное);
			лОшибка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДеревоЗапросов.Строки.Количество() = 0 Тогда 
		Если ЗначениеЗаполнено(мИмяФайла) Тогда 
			Сообщить("Невозможно загрузить список запросов из указанного файла или файл пуст.
						   |Выберите другой файл.", СтатусСообщения.Важное);
		КонецЕсли;
		СоздатьНовыйФайлЗапросов();
	КонецЕсли;			
	
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0];
	
	Модифицированность = Ложь;	
	
	Возврат Не лОшибка
	
КонецФункции // ЗагрузитьЗапросы()

Функция ПолучитьТипПараметраПоЗначению(Значение)
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда 
		Возврат 2
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда 
		Возврат 3
	Иначе
		Возврат 1
	КонецЕсли;

КонецФункции // ПолучитьТипПараметраПоЗначению()
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
Процедура ОбновлениеОтображения()
	Если гФормаПрогрессора<> Неопределено и гФормаПрогрессора.Открыта() Тогда
		гФормаПрогрессора.Закрыть();
	КонецЕсли;
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "Результат" Тогда
		СтатусРезультатаТаблицы = "";
		Если ЭлементыФормы[мИмяРеквизитаТаблицы].Данные = мИмяРеквизитаТаблицы и лТаблицаРезультата.Количество() > 0 Тогда
			СтатусРезультатаТаблицы = "Строк в запросе: " + лТаблицаРезультата.Количество();
		КонецЕсли;
		Если мДатаОкончанияЗапроса <> Неопределено и мДатаНачалаВыполнения <> Неопределено Тогда
			СтатусРезультатаТаблицы = СтатусРезультатаТаблицы + ?(мДатаНачалаВыполнения = Неопределено, 
				"", ?(СтатусРезультатаТаблицы = "", "", "; ") + 
				"Выполнение запроса: " + кзПреобразоватьСекунды(мДатаОкончанияЗапроса - мДатаНачалаВыполнения));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияКнопкиВыгрузки()
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Если ЭлементыФормы.СсылкаНаДокумент.Значение = Неопределено Тогда
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Выгрузить в новый документ <???>";
		Иначе
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Выгрузить в новый документ <" + ЭлементыФормы.СсылкаНаДокумент.Значение.Метаданные().Имя + "." + ?(ЗначениеЗаполнено(ТабличнаяЧасть), ТабличнаяЧасть, "???") + ">";
		КонецЕсли;
		ЭлементыФормы.ВыгрузитьВДокумент.Доступность = (лТаблицаРезультата.Количество() > 0);
	Иначе
		Если ЗначениеЗаполнено(ТабличнаяЧасть)  Тогда
			ЭлементыФормы.ВыгрузитьВДокумент.Доступность = (лТаблицаРезультата.Количество() > 0);
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Выгрузить в <" + СсылкаНаДокумент.Метаданные().Имя + " № " + СокрЛП(СсылкаНаДокумент.Номер) + "." + ТабличнаяЧасть + ">";
		Иначе
			ЭлементыФормы.ВыгрузитьВДокумент.Доступность = Ложь;
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Выгрузить в <???>";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельФормыВыгрузитьТекстЗапроса(Элемент)
	
	ТекстЗапроса = ЭтаФорма.ПолучитьТекстЗапроса(Истина) ;
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(ТекстЗапроса, True);
	
	Результат = "";
	
	Результат = "Запрос = Новый Запрос;" + Символы.ПС;
	Результат = Результат + "Запрос.Текст =" + Символы.ПС;
	
	//Символ(34)  - " (кавычки)
	//Символ(13)  - cr (возврат коретки)
	текПервыйРаз = Истина;
	Для СЦ = 1 по СтрЧислоСтрок(ТекстЗапроса) цикл
		ТекСтр = СтрЗаменить(СтрПолучитьСтроку(ТекстЗапроса,СЦ), Символ(13), "");
		ТекСтр = СтрЗаменить(ТекСтр,Символ(34),Символ(34) + Символ(34));
		Если Лев(СокрЛП(ТекСтр),1)<> "|" Тогда
			Результат = Результат + ?(НЕ текПервыйРаз, Символы.ПС, "") + ?(текПервыйРаз, """", "|") + ТекСтр;
			текПервыйРаз = Ложь;
		КонецЕсли;
	КонецЦикла;
	Результат = Результат  + """;" + Символы.ПС;
	
	Если ПараметрыЗапросов <> Неопределено Тогда
		
		Для каждого ТекПараметрЗапроса Из ПараметрыЗапроса Цикл
			СтрокаСПараметром = ЭтаФорма.мФормаПараметров.ПараметрыСписок.Найти(ТекПараметрЗапроса.Имя, "Имя");
			Если СтрокаСПараметром = Неопределено Тогда
				Сообщить("Не задан параметр """ + ТекПараметрЗапроса.Имя + """");
			ИначеЕсли ТипЗнч(СтрокаСПараметром.Значение) = Тип("СписокЗначений") Тогда
				ЗначениеПараметра = "кзСписок" + ТекПараметрЗапроса.Имя;
				Результат = Результат + ЗначениеПараметра + " = Новый СписокЗначений;" + Символы.ПС;
				Для каждого ТекЗначениеСписка Из СтрокаСПараметром.Значение Цикл
					Результат = Результат + "кзСписок" + ТекПараметрЗапроса.Имя + ".Добавить(" + кзПодставитьПараметр(ТекЗначениеСписка.Значение) + ");" + Символы.ПС;
				КонецЦикла;
			Иначе
				ЗначениеПараметра = кзПодставитьПараметр(СтрокаСПараметром.Значение);
			КонецЕсли;
			Результат = Результат + "Запрос.УстановитьПараметр(""" + ТекПараметрЗапроса.Имя + """, " +
				?(СтрокаСПараметром = Неопределено, "", ЗначениеПараметра) + ");" + Символы.ПС;
		КонецЦикла;
		
		Результат = Результат + Символы.ПС;
		
	Конецесли;
	
	Если Элемент.Имя = "ВыгрузитьТекстЗапроса" Тогда
		Результат = Результат + "Результат = Запрос.Выполнить();" + Символы.ПС;
		Результат = Результат + "Выборка = Результат.Выбрать();" + Символы.ПС;
		Результат = Результат + "Пока Выборка.Следующий() Цикл" + Символы.ПС;
		Результат = Результат + "КонецЦикла;" + Символы.ПС;
	ИначеЕсли Элемент.Имя = "ВыгрузитьТекстЗапросаВТЗ" Тогда
		Результат = Результат + "Результат = Запрос.Выполнить();" + Символы.ПС;
		Результат = Результат + "Выборка = Результат.Выгрузить();" + Символы.ПС;
		Результат = Результат + "Для каждого СтрокаТЗ Из Выборка Цикл" + Символы.ПС;
		Результат = Результат + "КонецЦикла;" + Символы.ПС;
	ИначеЕсли Элемент.Имя = "ВыгрузитьТекстЗапросаСОбработкойРезультата" Тогда
		Результат = "//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			|// Данный фрагмент построен конструктором.
			|// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			|" + Результат;
			
		Результат = Результат + "Результат = Запрос.Выполнить();" + Символы.ПС;
		Результат = Результат + "Выборка = Результат.Выбрать();" + Символы.ПС;
		Результат = Результат + "Пока Выборка.Следующий() Цикл" + Символы.ПС;
		Результат = Результат + "КонецЦикла;" + Символы.ПС;
		
		Результат = Результат + "//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА";
	КонецЕсли;
	
	Ответ = Вопрос("Скопировать в буфер?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		кзСкопироватьВБуфер(ПолучитьФорму("Точка"),Результат);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ТД = Новый ТекстовыйДокумент();
		ТД.УстановитьТекст(Результат);
		ТД.Показать(,);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыВставитьТекстЗапроса(Кнопка)
	
	кзВставитьТекстЗапроса(ЭлементыФормы.ТекстЗапроса, ЭтаФорма, мФормаПараметров, Кнопка.Имя <> "ВставитьТекстЗапросаБезОбработки")
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПолучитьИзЗапроса(Кнопка)
	гПолучитьПараметрыИзЗапроса(мФормаПараметров);
КонецПроцедуры

Процедура КоманднаяПанельФормыПараметрыИБ(Кнопка)
	мФормаПараметрыИБ.Открыть();
КонецПроцедуры

Процедура МенюТаблицаРезультатаПолучитьТипЗначения(Кнопка)
	
	СтандартнаяОбработка = Ложь;
	
	лТаблицаРезультатаЭлемент = ЭлементыФормы[мИмяРеквизитаТаблицы];
	
	Если лТаблицаРезультатаЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		СодержимоеЯчейки = лТаблицаРезультатаЭлемент.ТекущиеДанные[лТаблицаРезультатаЭлемент.ТекущаяКолонка.Имя];
		Предупреждение("[" + гСтроковоеПредставлениеТипа(ТипЗнч(СодержимоеЯчейки)) + "]", 10);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики программных пунктов

Процедура ВыборМенюИнформация(Кнопка)
	Если Кнопка.Имя = гПрефиксПрограммныхЭлементов() + "ОПрограмме" Тогда
		ПолучитьФорму("ИсторияИзменений").Открыть();
	Иначе
		гНажатиеНаКнопкуВыборМенюИнформация(Кнопка.Имя);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Функция НастройкиFTP()
	
	лФормаНастройкиFTP = ПолучитьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаНастройкиFTP");
	ЗаполнитьЗначенияСвойств(лФормаНастройкиFTP, ПараметрыПодключенияFTP);
	РезультатЗакрытия = лФормаНастройкиFTP.ОткрытьМодально();
		
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда 
		ПараметрыПодключенияFTP = РезультатЗакрытия;
	КонецЕсли;
		
КонецФункции // НастройкиFTP()

&НаКлиенте
Функция СохранитьНаFTP()
	
	//Если ПроверитьМодифицированность(мОперацииРаботыСФайломЗапроса.СохранитьНаFTP) Тогда 
	//	Попытка
	//		FTPСоединение = Новый FTPСоединение(ПараметрыПодключенияFTP.Адрес, 
	//			?(ЗначениеЗаполнено(ПараметрыПодключенияFTP.Порт), ПараметрыПодключенияFTP.Порт, "21"), ПараметрыПодключенияFTP.Пользователь, ПараметрыПодключенияFTP.Пароль);
	//		FTPСоединение.Записать(ИмяФайлаСЗапросом, "consquery.data");
	//		FTPСоединение = Неопределено;
	//		Состояние("Запрос сохранен на ftp.", 100);
	//	Исключение
	//		ПоказатьПредупреждение(, "Ошибка. Подключение не выполнено.", 10, "Сохранение запроса на ftp.");
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки; 
	//КонецЕсли;
	
КонецФункции // СохранитьНаFTP()

&НаКлиенте
Функция ЗагрузитьСFTP()
	
	Если ПроверитьМодифицированность() Тогда 
		Попытка
			FTPСоединение = Новый FTPСоединение(ПараметрыПодключенияFTP.Адрес, 
				?(ЗначениеЗаполнено(ПараметрыПодключенияFTP.Порт), ПараметрыПодключенияFTP.Порт, "21"), ПараметрыПодключенияFTP.Пользователь, ПараметрыПодключенияFTP.Пароль);
				
			лМассивФайлов = FTPСоединение.НайтиФайлы(, "*.epf", Истина);
			
			лСписокФайлов = новый СписокЗначений;
			лСписокФайлов.ЗагрузитьЗначения(лМассивФайлов);
			лФайлДляЗагрузки = лСписокФайлов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПоказатьВыборЭлементаОбработкаВыбора"), "Выберите файл для загрузки...");
		Исключение
			ПоказатьПредупреждение(, "Ошибка. Подключение не выполнено.", 10, "Загрузка запроса с ftp.");			
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЕсли;
	
КонецФункции // ЗагрузитьСFTP()


// Меню для работы с временными таблицами

Функция кзДобавитьВременнуюТаблицу(ИмяВременнойТаблицы, МенеджерВременныхТаблиц)
	
	Результат = Новый ТаблицаЗначений;
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Попытка
			ВремЗапрос = Новый Запрос;
			ВремЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			ВремЗапрос.Текст = "Выбрать * из " + ИмяВременнойТаблицы;
			Результат = ВремЗапрос.Выполнить().Выгрузить();
		Исключение
			Результат = Неопределено;
			//Сообщить("Не удалось показать временную таблицу " + ИмяВременнойТаблицы + " : " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

// Обработчики нажатий на менюшки показа и уничтожения временных таблиц
//
Процедура ПриВыбореПоказатьВременнуюТаблицу(Элемент)
	
	ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма, Новый УникальныйИдентификатор);
	ФормаВложеннойТаблицы.ВложеннаяТаблица = гСоответствиеВременныеТаблицы[Элемент.Имя];
	ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
	ФормаВложеннойТаблицы.Заголовок = "Временная таблица " + Элемент.Имя;
	ФормаВложеннойТаблицы.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоказатьВыделеннуюВременнуюТаблицу(Кнопка)
	
    ТекстЗап = СокрЛП(ЭлементыФормы.ТекстЗапроса.ПолучитьВыделенныйТекст());
	Если СтрДлина(ТекстЗап) = 0 Тогда
		Предупреждение("Выделите временную таблицу для просмотра", 10);
		Возврат;
	КонецЕсли;
	
	лНазваниеВременнойТаблицы = ТекстЗап;
	
	Если гСоответствиеВременныеТаблицы[лНазваниеВременнойТаблицы] = Неопределено Тогда 
		Предупреждение("Не найдена временная таблица """ + лНазваниеВременнойТаблицы + """", 10);
		Возврат;
	КонецЕсли;
	
	ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма, Новый УникальныйИдентификатор);
	ФормаВложеннойТаблицы.ВложеннаяТаблица = гСоответствиеВременныеТаблицы[лНазваниеВременнойТаблицы];
	ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
	ФормаВложеннойТаблицы.Заголовок = "Временная таблица " + лНазваниеВременнойТаблицы;
	ФормаВложеннойТаблицы.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительнаяПанельРезультатаПерейтиКОписаниюВременнойТаблицы(Кнопка)
	
	лПолеТекстаЗапроса = ЭлементыФормы.ТекстЗапроса;
	
    ТекстЗап = СокрЛП(лПолеТекстаЗапроса.ПолучитьВыделенныйТекст());
	Если СтрДлина(ТекстЗап) = 0 Тогда
		Предупреждение("Выделите временную таблицу для просмотра", 100);
		Возврат;
	КонецЕсли;
	
	лНазваниеВременнойТаблицы = ТекстЗап;
	
	лВесьТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	лПозицияВременнойТаблицыВТекстеЗапроса = Найти(ВРег(лВесьТекстЗапроса), "ПОМЕСТИТЬ " + ВРег(лНазваниеВременнойТаблицы));
	
	Если лПозицияВременнойТаблицыВТекстеЗапроса = 0 Тогда 
		Предупреждение("В тексте запроса не найдена строка ""Поместить " + лНазваниеВременнойТаблицы + """", 100);
		Возврат;
	КонецЕсли;
	
	лПолеТекстаЗапроса.УстановитьГраницыВыделения(лПозицияВременнойТаблицыВТекстеЗапроса, лПозицияВременнойТаблицыВТекстеЗапроса);
	
КонецПроцедуры


Процедура ПриВыбореУничтожитьВременнуюТаблицу(Элемент)
	
	Если Элемент.Имя = "УничтожитьВсе" Тогда
		гОбработкаНажатияПунктаМенюУничтожитьВременныеТаблицы(ЭлементыФормы);
	Иначе
		СписокВременныхТаблиц = Новый СписокЗначений();
		СписокВременныхТаблиц.Добавить(Элемент.Имя);
		гОбработкаНажатияПунктаМенюУничтожитьВременныеТаблицы(ЭлементыФормы, СписокВременныхТаблиц);
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельФормыИспользоватьМенеджерВременныхТаблиц(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	Если Не Кнопка.Пометка = Истина Тогда
		ВременныеТаблицы.Очистить();
		гПерерисоватьСпискиВременныхТаблиц();
	КонецЕсли;
КонецПроцедуры

//ДИНАМИЧЕСКИ СОЗДАВАЕМЫЕ КНОПКИ

Процедура КнопкаДействияКнопкаМенюПроведениеДокументов(Кнопка)
	кзДокПроведение(Кнопка, ЭлементыФормы, ЭтаФорма)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюОтменаПроведенияДокументов(Кнопка)
	кзСнятиеПроведения(Кнопка, ЭлементыФормы, ЭтаФорма)
КонецПроцедуры // КнопкаДействияКнопкаМенюОтменаПроведенияДокументов

Процедура КнопкаДействияКнопкаМенюПометкаУдаленияОбъектов(Кнопка)
	кзПометкаУдаления(Кнопка, ЭлементыФормы, ЭтаФорма)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюСнятиеПометкиУдаленияОбъектов(Кнопка)
	кзСнятиеПометкиУдаления(Кнопка, ЭлементыФормы, ЭтаФорма)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВсеДокументы(Кнопка)
	кзВсеДокументы(Кнопка)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВыбранныеДокументы(Кнопка)	
	кзВсеДокументы(Кнопка)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВыгрузитьВПараметр(Кнопка)
	кзВыгрузитьВПараметр(Кнопка, ЭтаФорма)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВыполнитьКод(Кнопка)
	кзВыполнитьКод();
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюПечатьРезультатаЗапроса(Кнопка)
	СохранитьРезультат()
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюПечатьДанныхТаблицы(Кнопка)
	
	ТекСтраница = ЭлементыФормы.ПанельРезультата.ТекущаяСтраница;
	Если ТекСтраница.Имя = "Результат" Тогда 
		ВывестиНаПечать(ЭлементыФормы[мИмяРеквизитаТаблицы].Значение);
	Иначе
		
		Если ТекСтраница <> Неопределено Тогда
			Если Найти(ТекСтраница.Имя, "СтраницаСРезультатом_") > 0 Тогда
				ВывестиНаПечать(ЭлементыФормы[СтрЗаменить(ТекСтраница.Имя, "СтраницаСРезультатом_", "ТаблицаСРезультатом_")].Значение);
			Конецесли;
		Конецесли;		
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВсеСправочники(Кнопка)
	кзВсеСправочники(Кнопка)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВыбранныеСправочники(Кнопка)
	кзВсеСправочники(Кнопка)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВыбратьМетаданноеДляЗапроса(Кнопка)
	
	кзВыбратьМетаданноеДляЗапроса(Кнопка.Имя)
	
КонецПроцедуры // КнопкаДействияКнопкаМенюВыбратьМетаданноеДляЗапроса

Процедура КнопкаДействияКнопкаМенюЗапомнитьШиринуКолонок(Кнопка)
	кзЗапомнитьШиринуКолонок(ЭлементыФормы, мСтруктураСРазмерами);
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюПросмотретьТекущиеЗначения(Кнопка)
	ТаблицаДляПросмотра = кзСформироватьТаблицуДляПросмотра(мСтруктураСРазмерами);
	ТаблицаДляПросмотра.ВыбратьСтроку();
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюСохранитьТекущиеРазмерыПоУмолчанию(Кнопка)
	ТекСтруктура = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_СтруктураСШиринойКолонок");
	Если гЗначениеНеЗаполнено(ТекСтруктура) Тогда
		ТекСтруктура = новый Структура
	КонецЕсли;
	Для каждого ЗначениеСтруктуры Из мСтруктураСРазмерами Цикл
		ТекСтруктура.Вставить(ЗначениеСтруктуры.Ключ,ЗначениеСтруктуры.Значение);
	КонецЦикла;
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_СтруктураСШиринойКолонок",ТекСтруктура);
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВосстановитьЗначенияПоУмолчанию(Кнопка)
	кзВосстановитьШиринуКолонок(ЭлементыФормы, мСтруктураСРазмерами);
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюОчиститьЗначенияПоУмолчанию(Кнопка)
	кзОчиститьЗначениеПоУмолчанию(мСтруктураСРазмерами)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюПросмотретьЗначенияПоУмолчанию(Кнопка)
	ТаблицаДляПросмотра = кзСформироватьТаблицуДляПросмотра(ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_СтруктураСШиринойКолонок"));
	ТаблицаДляПросмотра.ВыбратьСтроку();
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюУстановитьВсемОднуШирину(Кнопка)
	ТекШиринаКолонки = 10;
	Если ВвестиЧисло(ТекШиринаКолонки, "Введите ширину колонки", 3, 0) Тогда
		ТекКолонки = ЭлементыФормы[мИмяРеквизитаТаблицы].Колонки;
		Для каждого Колонка Из ТекКолонки Цикл
			Колонка.Ширина = ТекШиринаКолонки
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюЗагрузитьИзБуфераВТаблицуСРезультатом(Кнопка)
	
	текТекстИзБуфера =  Новый ТекстовыйДокумент;	
	текТекстИзБуфера.УстановитьТекст(гПолучитьСодержимоеБуфера(ЭтаФорма));
	
	гТекстВТаблицу(текТекстИзБуфера, Вычислить(мИмяРеквизитаТаблицы));
	
	ЭлементыФормы[мИмяРеквизитаТаблицы].СоздатьКолонки();
	
	Предупреждение("Загрузка данных из буфера.", 10);
	
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюВыгрузкаВDBF(Кнопка)
	кзКоманднаяПанельФормыВыгрузитьВДБФ(Кнопка)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюДиаграмма(Кнопка)
	кзКоманднаяПанельФормыДиаграмма(Кнопка)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюПоискСсылок(Кнопка)
	
	КолонкаССылками         = Неопределено;
	лТаблицаНайденныхСсылок = ПолучитьТаблицуНайденныхСсылок(КолонкаССылками);

	Если ЗначениеЗаполнено(лТаблицаНайденныхСсылок) Тогда 
		ВывестиНаПечать(лТаблицаНайденныхссылок);
		Сообщить("Поиск ссылок на объекты (колонка """ + КолонкаССылками + """) завершено в " + ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюПоискСсылокВСтруктуру(Кнопка)
	
	КолонкаССылками         = Неопределено;
	лТаблицаНайденныхСсылок = ПолучитьТаблицуНайденныхСсылок(КолонкаССылками);

	Если ЗначениеЗаполнено(лТаблицаНайденныхСсылок) Тогда 
		
		Сч = 1;
		Пока Истина Цикл
			ТекПараметр = "Параметр" + Формат(Сч, "ЧГ=0");
			Если Не гСтруктураТЗДляВременныхТаблиц.Свойство(ТекПараметр) Тогда 
				Прервать;
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		
		гСтруктураТЗДляВременныхТаблиц.Вставить(ТекПараметр, лТаблицаНайденныхСсылок);
		
		Сообщить("В глобальную структуру выгружена таблица значений с найденными ссылками. 
		|Доступ к таблице в структуре: гСтруктураТЗДляВременныхТаблиц." + ТекПараметр + "
		|Поля таблицы                : Данные, Метаданные, ПутьКРасположениюСсылкиВОбъекте, Ссылка");
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаДействияКнопкаМенюПоискСсылокВСтруктуру

Процедура КнопкаДействияКнопкаМенюСформироватьКодДляОтладки(Кнопка)
	кзКоманднаяПанельФормыСформироватьКодДляОтладки(Кнопка)
КонецПроцедуры

Процедура КнопкаДействияКнопкаМенюСервисIntellisense(Кнопка)
	
	ОткрытьМенюIntelliSense(ЭлементыФормы.ТекстЗапроса);
	
КонецПроцедуры // КнопкаДействияКнопкаМенюСервисIntellisense()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ

Процедура ТабличноеПолеШаблоновПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если не Копирование и НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Использовать = True;
	Конецесли;
КонецПроцедуры

Процедура ТаблицаРезультатаПриАктивИзацииЯчейки(Элемент)
	ЗаполнитьЗначениеАгрегатнойФункции();
КонецПроцедуры


Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Модифицированность и ТекущаяСтраница = 0 Тогда
		кзСохранитьШаблоны(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	Если мФормаПоиска <> Неопределено И мФормаПоиска.Открыта() Тогда
		мФормаПоиска.АктивИзировать();
		мФормаПоиска.ТекущийЭлемент = мФормаПоиска.Элементыформы.СтрокаПоиска;
	Иначе
		Если мФормаПоиска = Неопределено Тогда
			мФормаПоиска = ПолучитьФорму("Поиск");
		КонецЕсли;
		мФормаПоиска.ВладелецФормы = ЭтаФорма;
		мФормаПоиска.Открыть();
	КонецЕсли;
		
КонецПроцедуры

Процедура кзСозданиеДБФ(ФайлДБФ, ИмяФайлаВыгрузки, ТекКолонки)
	
	Для каждого Колонка Из ТекКолонки Цикл
		ИмяПоля = Колонка.Имя;
		ТипПоля = Колонка.ЭлементУправления.ТипЗначения;
		Длина = 0;
		ДлинаДЧ = 0;
		Если ТипПоля.СодержитТип(Тип("Строка")) Тогда
			ТипДБФ = "S";
			Длина = ТипПоля.КвалификаторыСтроки.Длина;
		ИначеЕсли ТипПоля.СодержитТип(Тип("Число")) Тогда
			ТипДБФ = "N";
			Длина = ТипПоля.КвалификаторыЧисла.Разрядность;
			ДлинаДЧ = ТипПоля.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			Если Длина = 0 Тогда
				СтрокаЗапрсаСВыразить = ЭтаФорма.ПолучитьТекстЗапроса(Истина);
				ПоложениеПоляВЗапросе = Найти(СтрокаЗапрсаСВыразить, ИмяПоля);
				СтрокаЗапрсаСВыразить = Сред(СтрокаЗапрсаСВыразить,1, ПоложениеПоляВЗапросе - 1);
				КоличествоВыразить = СтрЧислоВхождений(СтрокаЗапрсаСВыразить, "ВЫРАЗИТЬ(");
				Для зю = 1 по КоличествоВыразить Цикл
					ПоложениеВыразитьВЗапросе = Найти(СтрокаЗапрсаСВыразить, "ВЫРАЗИТЬ(");
					СтрокаЗапрсаСВыразить = Прав(СтрокаЗапрсаСВыразить,СтрДлина(СтрокаЗапрсаСВыразить) - ПоложениеВыразитьВЗапросе - 8);
				КонецЦикла;
				ПоложениеЧИСЛОВЗапросе = Найти(СтрокаЗапрсаСВыразить, "ЧИСЛО(");
				СтрокаЗапрсаСВыразить = Прав(СтрокаЗапрсаСВыразить,СтрДлина(СтрокаЗапрсаСВыразить) - ПоложениеЧИСЛОВЗапросе - 5);
				ПоложениеЗапятушки = Найти(СтрокаЗапрсаСВыразить, ", ");
				Длина = Число(Лев(СтрокаЗапрсаСВыразить,ПоложениеЗапятушки - 1));
				СтрокаЗапрсаСВыразить = Прав(СтрокаЗапрсаСВыразить,СтрДлина(СтрокаЗапрсаСВыразить) - ПоложениеЗапятушки);
				ПоложениеЗапятушки = Найти(СтрокаЗапрсаСВыразить, ")");
				ДлинаДЧ = Число(Лев(СтрокаЗапрсаСВыразить,ПоложениеЗапятушки - 1));
			КонецЕсли;
		ИначеЕсли ТипПоля.СодержитТип(Тип("Булево")) Тогда
			ТипДБФ = "L";
		ИначеЕсли ТипПоля.СодержитТип(Тип("Дата")) Тогда
			ТипДБФ = "D";
		Иначе
			ТипДБФ = "S";
			Длина = 200;
		КонецЕсли;
		ФайлДБФ.поля.Добавить(ИмяПоля, ТипДБФ, Длина, ДлинаДЧ);
	КонецЦикла;
	
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.СоздатьФайл(ИмяФайлаВыгрузки);
	

КонецПроцедуры

Процедура кзКоманднаяПанельФормыВыгрузитьВДБФ(Кнопка)
	
	Если СпособВыгрузки <> 1 Тогда
		Предупреждение("Выгрузка работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	ТекКолонки = ЭлементыФормы[мИмяРеквизитаТаблицы].Колонки;
	Если ТекКолонки.Количество() = 0 Тогда
		Сообщить("Нет результата запроса");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Файлы DBF(*.dbf)|*.dbf";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл для выгрузки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ИмяФайлаВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Сообщить("Файл не выбран");
		Возврат;
	КонецЕсли;
	Файло = Новый Файл(ИмяФайлаВыгрузки);
	
	ФайлДБФ = Новый xBase;
	ФайлДБФ.АвтоСохранение = Истина;
	Если Файло.Существует() Тогда
		ОтветНаВопрос = Вопрос("Файл с таким именем существует. Дописать данные в файл?", РежимДиалогаВопрос.ДаНетОтмена);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			//Проверим структуру
			ФайлДБФ.ОткрытьФайл(ИмяФайлаВыгрузки);
			Для каждого Колонка Из ТекКолонки Цикл
				Если ФайлДБФ.поля.Найти(Колонка.Имя) = Неопределено Тогда
					Сообщить("Не совпадает структура файла ДБФ с результатом запроса");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			кзСозданиеДБФ(ФайлДБФ, ИмяФайлаВыгрузки, ТекКолонки);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		кзСозданиеДБФ(ФайлДБФ, ИмяФайлаВыгрузки, ТекКолонки)
	КонецЕсли;
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	гФормаПрогрессора.Открыть();
	гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = лТаблицаРезультата.Количество();
	гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование печатной формы:";
	Инд = 1;
	гФормаПрогрессора.ЗначениеИндикатора = 1;
	
	Для каждого СтрокаТЧ Из лТаблицаРезультата Цикл
		
		Инд = Инд + 1;
		
		ОбработкаПрерыванияПользователя();
		
		гФормаПрогрессора.ЗначениеИндикатора = Инд;
		гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Выгружается " + Инд + " - я строка";
		
		ФайлДБФ.Добавить();
		Для каждого Колонка Из ТекКолонки Цикл
			ФайлДБФ[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
		КонецЦикла;
	КонецЦикла;
	ФайлДБФ.ЗакрытьФайл();
	
	Сообщить("Даные выгружены в файл:" + ИмяФайлаВыгрузки);
	
	гФормаПрогрессора.Закрыть();
	
КонецПроцедуры

Процедура кзКоманднаяПанельФормыДиаграмма(Кнопка)
	
	ФормаСДиаграммой = ПолучитьФорму("Точка", ЭтаФорма);
	Если НЕ ФормаСДиаграммой.Открыта() Тогда
		ФормаСДиаграммой.ЭлементыФормы.Добавить(Тип("Диаграмма"), "Диаграмма");
		ФормаСДиаграммой.ЭлементыФормы.Диаграмма.Высота = ФормаСДиаграммой.Высота;
		ФормаСДиаграммой.ЭлементыФормы.Диаграмма.Ширина = ФормаСДиаграммой.Ширина;
	КонецЕсли;
	
	Диаграмма = ФормаСДиаграммой.ЭлементыФормы.Диаграмма;
	Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.Лево);
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.Право);
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.НИз, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.НИз);
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.Верх);
	
	Если СпособВыгрузки <> 1 Тогда
		Предупреждение("Выгрузка работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	лТаблицаРезультата = Вычислить(мИмяРеквизитаТаблицы);
	
	ТекКолонки = ЭлементыФормы[мИмяРеквизитаТаблицы].Колонки;
	Если ТекКолонки.Количество() = 0 ИЛИ лТаблицаРезультата.Количество() = 0 Тогда
		Сообщить("Нет результата запроса");
		Возврат;
	КонецЕсли;
	
	//Формируем список серий
	СписокСерий = новый СписокЗначений;
	Для каждого Колонка Из ТекКолонки Цикл
		Попытка
		    a = Число(лТаблицаРезультата[0][Колонка.Имя]);
			СписокСерий.Добавить(Колонка.Имя,Колонка.Имя);
		Исключение
		КонецПопытки; 
	КонецЦикла; 
	
	Если НЕ СписокСерий.ОтметитьЭлементы() Тогда
		Возврат;
	КонецЕсли;
	
	гФормаПрогрессора.Открыть();
	гФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = лТаблицаРезультата.Количество();
	гФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование данных для диаграммы:";
	Инд = 0;
	
	Диаграмма.Очистить();
	
	
	Для каждого ТекЭлемент Из СписокСерий Цикл
		Диаграмма.УстановитьСерию(ТекЭлемент.Значение);
	КонецЦикла; 
	
	Для каждого СтрокаТЧ Из лТаблицаРезультата Цикл
		
		Инд = Инд + 1;
		
		ОбработкаПрерыванияПользователя();
		
		гФормаПрогрессора.ЗначениеИндикатора = Инд;
		гФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Выгружается " + Инд + " - я строка";
		
		
		Для каждого Серия Из Диаграмма.Серии Цикл
			Диаграмма.УстановитьТочку();
			//УстановитьЗначение
		КонецЦикла; 
	
	КонецЦикла;
	
	НоваяСерия = Диаграмма.Серии.Добавить();
	
	ФормаСДиаграммой.Открыть();
	
	гФормаПрогрессора.Закрыть();
	
КонецПроцедуры

Процедура кзКоманднаяПанельФормыСформироватьКодДляОтладки(Кнопка)
	//Определяем путь к файлу

	ТекИмяФайла = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ПутьКСформироватьКодДляОтладки");
	Если гЗначениеНеЗаполнено(ТекИмяФайла) Тогда
		ТекИмяФайла = "";		
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Длг.Заголовок = "Выберите файл обработки Консоль запросов (consquery81.epf)";
	Если Длг.Выбрать() Тогда
		ТекИмяФайла = Длг.ПолноеИмяФайла;
		СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ПутьКСформироватьКодДляОтладки",ТекИмяФайла);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "Для отладки запроса необходимо:
		|1. Установить точку останова перед выполнение запроса (Например, перед строкой ""Запрос.Выполнить()"". 
		|2. Когда точка останова отработает, нажмите Shift + F9 (""Вычислить выражение"")).
		|3. В поле ввода ""Выражение"" ввести следующий текст: 
		|ВнешниеОбработки.Создать(""" + ТекИмяФайла + """).ОткрытьФормуДляОтладки(ЗАПРОС)
		|(Вместо слова ЗАПРОС подставляем имя переменной, которая содержит значение запроса, который предстоит отладить) и нажать кнопку ""Рассчитать"".
		|4. Продолжить отладку(F5).
		|5. В результате в режиме предприятия откроется консоль запросов с заполненными параметрами и текстом запроса.";
		
	Если Вопрос("Скопировать в буфер [Да] / Вывести код с инструкцией [Нет]?", РежимДиалогаВопрос.ДаНет,,, "Код для отладки запроса") = КодВозвратаДиалога.Да Тогда
		кзСкопироватьВБуфер(ПолучитьФорму("Точка"), "ВнешниеОбработки.Создать(""" + ТекИмяФайла + """).ОткрытьФормуДляОтладки(ЗАПРОС)");
	Иначе
		ТД = Новый ТекстовыйДокумент(); 		
		ТД.УстановитьТекст(ТекстСообщения);
		ТД.Показать(,); 
	КонецЕсли;
КонецПроцедуры

Процедура КонтМенюВыгрузитьВетку(Кнопка)
	СохранитьЗапросТекущейСтроки();
	СохранитьВеткуВФайл(ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока, ДеревоЗапросов.Колонки);
КонецПроцедуры

Процедура КонтМенюЗагрузитьВВетку(Кнопка)
	Родитель = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока.Родитель;
	ЗагрузитьВеткуИзФайла(?(Родитель = Неопределено, ДеревоЗапросов, Родитель), ДеревоЗапросов.Колонки);
КонецПроцедуры

Процедура КонтМенюСравнить(Кнопка)
	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.Элементыформы.КнопкаНаВерхнийУровень.Заголовок = "Сравнить с текущим запросом...";
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;

	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	РежимВыбораВеткиДерева = "СравнитьЗапросы";
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();
КонецПроцедуры

Процедура УдалитьСтраницыСВнешниимРезультатами()
	ТаблицыСРезультатами = Новый СписокЗначений;
	Для каждого ТекЭлемент Из ЭлементыФормы Цикл
		Если Найти(ТекЭлемент.Имя, "ТаблицаСРезультатом_") > 0 Тогда
			ТаблицыСРезультатами.Добавить(ТекЭлемент);
		КонецЕсли;			
	КонецЦикла; 
	Для каждого ТекЭлемент Из ТаблицыСРезультатами Цикл
		ЭлементыФормы.Удалить(ТекЭлемент.Значение);
	КонецЦикла; 
	
	СтраницыСРезультатами = Новый СписокЗначений;
	Для каждого ТекСтраница Из ЭлементыФормы.ПанельРезультата.Страницы Цикл
		Если Найти(ТекСтраница.Имя, "СтраницаСРезультатом_") > 0 Тогда
			СтраницыСРезультатами.Добавить(ТекСтраница);
		КонецЕсли;			
	КонецЦикла; 
	Для каждого ТекСтраница Из СтраницыСРезультатами Цикл
		ЭлементыФормы.ПанельРезультата.Страницы.Удалить(ТекСтраница.Значение);
	КонецЦикла; 
КонецПроцедуры
	
Процедура СпецМенюЗакрытьТекущуюстраницу(Кнопка)
	ТекСтраница = ЭлементыФормы.ПанельРезультата.ТекущаяСтраница;
	Если ТекСтраница <> Неопределено Тогда
		Если Найти(ТекСтраница.Имя, "СтраницаСРезультатом_") > 0 Тогда
			ЭлементыФормы.Удалить(ЭлементыФормы[СтрЗаменить(ТекСтраница.Имя, "СтраницаСРезультатом_", "ТаблицаСРезультатом_")]);
			ЭлементыФормы.ПанельРезультата.Страницы.Удалить(ТекСтраница);
			Если ЭлементыФормы.ПанельРезультата.Страницы.Количество()<3 Тогда
				ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[0];
			Конецесли;
		Иначе
			Предупреждение("Данная страница не подлежит удалению", 10);
		Конецесли;
	Конецесли;
КонецПроцедуры

Процедура СпецМенюЗакрытьвсеВнешниеРезультаты(Кнопка)
	Если Вопрос("Закрыть все страницы с внешниим результатами?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалитьСтраницыСВнешниимРезультатами();
		ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[0];
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьМеню(МассивМенюДляДобавления) Экспорт
	Для каждого ТекущееМеню Из МассивМенюДляДобавления Цикл
		лДеревоМеню = гПолучитьМеню(ТекущееМеню.Имя);
		лКореньМеню = гЗаполнитьМенюПоДереву(ТекущееМеню.Контейнер, лДеревоМеню, 0);
		Если лКореньМеню <> Неопределено Тогда 
			лКореньМеню.Картинка    = ?(ЗначениеЗаполнено(ТекущееМеню.Картинка), ТекущееМеню.Картинка, Новый Картинка);
			лКореньМеню.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры // СформироватьМеню()


// ЗавершенияАсинхронныхВызовов

Процедура ПоказатьВыборЭлементаОбработкаВыбора(ВыбранныйЭлемент, ДополнительныеПараметры)
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
			лИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			ДополнительныеПараметры.FTPСоединение.Получить(ВыбранныйЭлемент, лИмяВременногоФайла);
	//		ЗагрузитьЗапросы(лИмяВременногоФайла, мОперацииРаботыСФайломЗапроса.ЗагрузитьСFTP);
	//		ИмяФайлаСЗапросом = Неопределено;
	//		ОбновитьЗаголовок();	
	//		УдалитьФайлы(лИмяВременногоФайла);
	//		FTPСоединение = Неопределено;
	//		Состояние("Запрос загружен с ftp.", 100);
	КонецЕсли;
	
КонецПроцедуры // ПоказатьВыборЭлементаОбработкаВыбора()

//&НаКлиенте
//Процедура ОбработкаЗакрытиФормыНастройкаFTP(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
//	
//	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда 
//		ПараметрыПодключенияFTP = РезультатЗакрытия;
//	КонецЕсли;
//	
//КонецПроцедуры // ОбработкаЗакрытиФормыНастройкаFTP()
 
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяРеквизитаТаблицы                = гПолучитьСвойстваРеквизитаТаблицаРезультата().ИмяРеквизита;